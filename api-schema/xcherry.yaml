openapi: 3.0.3
info:
  description: >-
    This APIs between xCherry service and SDKs
  version: 0.0.3
  title: xCherry APIs
paths:
  # xCherry service APIs are hosted by xCherry service for SDKs to call
  /api/v1/xcherry/service/process-execution/start:
    post:
      summary: start a process execution
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProcessExecutionStartRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionStartResponse'
        default:
          description: "400: Invalid request, 409: Process already started, 424: app database write failure"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/xcherry/service/process-execution/stop:
    post:
      summary: stop a process execution
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProcessExecutionStopRequest'
      responses:
        '200':
          description: successful operation
          content: {}
        default:
          description: "400: Invalid request, 404: Process execution not exists"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/xcherry/service/process-execution/describe:
    post:
      summary: describe a process execution
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProcessExecutionDescribeRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionDescribeResponse'
        default:
          description: "400: Invalid request, 404: Process execution not exists"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/xcherry/service/process-execution/list:
    post:
      summary: list process executions
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ListProcessExecutionsRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProcessExecutionsResponse'
        default:
          description: "400: Invalid request"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/xcherry/service/process-execution/publish-to-local-queue:
    post:
      summary: send message(s) to be consumed within a single process execution
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PublishToLocalQueueRequest'
      responses:
        '200':
          description: successful operation
          content: {}
        default:
          description: "400: Invalid request, 404: Process execution not exists or not running"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/xcherry/service/process-execution/rpc:
    post:
      summary: execute a RPC method of a process execution
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProcessExecutionRpcRequest'
      responses:
        '200':
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ProcessExecutionRpcResponse'
        default:
          description: >
            400: Invalid request, 404: Process execution not exists, or not running to accept write operation, 
            424: app database write failure or worker RPC execution failure, see ErrorSubType for details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  # workers APIs are hosted by applications via SDKs, for server to call back
  /api/v1/xcherry/worker/async-state/wait-until:
    post:
      summary: "invoking AsyncState.waitUntil API"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateWaitUntilRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateWaitUntilResponse'
        '424':
          description: worker execution failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'              
  /api/v1/xcherry/worker/async-state/execute:
    post:
      summary: "invoking AsyncState.execute API"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateExecuteRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateExecuteResponse'
        '406':
          description: response of handling app database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppDatabaseErrorHandling'
        '424':
          description: worker execution failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
  /api/v1/xcherry/worker/process/rpc:
    post:
      summary: "execute a RPC method of a process execution in the worker"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRpcWorkerRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessRpcWorkerResponse'
        '424':
          description: worker execution failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
  # internal APIs are for internal communication within the services of server
  /internal/api/v1/xcherry/notify-immediate-tasks:
    post:
      summary: "for api service to tell async service that there are new immediate tasks added to the queue"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyImmediateTasksRequest'
      responses:
        '200':
          description: successful operation
          content: {}
  /internal/api/v1/xcherry/notify-timer-tasks:
    post:
      summary: "for api service to tell async service that there are new timer tasks added to the queue"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyTimerTasksRequest'
      responses:
        '200':
          description: successful operation
          content: {}              
components:
  schemas:
    ProcessExecutionDescribeRequest:
      required: 
        - namespace
        - processId
      type: object
      properties:
        namespace:
          type: string
        processId:
          type: string
    ProcessExecutionDescribeResponse:
      type: object  
      properties: 
        processExecutionId:
          type: string
        processType:
          type: string
          description: the process type for SDK to lookup the process definition class
        workerUrl:
          type: string
          description: the URL for xcherry async service to make callback to worker
        startTimestamp:
          type: integer
          description: start time of the process execution
        status:
          $ref: '#/components/schemas/ProcessStatus'
    ProcessStatus:
      type: string
      enum:
        - RUNNING
        - COMPLETED
        - FAILED
        - TIMEOUT
        - TERMINATED
    ListProcessExecutionsRequest:
      type: object
      required:
        - namespace
        - pageSize
      properties:
        namespace:
          type: string
        pageSize:
          type: integer
          default: 100
        nextPageToken:
          type: string
        statusFilter:
          $ref: '#/components/schemas/ProcessStatus'
        startTimeFilter:
          $ref: '#/components/schemas/TimeRangeFilter'
        processTypeFilter:
          $ref: '#/components/schemas/ProcessTypeFilter'
        processExecutionFilter:
          $ref: '#/components/schemas/ProcessIdFilter'
        queryFilter:
          type: string
    ListProcessExecutionsResponse:
      type: object
      properties:
        processExecutions:
          type: array
          items:
            $ref: '#/components/schemas/ProcessExecutionListInfo'
        nextPageToken:
          type: string
    TimeRangeFilter:
      type: object
      properties:
        earliestTime:
          type: integer
          format: int64
        latestTime:
          type: integer
          format: int64
    ProcessIdFilter:
      type: object
      properties:
        processId:
          type: string
    ProcessTypeFilter:
      type: object
      required:
        - processType
      properties:
        processType:
          type: string
    ProcessExecutionListInfo:
      type: object
      properties:
        namespace:
          type: string
        processId:
          type: string
        processExecutionId:
          type: string
        processType:
          type: string
        startTimestamp:
          type: integer
        closeTimestamp:
          type: integer
        status:
          $ref: '#/components/schemas/ProcessStatus'
    AsyncStateWaitUntilRequest:
      type: object
      description: the input of the waitUntil API
      required: 
        - context
        - processType
        - stateId
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
    AsyncStateWaitUntilResponse:
      type: object
      description: the output of the waitUntil API
      required: 
        - commandRequest
      properties:
        commandRequest:
          $ref: '#/components/schemas/CommandRequest'
        publishToLocalQueue:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
    CommandRequest:
      type: object
      required: 
        - waitingType
      properties: 
        waitingType: 
          $ref: '#/components/schemas/CommandWaitingType'
        timerCommands:
          type: array
          items:
            $ref: '#/components/schemas/TimerCommand'
        localQueueCommands:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueCommand'
    TimerCommand:
      type: object
      required:
        - delayInSeconds
      properties:
        delayInSeconds:
          type: integer
          format: int64
    LocalQueueCommand:
      type: object
      required:
        - queueName
      properties:
        queueName:
          type: string
        count:
          type: integer
          default: 1
          description: the number of identical messages to await
    CommandWaitingType:
      type: string
      enum:
        - EmptyCommand # default value, which means not waiting for anything
        - AnyOfCompletion
        - AllOfCompletion
    AsyncStateExecuteRequest:
      type: object
      description: the input of the execute API
      required: 
        - context
        - processType
        - stateId
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        commandResults:
          $ref: '#/components/schemas/CommandResults'
        appDatabaseReadResponse:
          $ref: '#/components/schemas/AppDatabaseReadResponse'
        appDatabaseError:
          $ref: '#/components/schemas/AppDatabaseError'
        loadedLocalAttributes:
          $ref: '#/components/schemas/LoadLocalAttributesResponse'
    CommandResults:
      type: object
      properties:
        timerResults:
          type: array
          items:
            $ref: '#/components/schemas/TimerResult'
        localQueueResults:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueResult'
    TimerResult:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/CommandStatus'
    LocalQueueResult:
      type: object
      required:
        - status
        - queueName
      properties:
        status:
          $ref: '#/components/schemas/CommandStatus'
        queueName:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueMessageResult'
    CommandStatus:
      type: string
      enum:
        - WAITING_COMMAND
        - COMPLETED_COMMAND
        - SKIPPED_COMMAND
    LocalQueueMessage:
      type: object
      required:
        - queueName
      properties:
        queueName:
          type: string
        dedupId:
          type: string
          description: UUID to uniquely distinguish different messages. If not specified, the server will generate a UUID instead.
        payload:
          $ref: '#/components/schemas/EncodedObject'
    LocalQueueMessageResult:
      type: object
      required:
        - dedupId
      properties:
        dedupId:
          type: string
          description: UUID to uniquely distinguish different messages.
        payload:
          $ref: '#/components/schemas/EncodedObject'
    AsyncStateExecuteResponse:
      type: object
      description: the output of the execute API
      required: 
        - stateDecision
      properties:
        stateDecision:
          $ref: '#/components/schemas/StateDecision'
        publishToLocalQueue:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
        writeToAppDatabase:
          $ref: '#/components/schemas/AppDatabaseWrite'
        writeToLocalAttributes:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
    StateDecision:
      type: object
      description: the decision at the end of state execution, either nextStates or threadCloseDecision is needed
      properties:
        nextStates:
          type: array
          items:
            $ref: '#/components/schemas/StateMovement'
        threadCloseDecision:
          $ref: '#/components/schemas/ThreadCloseDecision'
    ThreadCloseDecision:
      type: object
      required: 
        - closeType
      properties:
        closeType:
          $ref: '#/components/schemas/ThreadCloseType'
        closeInput:
          $ref: '#/components/schemas/EncodedObject'
    ThreadCloseType:
      type: string
      enum:
        - FORCE_COMPLETE_PROCESS
        - GRACEFUL_COMPLETE_PROCESS
        - DEAD_END
        - FORCE_FAIL_PROCESS
    StateMovement:
      type: object
      required:
        - stateId
      properties:
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        stateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
    Context:
      type: object
      required:
        - processId
        - processExecutionId
        - processStartedTimestamp
      properties:
        processId:
          type: string
        processExecutionId:
          type: string
        processStartedTimestamp:
          type: integer
          format: int64
        stateExecutionId:
          type: string
          description: stateExecutionId is for async state API only
        firstAttemptTimestamp:
          description: for async state API only(during backoff retry)
          type: integer
          format: int64
        attempt:
          description: for async state API only(during backoff retry)
          type: integer
        recoverFromStateExecutionId:
          description: for async state API only, state id + sequence number
          type: string
        recoverFromApi: # if last execution failed, WAIT_UNTIL or EXECUTE, otherwise NONE
          $ref: '#/components/schemas/WorkerApiType'
    WorkerApiType:
      type: string
      enum:
        - WAIT_UNTIL_API
        - EXECUTE_API
        - RPC_API
    WorkerErrorResponse:
      type: object
      required: 
        - errorType
      properties:
        detail:
          type: string
          description: >
            an optional field to let application set some detailed information. 
            Default to the error message + stacktrace of the error
        errorType:
          type: string
          description: "an optional field for error handling. Default to the class/error Name"
    EncodedObject:
      type: object
      required: 
        - encoding
        - data
      properties:
        encoding:
          type: string
        data:
          type: string
    ApiErrorResponse:
      type: object
      properties:
        errorSubType: # subType is for distinguishing different errors within the same HTTP status code
          $ref: '#/components/schemas/ErrorSubType'
        appErrorType:
          type: string
          description: >
            for WORKER_EXECUTION_ERROR, it's the value from WorkerErrorResponse.errorType;
            for APP_DATABASE_READ/WRITE_ERROR, it's the error code from database driver
        details:
          type: string
          description: >
            for WORKER_EXECUTION_ERROR, it's the value from WorkerErrorResponse.details;
            for APP_DATABASE_READ/WRITE_ERROR, it's the error message from database driver;
            for other apiErrorType, it's the detailed message from server.
    ErrorSubType:
      type: string
      enum:
        - UNCATEGORIZED_ERROR # for errors that are not necessary to categorize as subType yet(e.g. http status code are enough)
        - WORKER_EXECUTION_ERROR
        - APP_DATABASE_READ_ERROR
        - APP_DATABASE_WRITE_ERROR
        - POLL_TIMEOUT_ERROR
    ProcessExecutionStartRequest:
      type: object
      description: the request for starting a process execution
      required:
        - namespace
        - processId
        - processType
        - workerUrl
      properties:
        namespace:
          type: string
        processId:
          type: string
          description: the user business identifier for the process, which can be used for multiple ProcessExecution based on ProcessIdReusePolicy
        processType:
          type: string
          description: the process type for SDK to lookup the process definition class
        workerUrl:
          type: string
          description: the URL for xcherry async service to make callback to worker
        startStateId:
          type: string
          description: StateId of the first AsyncState to start
        startStateInput: # input for the startStateId
          $ref: '#/components/schemas/EncodedObject'
        startStateConfig: # config for the startState
          $ref: '#/components/schemas/AsyncStateConfig'
        processStartConfig: # more configs for the process execution
          $ref: '#/components/schemas/ProcessStartConfig'
    ProcessStartConfig:
      type: object
      properties:
        timeoutSeconds:
          type: integer
        idReusePolicy:
          $ref: '#/components/schemas/ProcessIdReusePolicy'
        appDatabaseConfig:
          $ref: '#/components/schemas/AppDatabaseConfig'
        localAttributeConfig:
          $ref: '#/components/schemas/LocalAttributeConfig'
    LocalAttributeConfig:
      type: object
      properties:
        initialWrite:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
    KeyValue:
      type: object
      required:
        - key
        - value
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/EncodedObject'
    LoadLocalAttributesRequest:
      type: object
      properties:
        keysToLoadNoLock:
          type: array
          items:
            type: string
        keysToLoadWithLock:
          type: array
          items:
            type: string
        lockType:
          $ref: '#/components/schemas/DatabaseLockingType'
    LoadLocalAttributesResponse:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/KeyValue'
    DatabaseLockingType:
      type: string
      enum:
        - NO_LOCKING
        - SHARE_LOCK
        - EXCLUSIVE_LOCK
    ProcessIdReusePolicy:
      type: string
      enum:
        - ALLOW_IF_PREVIOUS_EXIT_ABNORMALLY
        - ALLOW_IF_NO_RUNNING
        - DISALLOW_REUSE
        - TERMINATE_IF_RUNNING
    AsyncStateConfig:
      type: object
      properties:
        skipWaitUntil:
          type: boolean
        waitUntilApiTimeoutSeconds: 
          type: integer
          description: the timeout for the single attempt of AsyncState.waitUntil API
        executeApiTimeoutSeconds: 
          type: integer
          description: the timeout for the single attempt of AsyncState.execute API
        waitUntilApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        executeApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        stateFailureRecoveryOptions:
          $ref: '#/components/schemas/StateFailureRecoveryOptions'
        appDatabaseReadRequest:
          $ref: '#/components/schemas/AppDatabaseReadRequest'
        loadLocalAttributesRequest:
          $ref: '#/components/schemas/LoadLocalAttributesRequest'
    StateFailureRecoveryPolicy:
      type: string
      enum:
        - FAIL_PROCESS_ON_STATE_FAILURE
        - PROCEED_TO_CONFIGURED_STATE
    StateFailureRecoveryOptions:
      type: object
      required:
        - policy
      properties:
        policy:
          $ref: '#/components/schemas/StateFailureRecoveryPolicy'
        stateFailureProceedStateId: # only valid when name is PROCEED_TO_CONFIGURED_STATE
          type: string
        stateFailureProceedStateConfig: # only valid when name is PROCEED_TO_CONFIGURED_STATE
          $ref: '#/components/schemas/AsyncStateConfig'
    RetryPolicy:
      type: object
      properties:
        initialIntervalSeconds: 
          type: integer
          description: the initial interval for the first retry, default to 1 second
        backoffCoefficient: 
          type: number
          format: float
          description: the backoff coefficient for the next retry, default to 2
        maximumIntervalSeconds: 
          type: integer
          description: the maximum interval for the next retry, default to 100x of initial interval
        maximumAttempts: 
          type: integer
          description: the maximum number of attempts, default to 0, means unlimited
        maximumAttemptsDurationSeconds: 
          type: integer
          description: the maximum duration of all attempts, default to 0, means unlimited
    ProcessExecutionStartResponse:
      type: object
      description: response of ProcessExecutionStartRequest
      required:
        - processExecutionId
      properties:
        processExecutionId:
          type: string
          description: a UUID as the unique identifier of a process execution
    NotifyImmediateTasksRequest:
      required:
        - shardId
      type: object
      properties:
        shardId:
          type: integer
        namespace:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
        processId:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
        processExecutionId:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
    NotifyTimerTasksRequest:
      required:
        - shardId
        - fireTimestamps
      type: object
      properties:
        shardId:
          type: integer
        fireTimestamps:
          type: array
          items:
              type: integer
              format: int64
          description: the fire timestamp of all timer tasks to pull
        namespace:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
        processId:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
        processExecutionId:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
    ProcessExecutionStopRequest:
      type: object
      description: the request for stopping a process execution
      required:
        - namespace
        - processId
      properties:
        namespace:
          type: string
        processId:
          type: string
        stopType:
          $ref: '#/components/schemas/ProcessExecutionStopType'
    ProcessExecutionStopType:
      type: string
      enum:
        - TERMINATE # default behaviour. ProcessStatus becomes TERMINATED
        - FAIL # ProcessStatus becomes FAILED
    PublishToLocalQueueRequest:
      type: object
      description: the request for sending messages to be consumed within a single process execution
      required:
        - namespace
        - processId
      properties:
        namespace:
          type: string
        processId:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
    ProcessExecutionRpcRequest:
      type: object
      description: the request for executing a RPC method of a process execution
      required:
        - namespace
        - processId
        - rpcName
      properties:
        namespace:
          type: string
        processId:
          type: string
        rpcName:
          type: string
        input:
          $ref: '#/components/schemas/EncodedObject'
        timeoutSeconds:
          type: integer
          description: the timeout for the single attempt of the Process RPC API
        appDatabaseReadRequest:
          $ref: '#/components/schemas/AppDatabaseReadRequest'
    ProcessExecutionRpcResponse:
      type: object
      description: the response for executing a RPC method of a process execution
      properties:
        output:
          $ref: '#/components/schemas/EncodedObject'
    ProcessRpcWorkerRequest:
      type: object
      description: the request of the worker RPC API
      required:
        - context
        - processType
        - rpcName
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        rpcName:
          type: string
        input:
          $ref: '#/components/schemas/EncodedObject'
        appDatabaseReadResponse:
          $ref: '#/components/schemas/AppDatabaseReadResponse'
    ProcessRpcWorkerResponse:
      type: object
      description: the response of the worker RPC API
      required:
        - stateDecision
      properties:
        output:
          $ref: '#/components/schemas/EncodedObject'
        stateDecision:
          $ref: '#/components/schemas/StateDecision'
        publishToLocalQueue:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
        writeToAppDatabase:
          $ref: '#/components/schemas/AppDatabaseWrite'
    # below is models for app database feature
    AppDatabaseReadRequest:
      type: object
      description: the request to read the selected rows of configured app database tables
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseTableReadRequest'
    AppDatabaseTableReadRequest:
      type: object
      properties:
        tableName:
          type: string
        lockType:
          $ref: '#/components/schemas/DatabaseLockingType'
        columns:
          type: array
          items:
            type: string
    AppDatabaseReadResponse:
      type: object
      description: "the response for read the app database"
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseTableReadResponse'
    AppDatabaseError:
      type: object
      description: "the error for read/write the app database. For the write error, it's from last attempt."
      required:
        - appDBErrorType
        - appDBErrorCode
      properties:
        appDBErrorType:
          # this is for read/write error on appDatabase
          # Note 0: this is only for AsyncStateExecuteRequest because RPC can return error synchronously
          # Note 1: for write error, it's duplicateExecutionForThrowingDatabaseError
          #        -- meaning the write operation is from the last attempt of execute API
          # Note 2: with this error, server will expect worker return 406 status code and AppDatabaseErrorHandling as response
          $ref: '#/components/schemas/ErrorSubType'
        appDBErrorCode:
          type: string
          description: "the error code from database driver"
        appDBErrorMessage:
          type: string
          description: "the error message from database driver"
        appDBErrorTableName:
          type: string
          description: "the first table that encounters the error to help SDK to throw the error in a friendly way "
    AppDatabaseTableReadResponse:
      type: object
      properties:
        tableName:
          type: string
        rows:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseRowReadResponse'
    AppDatabaseRowReadResponse:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
    AppDatabaseConfig:
      type: object
      description: the configuration of what tables and rows to read/load for state/RPCs, including an optional initial write
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseTableConfig'
    AppDatabaseTableConfig:
      type: object
      required:
        - tableName
        - rows
      properties:
        tableName:
          type: string
        rows:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseTableRowSelector'
    AppDatabaseTableRowSelector:
      type: object
      required:
        - primaryKey
      properties:
        primaryKey:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
        initialWrite: # optional initial write to create the new row if not exists
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
        conflictMode:
          $ref: '#/components/schemas/WriteConflictMode'
    AppDatabaseWrite:
      type: object
      description: the write operation for state/RPCs to write to the app database values
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseTableWrite'
    AppDatabaseTableWrite:
      type: object
      required:
        - tableName
      properties:
        tableName:
          type: string
        rows:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseRowWrite'
    AppDatabaseRowWrite:
      type: object
      required:
        - primaryKey
        - writeColumns
      properties:
        primaryKey:
          type: array
          description: the PK to locate the rows for write
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
        writeColumns:
          type: array
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
    WriteConflictMode:
      type: string
      enum:
        - RETURN_ERROR_ON_CONFLICT # default behavior for initial row write
        - IGNORE_CONFLICT
        - OVERRIDE_ON_CONFLICT
    AppDatabaseColumnValue:
      type: object
      description: the value of a table column (from SDK to server or from server to SDK)
      required:
        - column
        - queryValue
      properties:
        column:
          type: string
          description: the column name that can be used in the database query, see below for example
        queryValue:
          type: string
          description: the plain string value that can be used in the database query(e.g. for SQL SELECT ... WHERE $Column=$dbQueryValue or UPDATE/INSERT)
    AppDatabaseErrorHandling:
      type: object
      description: "handling the AppDatabase error"
      properties:
        latestAppDBReqForRevise:
          $ref: '#/components/schemas/AppDatabaseReadRequest'
    # above is models for app database feature