openapi: 3.0.3
info:
  description: >-
    This APIs between xdb service and SDKs
  version: 0.0.1
  title: XDB APIs
paths:
  # xdb service APIs are hosted by xdb service for xdb SDKs to call
  /api/v1/xdb/service/process-execution/start:
    post:
      summary: start a process execution
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProcessExecutionStartRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionStartResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '409':
          description: Process already started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/xdb/service/process-execution/stop:
    post:
      summary: stop a process execution
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProcessExecutionStopRequest'
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Process execution not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/xdb/service/process-execution/describe:
    post:
      summary: describe a process execution
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProcessExecutionDescribeRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionDescribeResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Process execution not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /api/v1/xdb/service/process-execution/publish-to-local-queue:
    post:
      summary: send message(s) to be consumed within a single process execution
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PublishToLocalQueueRequest'
      responses:
        '200':
          description: successful operation
          content: {}
        '400':
          description: invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        '404':
          description: Process execution not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  # xdb workers APIs are hosted by xdb applications via SDKs, for xdb server to call back
  /api/v1/xdb/worker/async-state/wait-until:
    post:
      summary: "invoking AsyncState.waitUntil API"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateWaitUntilRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateWaitUntilResponse'
        default:
          description: worker execution failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'              
  /api/v1/xdb/worker/async-state/execute:
    post:
      summary: "invoking AsyncState.execute API"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateExecuteRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateExecuteResponse'
        default:
          description: worker execution failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
  # internal APIs are for internal communication within the services of xdb server 
  /internal/api/v1/xdb/notify-immediate-tasks:
    post:
      summary: "for api service to tell async service that there are new immediate tasks added to the queue"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyImmediateTasksRequest'
      responses:
        '200':
          description: successful operation
          content: {}
  /internal/api/v1/xdb/notify-timer-tasks:
    post:
      summary: "for api service to tell async service that there are new timer tasks added to the queue"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyTimerTasksRequest'
      responses:
        '200':
          description: successful operation
          content: {}              
components:
  schemas:
    ProcessExecutionDescribeRequest:
      required: 
        - namespace
        - processId
      type: object
      properties:
        namespace:
          type: string
        processId:
          type: string
    ProcessExecutionDescribeResponse:
      type: object  
      properties: 
        processExecutionId:
          type: string
        processType:
          type: string
          description: the process type for SDK to lookup the process definition class
        workerUrl:
          type: string
          description: the URL for XDB async service to make callback to worker
        startTimestamp:
          type: integer
          description: start time of the process execution
        status:
          $ref: '#/components/schemas/ProcessStatus'
    ProcessStatus:
      type: string
      enum:
        - RUNNING
        - COMPLETED
        - FAILED
        - TIMEOUT
        - TERMINATED
    AsyncStateWaitUntilRequest:
      type: object
      description: the input of the waitUntil API
      required: 
        - context
        - processType
        - stateId
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
    AsyncStateWaitUntilResponse:
      type: object
      description: the output of the waitUntil API
      required: 
        - commandRequest
      properties:
        commandRequest:
          $ref: '#/components/schemas/CommandRequest'
        publishToLocalQueue:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
    CommandRequest:
      type: object
      required: 
        - waitingType
      properties: 
        waitingType: 
          $ref: '#/components/schemas/CommandWaitingType'
        timerCommands:
          type: array
          items:
            $ref: '#/components/schemas/TimerCommand'
        localQueueCommands:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueCommand'
    TimerCommand:
      type: object
      required:
        - firingUnixTimestampSeconds
      properties:
        commandId:
          type: string
        firingUnixTimestampSeconds:
          type: integer
          format: int64
    LocalQueueCommand:
      type: object
      required:
        - queueName
      properties:
        queueName:
          type: string
        count:
          type: integer
          default: 1
          description: the number of identical messages to await
    CommandWaitingType:
      type: string
      enum:
        - EmptyCommand # default value, which means not waiting for anything
        - AnyOfCompletion
        - AllOfCompletion
    AsyncStateExecuteRequest:
      type: object
      description: the input of the execute API
      required: 
        - context
        - processType
        - stateId
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        commandResults:
          $ref: '#/components/schemas/CommandResults'
    CommandResults:
      type: object
      properties:
        timerResults:
          type: array
          items:
            $ref: '#/components/schemas/TimerResult'
        localQueueResults:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
    TimerResult:
      type: object
      required:
        - timerStatus
      properties:
        commandId:
          type: string
        timerStatus:
          $ref: '#/components/schemas/TimerStatus'
    TimerStatus:
      type: string
      enum:
        - SCHEDULED_TIMER
        - FIRED_TIMER
        - SKIPPED_TIMER
    LocalQueueMessage:
      type: object
      required:
        - queueName
      properties:
        queueName:
          type: string
        dedupId:
          type: string
          description: UUID to uniquely distinguish different messages. If not specified, the server will generate a UUID instead.
        payload:
          $ref: '#/components/schemas/EncodedObject'
    AsyncStateExecuteResponse:
      type: object
      description: the output of the execute API
      required: 
        - stateDecision
      properties:
        stateDecision:
          $ref: '#/components/schemas/StateDecision'
        publishToLocalQueue:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
    StateDecision:
      type: object
      description: the decision at the end of state execution, either nextStates or threadCloseDecision is needed
      properties:
        nextStates:
          type: array
          items:
            $ref: '#/components/schemas/StateMovement'
        threadCloseDecision:
          $ref: '#/components/schemas/ThreadCloseDecision'
    ThreadCloseDecision:
      type: object
      required: 
        - closeType
      properties:
        closeType:
          $ref: '#/components/schemas/ThreadCloseType'
        closeInput:
          $ref: '#/components/schemas/EncodedObject'
    ThreadCloseType:
      type: string
      enum:
        - FORCE_COMPLETE_PROCESS
        - GRACEFUL_COMPLETE_PROCESS
        - DEAD_END
        - FORCE_FAIL_PROCESS
    StateMovement:
      type: object
      required:
        - stateId
      properties:
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        stateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
    Context:
      type: object
      required:
        - processId
        - processExecutionId
        - processStartedTimestamp
      properties:
        processId:
          type: string
        processExecutionId:
          type: string
        processStartedTimestamp:
          type: integer
          format: int64
        stateExecutionId:
          type: string
          description: stateExecutionId is for async state API only
        firstAttemptTimestamp:
          description: for async state API only(during backoff retry)
          type: integer
          format: int64
        attempt:
          description: for async state API only(during backoff retry)
          type: integer
        lastFailedStateExecutionId:
          description: for async state API only, state id + sequence number
          type: string
        lastFailedApi:
          description: if last execution failed, WAIT_UNTIL or EXECUTE, otherwise NONE
          type: string
          enum:
            - WAIT_UNTIL
            - EXECUTE
            - NONE
    WorkerErrorResponse:
      type: object
      required: 
        - errorType
      properties:
        detail:
          type: string
        errorType:
          type: string
    EncodedObject:
      type: object
      required: 
        - encoding
        - data
      properties:
        encoding:
          type: string
        data:
          type: string
    ApiErrorResponse:
      type: object
      properties:
        detail:
          type: string
        originalWorkerErrorDetail:
          type: string
        originalWorkerErrorType:
          type: string
        originalWorkerErrorStatus:
          type: integer
    ProcessExecutionStartRequest:
      type: object
      description: the request for starting a process execution
      required:
        - namespace
        - processId
        - processType
        - workerUrl
      properties:
        namespace:
          type: string
        processId:
          type: string
          description: the user business identifier for the process, which can be used for multiple ProcessExecution based on ProcessIdReusePolicy
        processType:
          type: string
          description: the process type for SDK to lookup the process definition class
        workerUrl:
          type: string
          description: the URL for XDB async service to make callback to worker
        startStateId:
          type: string
          description: StateId of the first AsyncState to start
        startStateInput: # input for the startStateId
          $ref: '#/components/schemas/EncodedObject'
        startStateConfig: # config for the startState
          $ref: '#/components/schemas/AsyncStateConfig'
        processStartConfig: # more configs for the process execution
          $ref: '#/components/schemas/ProcessStartConfig'
    ProcessStartConfig:
      type: object
      properties:
        timeoutSeconds:
          type: integer
        idReusePolicy:
          $ref: '#/components/schemas/ProcessIdReusePolicy'
    ProcessIdReusePolicy:
      type: string
      enum:
        - ALLOW_IF_PREVIOUS_EXIT_ABNORMALLY
        - ALLOW_IF_NO_RUNNING
        - DISALLOW_REUSE
        - TERMINATE_IF_RUNNING
    AsyncStateConfig:
      type: object
      properties:
        skipWaitUntil:
          type: boolean
        waitUntilApiTimeoutSeconds: 
          type: integer
          description: the timeout for the single attempt of AsyncState.waitUntil API
        executeApiTimeoutSeconds: 
          type: integer
          description: the timeout for the single attempt of AsyncState.execute API
        waitUntilApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        executeApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        stateFailureRecoveryPolicy:
          type: object
          required:
            - name
          properties:
            name:
              type: string
              enum:
                - FAIL_PROCESS_ON_STATE_FAILURE
                - PROCEED_TO_CONFIGURED_STATE
            stateFailureProceedStateId: # only valid when name is PROCEED_TO_CONFIGURED_STATE
              type: string
            stateFailureProceedStateConfig: # only valid when name is PROCEED_TO_CONFIGURED_STATE
              $ref: '#/components/schemas/AsyncStateConfig'
    RetryPolicy:
      type: object
      properties:
        initialIntervalSeconds: 
          type: integer
          description: the initial interval for the first retry, default to 1 second
        backoffCoefficient: 
          type: number
          format: float
          description: the backoff coefficient for the next retry, default to 2
        maximumIntervalSeconds: 
          type: integer
          description: the maximum interval for the next retry, default to 100x of initial interval
        maximumAttempts: 
          type: integer
          description: the maximum number of attempts, default to 0, means unlimited
        maximumAttemptsDurationSeconds: 
          type: integer
          description: the maximum duration of all attempts, default to 0, means unlimited
    ProcessExecutionStartResponse:
      type: object
      description: response of ProcessExecutionStartRequest
      required:
        - processExecutionId
      properties:
        processExecutionId:
          type: string
          description: a UUID as the unique identifier of a process execution
    NotifyImmediateTasksRequest:
      required:
        - shardId
      type: object
      properties:
        shardId:
          type: integer
        namespace:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
        processId:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
        processExecutionId:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
    NotifyTimerTasksRequest:
      required:
        - shardId
        - fireTimestamps
      type: object
      properties:
        shardId:
          type: integer
        fireTimestamps:
          type: array
          items:
              type: integer
              format: int64
          description: the fire timestamp of all timer tasks to pull
        namespace:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
        processId:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
        processExecutionId:
          type: string
          description: optional field for distributed database without global secondary index, to pull for specific task rather than a page
    ProcessExecutionStopRequest:
      type: object
      description: the request for stopping a process execution
      required:
        - namespace
        - processId
      properties:
        namespace:
          type: string
        processId:
          type: string
        stopType:
          $ref: '#/components/schemas/ProcessExecutionStopType'
    ProcessExecutionStopType:
      type: string
      enum:
        - TERMINATE # default behaviour. ProcessStatus becomes TERMINATED
        - FAIL # ProcessStatus becomes FAILED
    PublishToLocalQueueRequest:
      type: object
      description: the request for sending messages to be consumed within a single process execution
      required:
        - namespace
        - processId
      properties:
        namespace:
          type: string
        processId:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/LocalQueueMessage'

