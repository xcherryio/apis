/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// WorkerApiType the model 'WorkerApiType'
type WorkerApiType string

// List of WorkerApiType
const (
	WAIT_UNTIL_API WorkerApiType = "WAIT_UNTIL_API"
	EXECUTE_API    WorkerApiType = "EXECUTE_API"
	RPC_API        WorkerApiType = "RPC_API"
)

// All allowed values of WorkerApiType enum
var AllowedWorkerApiTypeEnumValues = []WorkerApiType{
	"WAIT_UNTIL_API",
	"EXECUTE_API",
	"RPC_API",
}

func (v *WorkerApiType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkerApiType(value)
	for _, existing := range AllowedWorkerApiTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkerApiType", value)
}

// NewWorkerApiTypeFromValue returns a pointer to a valid WorkerApiType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkerApiTypeFromValue(v string) (*WorkerApiType, error) {
	ev := WorkerApiType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkerApiType: valid values are %v", v, AllowedWorkerApiTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkerApiType) IsValid() bool {
	for _, existing := range AllowedWorkerApiTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkerApiType value
func (v WorkerApiType) Ptr() *WorkerApiType {
	return &v
}

type NullableWorkerApiType struct {
	value *WorkerApiType
	isSet bool
}

func (v NullableWorkerApiType) Get() *WorkerApiType {
	return v.value
}

func (v *NullableWorkerApiType) Set(val *WorkerApiType) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerApiType) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerApiType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerApiType(val *WorkerApiType) *NullableWorkerApiType {
	return &NullableWorkerApiType{value: val, isSet: true}
}

func (v NullableWorkerApiType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerApiType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
