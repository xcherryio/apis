/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AsyncStateExecuteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsyncStateExecuteRequest{}

// AsyncStateExecuteRequest the input of the execute API
type AsyncStateExecuteRequest struct {
	Context                            Context                             `json:"context"`
	ProcessType                        string                              `json:"processType"`
	StateId                            string                              `json:"stateId"`
	StateInput                         *EncodedObject                      `json:"stateInput,omitempty"`
	CommandResults                     *CommandResults                     `json:"commandResults,omitempty"`
	ReadAppDatabaseResponseWithDBError *AppDatabaseReadResponseWithDBError `json:"readAppDatabaseResponseWithDBError,omitempty"`
	LoadedLocalAttributes              *LoadLocalAttributesResponse        `json:"loadedLocalAttributes,omitempty"`
}

type _AsyncStateExecuteRequest AsyncStateExecuteRequest

// NewAsyncStateExecuteRequest instantiates a new AsyncStateExecuteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncStateExecuteRequest(context Context, processType string, stateId string) *AsyncStateExecuteRequest {
	this := AsyncStateExecuteRequest{}
	this.Context = context
	this.ProcessType = processType
	this.StateId = stateId
	return &this
}

// NewAsyncStateExecuteRequestWithDefaults instantiates a new AsyncStateExecuteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncStateExecuteRequestWithDefaults() *AsyncStateExecuteRequest {
	this := AsyncStateExecuteRequest{}
	return &this
}

// GetContext returns the Context field value
func (o *AsyncStateExecuteRequest) GetContext() Context {
	if o == nil {
		var ret Context
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *AsyncStateExecuteRequest) GetContextOk() (*Context, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *AsyncStateExecuteRequest) SetContext(v Context) {
	o.Context = v
}

// GetProcessType returns the ProcessType field value
func (o *AsyncStateExecuteRequest) GetProcessType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessType
}

// GetProcessTypeOk returns a tuple with the ProcessType field value
// and a boolean to check if the value has been set.
func (o *AsyncStateExecuteRequest) GetProcessTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessType, true
}

// SetProcessType sets field value
func (o *AsyncStateExecuteRequest) SetProcessType(v string) {
	o.ProcessType = v
}

// GetStateId returns the StateId field value
func (o *AsyncStateExecuteRequest) GetStateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateId
}

// GetStateIdOk returns a tuple with the StateId field value
// and a boolean to check if the value has been set.
func (o *AsyncStateExecuteRequest) GetStateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateId, true
}

// SetStateId sets field value
func (o *AsyncStateExecuteRequest) SetStateId(v string) {
	o.StateId = v
}

// GetStateInput returns the StateInput field value if set, zero value otherwise.
func (o *AsyncStateExecuteRequest) GetStateInput() EncodedObject {
	if o == nil || IsNil(o.StateInput) {
		var ret EncodedObject
		return ret
	}
	return *o.StateInput
}

// GetStateInputOk returns a tuple with the StateInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncStateExecuteRequest) GetStateInputOk() (*EncodedObject, bool) {
	if o == nil || IsNil(o.StateInput) {
		return nil, false
	}
	return o.StateInput, true
}

// HasStateInput returns a boolean if a field has been set.
func (o *AsyncStateExecuteRequest) HasStateInput() bool {
	if o != nil && !IsNil(o.StateInput) {
		return true
	}

	return false
}

// SetStateInput gets a reference to the given EncodedObject and assigns it to the StateInput field.
func (o *AsyncStateExecuteRequest) SetStateInput(v EncodedObject) {
	o.StateInput = &v
}

// GetCommandResults returns the CommandResults field value if set, zero value otherwise.
func (o *AsyncStateExecuteRequest) GetCommandResults() CommandResults {
	if o == nil || IsNil(o.CommandResults) {
		var ret CommandResults
		return ret
	}
	return *o.CommandResults
}

// GetCommandResultsOk returns a tuple with the CommandResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncStateExecuteRequest) GetCommandResultsOk() (*CommandResults, bool) {
	if o == nil || IsNil(o.CommandResults) {
		return nil, false
	}
	return o.CommandResults, true
}

// HasCommandResults returns a boolean if a field has been set.
func (o *AsyncStateExecuteRequest) HasCommandResults() bool {
	if o != nil && !IsNil(o.CommandResults) {
		return true
	}

	return false
}

// SetCommandResults gets a reference to the given CommandResults and assigns it to the CommandResults field.
func (o *AsyncStateExecuteRequest) SetCommandResults(v CommandResults) {
	o.CommandResults = &v
}

// GetReadAppDatabaseResponseWithDBError returns the ReadAppDatabaseResponseWithDBError field value if set, zero value otherwise.
func (o *AsyncStateExecuteRequest) GetReadAppDatabaseResponseWithDBError() AppDatabaseReadResponseWithDBError {
	if o == nil || IsNil(o.ReadAppDatabaseResponseWithDBError) {
		var ret AppDatabaseReadResponseWithDBError
		return ret
	}
	return *o.ReadAppDatabaseResponseWithDBError
}

// GetReadAppDatabaseResponseWithDBErrorOk returns a tuple with the ReadAppDatabaseResponseWithDBError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncStateExecuteRequest) GetReadAppDatabaseResponseWithDBErrorOk() (*AppDatabaseReadResponseWithDBError, bool) {
	if o == nil || IsNil(o.ReadAppDatabaseResponseWithDBError) {
		return nil, false
	}
	return o.ReadAppDatabaseResponseWithDBError, true
}

// HasReadAppDatabaseResponseWithDBError returns a boolean if a field has been set.
func (o *AsyncStateExecuteRequest) HasReadAppDatabaseResponseWithDBError() bool {
	if o != nil && !IsNil(o.ReadAppDatabaseResponseWithDBError) {
		return true
	}

	return false
}

// SetReadAppDatabaseResponseWithDBError gets a reference to the given AppDatabaseReadResponseWithDBError and assigns it to the ReadAppDatabaseResponseWithDBError field.
func (o *AsyncStateExecuteRequest) SetReadAppDatabaseResponseWithDBError(v AppDatabaseReadResponseWithDBError) {
	o.ReadAppDatabaseResponseWithDBError = &v
}

// GetLoadedLocalAttributes returns the LoadedLocalAttributes field value if set, zero value otherwise.
func (o *AsyncStateExecuteRequest) GetLoadedLocalAttributes() LoadLocalAttributesResponse {
	if o == nil || IsNil(o.LoadedLocalAttributes) {
		var ret LoadLocalAttributesResponse
		return ret
	}
	return *o.LoadedLocalAttributes
}

// GetLoadedLocalAttributesOk returns a tuple with the LoadedLocalAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncStateExecuteRequest) GetLoadedLocalAttributesOk() (*LoadLocalAttributesResponse, bool) {
	if o == nil || IsNil(o.LoadedLocalAttributes) {
		return nil, false
	}
	return o.LoadedLocalAttributes, true
}

// HasLoadedLocalAttributes returns a boolean if a field has been set.
func (o *AsyncStateExecuteRequest) HasLoadedLocalAttributes() bool {
	if o != nil && !IsNil(o.LoadedLocalAttributes) {
		return true
	}

	return false
}

// SetLoadedLocalAttributes gets a reference to the given LoadLocalAttributesResponse and assigns it to the LoadedLocalAttributes field.
func (o *AsyncStateExecuteRequest) SetLoadedLocalAttributes(v LoadLocalAttributesResponse) {
	o.LoadedLocalAttributes = &v
}

func (o AsyncStateExecuteRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsyncStateExecuteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["context"] = o.Context
	toSerialize["processType"] = o.ProcessType
	toSerialize["stateId"] = o.StateId
	if !IsNil(o.StateInput) {
		toSerialize["stateInput"] = o.StateInput
	}
	if !IsNil(o.CommandResults) {
		toSerialize["commandResults"] = o.CommandResults
	}
	if !IsNil(o.ReadAppDatabaseResponseWithDBError) {
		toSerialize["readAppDatabaseResponseWithDBError"] = o.ReadAppDatabaseResponseWithDBError
	}
	if !IsNil(o.LoadedLocalAttributes) {
		toSerialize["loadedLocalAttributes"] = o.LoadedLocalAttributes
	}
	return toSerialize, nil
}

func (o *AsyncStateExecuteRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"context",
		"processType",
		"stateId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAsyncStateExecuteRequest := _AsyncStateExecuteRequest{}

	err = json.Unmarshal(bytes, &varAsyncStateExecuteRequest)

	if err != nil {
		return err
	}

	*o = AsyncStateExecuteRequest(varAsyncStateExecuteRequest)

	return err
}

type NullableAsyncStateExecuteRequest struct {
	value *AsyncStateExecuteRequest
	isSet bool
}

func (v NullableAsyncStateExecuteRequest) Get() *AsyncStateExecuteRequest {
	return v.value
}

func (v *NullableAsyncStateExecuteRequest) Set(val *AsyncStateExecuteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncStateExecuteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncStateExecuteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncStateExecuteRequest(val *AsyncStateExecuteRequest) *NullableAsyncStateExecuteRequest {
	return &NullableAsyncStateExecuteRequest{value: val, isSet: true}
}

func (v NullableAsyncStateExecuteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncStateExecuteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
