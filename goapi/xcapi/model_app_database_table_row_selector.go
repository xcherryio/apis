/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AppDatabaseTableRowSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDatabaseTableRowSelector{}

// AppDatabaseTableRowSelector struct for AppDatabaseTableRowSelector
type AppDatabaseTableRowSelector struct {
	PrimaryKey   []AppDatabaseColumnValue `json:"primaryKey"`
	InitialWrite []AppDatabaseColumnValue `json:"initialWrite,omitempty"`
	ConflictMode *WriteConflictMode       `json:"conflictMode,omitempty"`
}

type _AppDatabaseTableRowSelector AppDatabaseTableRowSelector

// NewAppDatabaseTableRowSelector instantiates a new AppDatabaseTableRowSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDatabaseTableRowSelector(primaryKey []AppDatabaseColumnValue) *AppDatabaseTableRowSelector {
	this := AppDatabaseTableRowSelector{}
	this.PrimaryKey = primaryKey
	return &this
}

// NewAppDatabaseTableRowSelectorWithDefaults instantiates a new AppDatabaseTableRowSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDatabaseTableRowSelectorWithDefaults() *AppDatabaseTableRowSelector {
	this := AppDatabaseTableRowSelector{}
	return &this
}

// GetPrimaryKey returns the PrimaryKey field value
func (o *AppDatabaseTableRowSelector) GetPrimaryKey() []AppDatabaseColumnValue {
	if o == nil {
		var ret []AppDatabaseColumnValue
		return ret
	}

	return o.PrimaryKey
}

// GetPrimaryKeyOk returns a tuple with the PrimaryKey field value
// and a boolean to check if the value has been set.
func (o *AppDatabaseTableRowSelector) GetPrimaryKeyOk() ([]AppDatabaseColumnValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryKey, true
}

// SetPrimaryKey sets field value
func (o *AppDatabaseTableRowSelector) SetPrimaryKey(v []AppDatabaseColumnValue) {
	o.PrimaryKey = v
}

// GetInitialWrite returns the InitialWrite field value if set, zero value otherwise.
func (o *AppDatabaseTableRowSelector) GetInitialWrite() []AppDatabaseColumnValue {
	if o == nil || IsNil(o.InitialWrite) {
		var ret []AppDatabaseColumnValue
		return ret
	}
	return o.InitialWrite
}

// GetInitialWriteOk returns a tuple with the InitialWrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDatabaseTableRowSelector) GetInitialWriteOk() ([]AppDatabaseColumnValue, bool) {
	if o == nil || IsNil(o.InitialWrite) {
		return nil, false
	}
	return o.InitialWrite, true
}

// HasInitialWrite returns a boolean if a field has been set.
func (o *AppDatabaseTableRowSelector) HasInitialWrite() bool {
	if o != nil && !IsNil(o.InitialWrite) {
		return true
	}

	return false
}

// SetInitialWrite gets a reference to the given []AppDatabaseColumnValue and assigns it to the InitialWrite field.
func (o *AppDatabaseTableRowSelector) SetInitialWrite(v []AppDatabaseColumnValue) {
	o.InitialWrite = v
}

// GetConflictMode returns the ConflictMode field value if set, zero value otherwise.
func (o *AppDatabaseTableRowSelector) GetConflictMode() WriteConflictMode {
	if o == nil || IsNil(o.ConflictMode) {
		var ret WriteConflictMode
		return ret
	}
	return *o.ConflictMode
}

// GetConflictModeOk returns a tuple with the ConflictMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDatabaseTableRowSelector) GetConflictModeOk() (*WriteConflictMode, bool) {
	if o == nil || IsNil(o.ConflictMode) {
		return nil, false
	}
	return o.ConflictMode, true
}

// HasConflictMode returns a boolean if a field has been set.
func (o *AppDatabaseTableRowSelector) HasConflictMode() bool {
	if o != nil && !IsNil(o.ConflictMode) {
		return true
	}

	return false
}

// SetConflictMode gets a reference to the given WriteConflictMode and assigns it to the ConflictMode field.
func (o *AppDatabaseTableRowSelector) SetConflictMode(v WriteConflictMode) {
	o.ConflictMode = &v
}

func (o AppDatabaseTableRowSelector) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDatabaseTableRowSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["primaryKey"] = o.PrimaryKey
	if !IsNil(o.InitialWrite) {
		toSerialize["initialWrite"] = o.InitialWrite
	}
	if !IsNil(o.ConflictMode) {
		toSerialize["conflictMode"] = o.ConflictMode
	}
	return toSerialize, nil
}

func (o *AppDatabaseTableRowSelector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"primaryKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppDatabaseTableRowSelector := _AppDatabaseTableRowSelector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAppDatabaseTableRowSelector)

	if err != nil {
		return err
	}

	*o = AppDatabaseTableRowSelector(varAppDatabaseTableRowSelector)

	return err
}

type NullableAppDatabaseTableRowSelector struct {
	value *AppDatabaseTableRowSelector
	isSet bool
}

func (v NullableAppDatabaseTableRowSelector) Get() *AppDatabaseTableRowSelector {
	return v.value
}

func (v *NullableAppDatabaseTableRowSelector) Set(val *AppDatabaseTableRowSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDatabaseTableRowSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDatabaseTableRowSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDatabaseTableRowSelector(val *AppDatabaseTableRowSelector) *NullableAppDatabaseTableRowSelector {
	return &NullableAppDatabaseTableRowSelector{value: val, isSet: true}
}

func (v NullableAppDatabaseTableRowSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDatabaseTableRowSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
