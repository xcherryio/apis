/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// LockType the model 'LockType'
type LockType string

// List of LockType
const (
	NO_LOCKING     LockType = "NO_LOCKING"
	SHARE_LOCK     LockType = "SHARE_LOCK"
	EXCLUSIVE_LOCK LockType = "EXCLUSIVE_LOCK"
)

// All allowed values of LockType enum
var AllowedLockTypeEnumValues = []LockType{
	"NO_LOCKING",
	"SHARE_LOCK",
	"EXCLUSIVE_LOCK",
}

func (v *LockType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LockType(value)
	for _, existing := range AllowedLockTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LockType", value)
}

// NewLockTypeFromValue returns a pointer to a valid LockType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLockTypeFromValue(v string) (*LockType, error) {
	ev := LockType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LockType: valid values are %v", v, AllowedLockTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LockType) IsValid() bool {
	for _, existing := range AllowedLockTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LockType value
func (v LockType) Ptr() *LockType {
	return &v
}

type NullableLockType struct {
	value *LockType
	isSet bool
}

func (v NullableLockType) Get() *LockType {
	return v.value
}

func (v *NullableLockType) Set(val *LockType) {
	v.value = val
	v.isSet = true
}

func (v NullableLockType) IsSet() bool {
	return v.isSet
}

func (v *NullableLockType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockType(val *LockType) *NullableLockType {
	return &NullableLockType{value: val, isSet: true}
}

func (v NullableLockType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
