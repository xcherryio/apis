/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// LockingType the model 'LockingType'
type LockingType string

// List of LockingType
const (
	NO_LOCKING     LockingType = "NO_LOCKING"
	SHARE_LOCK     LockingType = "SHARE_LOCK"
	EXCLUSIVE_LOCK LockingType = "EXCLUSIVE_LOCK"
)

// All allowed values of LockingType enum
var AllowedLockingTypeEnumValues = []LockingType{
	"NO_LOCKING",
	"SHARE_LOCK",
	"EXCLUSIVE_LOCK",
}

func (v *LockingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LockingType(value)
	for _, existing := range AllowedLockingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LockingType", value)
}

// NewLockingTypeFromValue returns a pointer to a valid LockingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLockingTypeFromValue(v string) (*LockingType, error) {
	ev := LockingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LockingType: valid values are %v", v, AllowedLockingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LockingType) IsValid() bool {
	for _, existing := range AllowedLockingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LockingType value
func (v LockingType) Ptr() *LockingType {
	return &v
}

type NullableLockingType struct {
	value *LockingType
	isSet bool
}

func (v NullableLockingType) Get() *LockingType {
	return v.value
}

func (v *NullableLockingType) Set(val *LockingType) {
	v.value = val
	v.isSet = true
}

func (v NullableLockingType) IsSet() bool {
	return v.isSet
}

func (v *NullableLockingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLockingType(val *LockingType) *NullableLockingType {
	return &NullableLockingType{value: val, isSet: true}
}

func (v NullableLockingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLockingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
