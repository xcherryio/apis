/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the TableColumnDef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableColumnDef{}

// TableColumnDef the definition(key) for getting value of a global attribute table
type TableColumnDef struct {
	// the column name that can be used in the database query, see below for example
	DbColumn string `json:"dbColumn"`
}

type _TableColumnDef TableColumnDef

// NewTableColumnDef instantiates a new TableColumnDef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableColumnDef(dbColumn string) *TableColumnDef {
	this := TableColumnDef{}
	this.DbColumn = dbColumn
	return &this
}

// NewTableColumnDefWithDefaults instantiates a new TableColumnDef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableColumnDefWithDefaults() *TableColumnDef {
	this := TableColumnDef{}
	return &this
}

// GetDbColumn returns the DbColumn field value
func (o *TableColumnDef) GetDbColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DbColumn
}

// GetDbColumnOk returns a tuple with the DbColumn field value
// and a boolean to check if the value has been set.
func (o *TableColumnDef) GetDbColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DbColumn, true
}

// SetDbColumn sets field value
func (o *TableColumnDef) SetDbColumn(v string) {
	o.DbColumn = v
}

func (o TableColumnDef) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableColumnDef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dbColumn"] = o.DbColumn
	return toSerialize, nil
}

func (o *TableColumnDef) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dbColumn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTableColumnDef := _TableColumnDef{}

	err = json.Unmarshal(bytes, &varTableColumnDef)

	if err != nil {
		return err
	}

	*o = TableColumnDef(varTableColumnDef)

	return err
}

type NullableTableColumnDef struct {
	value *TableColumnDef
	isSet bool
}

func (v NullableTableColumnDef) Get() *TableColumnDef {
	return v.value
}

func (v *NullableTableColumnDef) Set(val *TableColumnDef) {
	v.value = val
	v.isSet = true
}

func (v NullableTableColumnDef) IsSet() bool {
	return v.isSet
}

func (v *NullableTableColumnDef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableColumnDef(val *TableColumnDef) *NullableTableColumnDef {
	return &NullableTableColumnDef{value: val, isSet: true}
}

func (v NullableTableColumnDef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableColumnDef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
