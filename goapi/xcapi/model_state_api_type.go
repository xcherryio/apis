/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// StateApiType the model 'StateApiType'
type StateApiType string

// List of StateApiType
const (
	WAIT_UNTIL_API StateApiType = "WAIT_UNTIL_API"
	EXECUTE_API    StateApiType = "EXECUTE_API"
)

// All allowed values of StateApiType enum
var AllowedStateApiTypeEnumValues = []StateApiType{
	"WAIT_UNTIL_API",
	"EXECUTE_API",
}

func (v *StateApiType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StateApiType(value)
	for _, existing := range AllowedStateApiTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StateApiType", value)
}

// NewStateApiTypeFromValue returns a pointer to a valid StateApiType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStateApiTypeFromValue(v string) (*StateApiType, error) {
	ev := StateApiType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StateApiType: valid values are %v", v, AllowedStateApiTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StateApiType) IsValid() bool {
	for _, existing := range AllowedStateApiTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateApiType value
func (v StateApiType) Ptr() *StateApiType {
	return &v
}

type NullableStateApiType struct {
	value *StateApiType
	isSet bool
}

func (v NullableStateApiType) Get() *StateApiType {
	return v.value
}

func (v *NullableStateApiType) Set(val *StateApiType) {
	v.value = val
	v.isSet = true
}

func (v NullableStateApiType) IsSet() bool {
	return v.isSet
}

func (v *NullableStateApiType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateApiType(val *StateApiType) *NullableStateApiType {
	return &NullableStateApiType{value: val, isSet: true}
}

func (v NullableStateApiType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateApiType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
