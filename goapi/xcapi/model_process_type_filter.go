/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ProcessTypeFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessTypeFilter{}

// ProcessTypeFilter struct for ProcessTypeFilter
type ProcessTypeFilter struct {
	ProcessType string `json:"processType"`
}

type _ProcessTypeFilter ProcessTypeFilter

// NewProcessTypeFilter instantiates a new ProcessTypeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessTypeFilter(processType string) *ProcessTypeFilter {
	this := ProcessTypeFilter{}
	this.ProcessType = processType
	return &this
}

// NewProcessTypeFilterWithDefaults instantiates a new ProcessTypeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessTypeFilterWithDefaults() *ProcessTypeFilter {
	this := ProcessTypeFilter{}
	return &this
}

// GetProcessType returns the ProcessType field value
func (o *ProcessTypeFilter) GetProcessType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessType
}

// GetProcessTypeOk returns a tuple with the ProcessType field value
// and a boolean to check if the value has been set.
func (o *ProcessTypeFilter) GetProcessTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessType, true
}

// SetProcessType sets field value
func (o *ProcessTypeFilter) SetProcessType(v string) {
	o.ProcessType = v
}

func (o ProcessTypeFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessTypeFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["processType"] = o.ProcessType
	return toSerialize, nil
}

func (o *ProcessTypeFilter) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"processType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProcessTypeFilter := _ProcessTypeFilter{}

	err = json.Unmarshal(bytes, &varProcessTypeFilter)

	if err != nil {
		return err
	}

	*o = ProcessTypeFilter(varProcessTypeFilter)

	return err
}

type NullableProcessTypeFilter struct {
	value *ProcessTypeFilter
	isSet bool
}

func (v NullableProcessTypeFilter) Get() *ProcessTypeFilter {
	return v.value
}

func (v *NullableProcessTypeFilter) Set(val *ProcessTypeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessTypeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessTypeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessTypeFilter(val *ProcessTypeFilter) *NullableProcessTypeFilter {
	return &NullableProcessTypeFilter{value: val, isSet: true}
}

func (v NullableProcessTypeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessTypeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
