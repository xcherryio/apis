/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AppDatabaseColumnValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDatabaseColumnValue{}

// AppDatabaseColumnValue the value of a table column (from SDK to server or from server to SDK)
type AppDatabaseColumnValue struct {
	// the column name that can be used in the database query, see below for example
	Column string `json:"column"`
	// the plain string value that can be used in the database query(e.g. for SQL SELECT ... WHERE $Column=$dbQueryValue or UPDATE/INSERT)
	QueryValue string `json:"queryValue"`
}

type _AppDatabaseColumnValue AppDatabaseColumnValue

// NewAppDatabaseColumnValue instantiates a new AppDatabaseColumnValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDatabaseColumnValue(column string, queryValue string) *AppDatabaseColumnValue {
	this := AppDatabaseColumnValue{}
	this.Column = column
	this.QueryValue = queryValue
	return &this
}

// NewAppDatabaseColumnValueWithDefaults instantiates a new AppDatabaseColumnValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDatabaseColumnValueWithDefaults() *AppDatabaseColumnValue {
	this := AppDatabaseColumnValue{}
	return &this
}

// GetColumn returns the Column field value
func (o *AppDatabaseColumnValue) GetColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Column
}

// GetColumnOk returns a tuple with the Column field value
// and a boolean to check if the value has been set.
func (o *AppDatabaseColumnValue) GetColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Column, true
}

// SetColumn sets field value
func (o *AppDatabaseColumnValue) SetColumn(v string) {
	o.Column = v
}

// GetQueryValue returns the QueryValue field value
func (o *AppDatabaseColumnValue) GetQueryValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryValue
}

// GetQueryValueOk returns a tuple with the QueryValue field value
// and a boolean to check if the value has been set.
func (o *AppDatabaseColumnValue) GetQueryValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryValue, true
}

// SetQueryValue sets field value
func (o *AppDatabaseColumnValue) SetQueryValue(v string) {
	o.QueryValue = v
}

func (o AppDatabaseColumnValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDatabaseColumnValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["column"] = o.Column
	toSerialize["queryValue"] = o.QueryValue
	return toSerialize, nil
}

func (o *AppDatabaseColumnValue) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"column",
		"queryValue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppDatabaseColumnValue := _AppDatabaseColumnValue{}

	err = json.Unmarshal(bytes, &varAppDatabaseColumnValue)

	if err != nil {
		return err
	}

	*o = AppDatabaseColumnValue(varAppDatabaseColumnValue)

	return err
}

type NullableAppDatabaseColumnValue struct {
	value *AppDatabaseColumnValue
	isSet bool
}

func (v NullableAppDatabaseColumnValue) Get() *AppDatabaseColumnValue {
	return v.value
}

func (v *NullableAppDatabaseColumnValue) Set(val *AppDatabaseColumnValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDatabaseColumnValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDatabaseColumnValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDatabaseColumnValue(val *AppDatabaseColumnValue) *NullableAppDatabaseColumnValue {
	return &NullableAppDatabaseColumnValue{value: val, isSet: true}
}

func (v NullableAppDatabaseColumnValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDatabaseColumnValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
