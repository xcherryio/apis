/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// WriteConflictMode the model 'WriteConflictMode'
type WriteConflictMode string

// List of WriteConflictMode
const (
	RETURN_ERROR_ON_CONFLICT WriteConflictMode = "RETURN_ERROR_ON_CONFLICT"
	IGNORE_CONFLICT          WriteConflictMode = "IGNORE_CONFLICT"
	OVERRIDE_ON_CONFLICT     WriteConflictMode = "OVERRIDE_ON_CONFLICT"
)

// All allowed values of WriteConflictMode enum
var AllowedWriteConflictModeEnumValues = []WriteConflictMode{
	"RETURN_ERROR_ON_CONFLICT",
	"IGNORE_CONFLICT",
	"OVERRIDE_ON_CONFLICT",
}

func (v *WriteConflictMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WriteConflictMode(value)
	for _, existing := range AllowedWriteConflictModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WriteConflictMode", value)
}

// NewWriteConflictModeFromValue returns a pointer to a valid WriteConflictMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWriteConflictModeFromValue(v string) (*WriteConflictMode, error) {
	ev := WriteConflictMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WriteConflictMode: valid values are %v", v, AllowedWriteConflictModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WriteConflictMode) IsValid() bool {
	for _, existing := range AllowedWriteConflictModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WriteConflictMode value
func (v WriteConflictMode) Ptr() *WriteConflictMode {
	return &v
}

type NullableWriteConflictMode struct {
	value *WriteConflictMode
	isSet bool
}

func (v NullableWriteConflictMode) Get() *WriteConflictMode {
	return v.value
}

func (v *NullableWriteConflictMode) Set(val *WriteConflictMode) {
	v.value = val
	v.isSet = true
}

func (v NullableWriteConflictMode) IsSet() bool {
	return v.isSet
}

func (v *NullableWriteConflictMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWriteConflictMode(val *WriteConflictMode) *NullableWriteConflictMode {
	return &NullableWriteConflictMode{value: val, isSet: true}
}

func (v NullableWriteConflictMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWriteConflictMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
