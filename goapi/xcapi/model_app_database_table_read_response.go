/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
)

// checks if the AppDatabaseTableReadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDatabaseTableReadResponse{}

// AppDatabaseTableReadResponse struct for AppDatabaseTableReadResponse
type AppDatabaseTableReadResponse struct {
	TableName *string                      `json:"tableName,omitempty"`
	Rows      []AppDatabaseRowReadResponse `json:"rows,omitempty"`
}

// NewAppDatabaseTableReadResponse instantiates a new AppDatabaseTableReadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDatabaseTableReadResponse() *AppDatabaseTableReadResponse {
	this := AppDatabaseTableReadResponse{}
	return &this
}

// NewAppDatabaseTableReadResponseWithDefaults instantiates a new AppDatabaseTableReadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDatabaseTableReadResponseWithDefaults() *AppDatabaseTableReadResponse {
	this := AppDatabaseTableReadResponse{}
	return &this
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *AppDatabaseTableReadResponse) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDatabaseTableReadResponse) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *AppDatabaseTableReadResponse) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *AppDatabaseTableReadResponse) SetTableName(v string) {
	o.TableName = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *AppDatabaseTableReadResponse) GetRows() []AppDatabaseRowReadResponse {
	if o == nil || IsNil(o.Rows) {
		var ret []AppDatabaseRowReadResponse
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDatabaseTableReadResponse) GetRowsOk() ([]AppDatabaseRowReadResponse, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *AppDatabaseTableReadResponse) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []AppDatabaseRowReadResponse and assigns it to the Rows field.
func (o *AppDatabaseTableReadResponse) SetRows(v []AppDatabaseRowReadResponse) {
	o.Rows = v
}

func (o AppDatabaseTableReadResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDatabaseTableReadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TableName) {
		toSerialize["tableName"] = o.TableName
	}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	return toSerialize, nil
}

type NullableAppDatabaseTableReadResponse struct {
	value *AppDatabaseTableReadResponse
	isSet bool
}

func (v NullableAppDatabaseTableReadResponse) Get() *AppDatabaseTableReadResponse {
	return v.value
}

func (v *NullableAppDatabaseTableReadResponse) Set(val *AppDatabaseTableReadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDatabaseTableReadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDatabaseTableReadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDatabaseTableReadResponse(val *AppDatabaseTableReadResponse) *NullableAppDatabaseTableReadResponse {
	return &NullableAppDatabaseTableReadResponse{value: val, isSet: true}
}

func (v NullableAppDatabaseTableReadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDatabaseTableReadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
