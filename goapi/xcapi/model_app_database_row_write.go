/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AppDatabaseRowWrite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDatabaseRowWrite{}

// AppDatabaseRowWrite struct for AppDatabaseRowWrite
type AppDatabaseRowWrite struct {
	// the PK to locate the rows for write
	PrimaryKey   []AppDatabaseColumnValue `json:"primaryKey"`
	WriteColumns []AppDatabaseColumnValue `json:"writeColumns"`
}

type _AppDatabaseRowWrite AppDatabaseRowWrite

// NewAppDatabaseRowWrite instantiates a new AppDatabaseRowWrite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDatabaseRowWrite(primaryKey []AppDatabaseColumnValue, writeColumns []AppDatabaseColumnValue) *AppDatabaseRowWrite {
	this := AppDatabaseRowWrite{}
	this.PrimaryKey = primaryKey
	this.WriteColumns = writeColumns
	return &this
}

// NewAppDatabaseRowWriteWithDefaults instantiates a new AppDatabaseRowWrite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDatabaseRowWriteWithDefaults() *AppDatabaseRowWrite {
	this := AppDatabaseRowWrite{}
	return &this
}

// GetPrimaryKey returns the PrimaryKey field value
func (o *AppDatabaseRowWrite) GetPrimaryKey() []AppDatabaseColumnValue {
	if o == nil {
		var ret []AppDatabaseColumnValue
		return ret
	}

	return o.PrimaryKey
}

// GetPrimaryKeyOk returns a tuple with the PrimaryKey field value
// and a boolean to check if the value has been set.
func (o *AppDatabaseRowWrite) GetPrimaryKeyOk() ([]AppDatabaseColumnValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryKey, true
}

// SetPrimaryKey sets field value
func (o *AppDatabaseRowWrite) SetPrimaryKey(v []AppDatabaseColumnValue) {
	o.PrimaryKey = v
}

// GetWriteColumns returns the WriteColumns field value
func (o *AppDatabaseRowWrite) GetWriteColumns() []AppDatabaseColumnValue {
	if o == nil {
		var ret []AppDatabaseColumnValue
		return ret
	}

	return o.WriteColumns
}

// GetWriteColumnsOk returns a tuple with the WriteColumns field value
// and a boolean to check if the value has been set.
func (o *AppDatabaseRowWrite) GetWriteColumnsOk() ([]AppDatabaseColumnValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.WriteColumns, true
}

// SetWriteColumns sets field value
func (o *AppDatabaseRowWrite) SetWriteColumns(v []AppDatabaseColumnValue) {
	o.WriteColumns = v
}

func (o AppDatabaseRowWrite) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDatabaseRowWrite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["primaryKey"] = o.PrimaryKey
	toSerialize["writeColumns"] = o.WriteColumns
	return toSerialize, nil
}

func (o *AppDatabaseRowWrite) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"primaryKey",
		"writeColumns",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppDatabaseRowWrite := _AppDatabaseRowWrite{}

	err = json.Unmarshal(bytes, &varAppDatabaseRowWrite)

	if err != nil {
		return err
	}

	*o = AppDatabaseRowWrite(varAppDatabaseRowWrite)

	return err
}

type NullableAppDatabaseRowWrite struct {
	value *AppDatabaseRowWrite
	isSet bool
}

func (v NullableAppDatabaseRowWrite) Get() *AppDatabaseRowWrite {
	return v.value
}

func (v *NullableAppDatabaseRowWrite) Set(val *AppDatabaseRowWrite) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDatabaseRowWrite) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDatabaseRowWrite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDatabaseRowWrite(val *AppDatabaseRowWrite) *NullableAppDatabaseRowWrite {
	return &NullableAppDatabaseRowWrite{value: val, isSet: true}
}

func (v NullableAppDatabaseRowWrite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDatabaseRowWrite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
