/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
)

// checks if the AppDatabaseReadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDatabaseReadResponse{}

// AppDatabaseReadResponse the response for read the app database
type AppDatabaseReadResponse struct {
	Tables []AppDatabaseTableReadResponse `json:"tables,omitempty"`
}

// NewAppDatabaseReadResponse instantiates a new AppDatabaseReadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDatabaseReadResponse() *AppDatabaseReadResponse {
	this := AppDatabaseReadResponse{}
	return &this
}

// NewAppDatabaseReadResponseWithDefaults instantiates a new AppDatabaseReadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDatabaseReadResponseWithDefaults() *AppDatabaseReadResponse {
	this := AppDatabaseReadResponse{}
	return &this
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *AppDatabaseReadResponse) GetTables() []AppDatabaseTableReadResponse {
	if o == nil || IsNil(o.Tables) {
		var ret []AppDatabaseTableReadResponse
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDatabaseReadResponse) GetTablesOk() ([]AppDatabaseTableReadResponse, bool) {
	if o == nil || IsNil(o.Tables) {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *AppDatabaseReadResponse) HasTables() bool {
	if o != nil && !IsNil(o.Tables) {
		return true
	}

	return false
}

// SetTables gets a reference to the given []AppDatabaseTableReadResponse and assigns it to the Tables field.
func (o *AppDatabaseReadResponse) SetTables(v []AppDatabaseTableReadResponse) {
	o.Tables = v
}

func (o AppDatabaseReadResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDatabaseReadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tables) {
		toSerialize["tables"] = o.Tables
	}
	return toSerialize, nil
}

type NullableAppDatabaseReadResponse struct {
	value *AppDatabaseReadResponse
	isSet bool
}

func (v NullableAppDatabaseReadResponse) Get() *AppDatabaseReadResponse {
	return v.value
}

func (v *NullableAppDatabaseReadResponse) Set(val *AppDatabaseReadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDatabaseReadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDatabaseReadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDatabaseReadResponse(val *AppDatabaseReadResponse) *NullableAppDatabaseReadResponse {
	return &NullableAppDatabaseReadResponse{value: val, isSet: true}
}

func (v NullableAppDatabaseReadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDatabaseReadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
