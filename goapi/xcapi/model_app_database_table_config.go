/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AppDatabaseTableConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDatabaseTableConfig{}

// AppDatabaseTableConfig struct for AppDatabaseTableConfig
type AppDatabaseTableConfig struct {
	TableName string                        `json:"tableName"`
	Rows      []AppDatabaseTableRowSelector `json:"rows"`
}

type _AppDatabaseTableConfig AppDatabaseTableConfig

// NewAppDatabaseTableConfig instantiates a new AppDatabaseTableConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDatabaseTableConfig(tableName string, rows []AppDatabaseTableRowSelector) *AppDatabaseTableConfig {
	this := AppDatabaseTableConfig{}
	this.TableName = tableName
	this.Rows = rows
	return &this
}

// NewAppDatabaseTableConfigWithDefaults instantiates a new AppDatabaseTableConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDatabaseTableConfigWithDefaults() *AppDatabaseTableConfig {
	this := AppDatabaseTableConfig{}
	return &this
}

// GetTableName returns the TableName field value
func (o *AppDatabaseTableConfig) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *AppDatabaseTableConfig) GetTableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *AppDatabaseTableConfig) SetTableName(v string) {
	o.TableName = v
}

// GetRows returns the Rows field value
func (o *AppDatabaseTableConfig) GetRows() []AppDatabaseTableRowSelector {
	if o == nil {
		var ret []AppDatabaseTableRowSelector
		return ret
	}

	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value
// and a boolean to check if the value has been set.
func (o *AppDatabaseTableConfig) GetRowsOk() ([]AppDatabaseTableRowSelector, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rows, true
}

// SetRows sets field value
func (o *AppDatabaseTableConfig) SetRows(v []AppDatabaseTableRowSelector) {
	o.Rows = v
}

func (o AppDatabaseTableConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDatabaseTableConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tableName"] = o.TableName
	toSerialize["rows"] = o.Rows
	return toSerialize, nil
}

func (o *AppDatabaseTableConfig) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tableName",
		"rows",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppDatabaseTableConfig := _AppDatabaseTableConfig{}

	err = json.Unmarshal(bytes, &varAppDatabaseTableConfig)

	if err != nil {
		return err
	}

	*o = AppDatabaseTableConfig(varAppDatabaseTableConfig)

	return err
}

type NullableAppDatabaseTableConfig struct {
	value *AppDatabaseTableConfig
	isSet bool
}

func (v NullableAppDatabaseTableConfig) Get() *AppDatabaseTableConfig {
	return v.value
}

func (v *NullableAppDatabaseTableConfig) Set(val *AppDatabaseTableConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDatabaseTableConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDatabaseTableConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDatabaseTableConfig(val *AppDatabaseTableConfig) *NullableAppDatabaseTableConfig {
	return &NullableAppDatabaseTableConfig{value: val, isSet: true}
}

func (v NullableAppDatabaseTableConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDatabaseTableConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
