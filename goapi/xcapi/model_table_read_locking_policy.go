/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// TableReadLockingPolicy the model 'TableReadLockingPolicy'
type TableReadLockingPolicy string

// List of TableReadLockingPolicy
const (
	NO_LOCKING     TableReadLockingPolicy = "NO_LOCKING"
	SHARE_LOCK     TableReadLockingPolicy = "SHARE_LOCK"
	EXCLUSIVE_LOCK TableReadLockingPolicy = "EXCLUSIVE_LOCK"
)

// All allowed values of TableReadLockingPolicy enum
var AllowedTableReadLockingPolicyEnumValues = []TableReadLockingPolicy{
	"NO_LOCKING",
	"SHARE_LOCK",
	"EXCLUSIVE_LOCK",
}

func (v *TableReadLockingPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TableReadLockingPolicy(value)
	for _, existing := range AllowedTableReadLockingPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TableReadLockingPolicy", value)
}

// NewTableReadLockingPolicyFromValue returns a pointer to a valid TableReadLockingPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTableReadLockingPolicyFromValue(v string) (*TableReadLockingPolicy, error) {
	ev := TableReadLockingPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TableReadLockingPolicy: valid values are %v", v, AllowedTableReadLockingPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TableReadLockingPolicy) IsValid() bool {
	for _, existing := range AllowedTableReadLockingPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TableReadLockingPolicy value
func (v TableReadLockingPolicy) Ptr() *TableReadLockingPolicy {
	return &v
}

type NullableTableReadLockingPolicy struct {
	value *TableReadLockingPolicy
	isSet bool
}

func (v NullableTableReadLockingPolicy) Get() *TableReadLockingPolicy {
	return v.value
}

func (v *NullableTableReadLockingPolicy) Set(val *TableReadLockingPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableTableReadLockingPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableTableReadLockingPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableReadLockingPolicy(val *TableReadLockingPolicy) *NullableTableReadLockingPolicy {
	return &NullableTableReadLockingPolicy{value: val, isSet: true}
}

func (v NullableTableReadLockingPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableReadLockingPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
