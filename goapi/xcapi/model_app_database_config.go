/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
)

// checks if the AppDatabaseConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDatabaseConfig{}

// AppDatabaseConfig the configuration of what tables and rows to read/load for state/RPCs, including an optional initial write
type AppDatabaseConfig struct {
	Tables []AppDatabaseTableConfig `json:"tables,omitempty"`
}

// NewAppDatabaseConfig instantiates a new AppDatabaseConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDatabaseConfig() *AppDatabaseConfig {
	this := AppDatabaseConfig{}
	return &this
}

// NewAppDatabaseConfigWithDefaults instantiates a new AppDatabaseConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDatabaseConfigWithDefaults() *AppDatabaseConfig {
	this := AppDatabaseConfig{}
	return &this
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *AppDatabaseConfig) GetTables() []AppDatabaseTableConfig {
	if o == nil || IsNil(o.Tables) {
		var ret []AppDatabaseTableConfig
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDatabaseConfig) GetTablesOk() ([]AppDatabaseTableConfig, bool) {
	if o == nil || IsNil(o.Tables) {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *AppDatabaseConfig) HasTables() bool {
	if o != nil && !IsNil(o.Tables) {
		return true
	}

	return false
}

// SetTables gets a reference to the given []AppDatabaseTableConfig and assigns it to the Tables field.
func (o *AppDatabaseConfig) SetTables(v []AppDatabaseTableConfig) {
	o.Tables = v
}

func (o AppDatabaseConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDatabaseConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tables) {
		toSerialize["tables"] = o.Tables
	}
	return toSerialize, nil
}

type NullableAppDatabaseConfig struct {
	value *AppDatabaseConfig
	isSet bool
}

func (v NullableAppDatabaseConfig) Get() *AppDatabaseConfig {
	return v.value
}

func (v *NullableAppDatabaseConfig) Set(val *AppDatabaseConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDatabaseConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDatabaseConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDatabaseConfig(val *AppDatabaseConfig) *NullableAppDatabaseConfig {
	return &NullableAppDatabaseConfig{value: val, isSet: true}
}

func (v NullableAppDatabaseConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDatabaseConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
