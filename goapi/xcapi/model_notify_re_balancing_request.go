/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the NotifyReBalancingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotifyReBalancingRequest{}

// NotifyReBalancingRequest struct for NotifyReBalancingRequest
type NotifyReBalancingRequest struct {
	Address string `json:"address"`
	IsJoin  bool   `json:"isJoin"`
}

type _NotifyReBalancingRequest NotifyReBalancingRequest

// NewNotifyReBalancingRequest instantiates a new NotifyReBalancingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifyReBalancingRequest(address string, isJoin bool) *NotifyReBalancingRequest {
	this := NotifyReBalancingRequest{}
	this.Address = address
	this.IsJoin = isJoin
	return &this
}

// NewNotifyReBalancingRequestWithDefaults instantiates a new NotifyReBalancingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotifyReBalancingRequestWithDefaults() *NotifyReBalancingRequest {
	this := NotifyReBalancingRequest{}
	return &this
}

// GetAddress returns the Address field value
func (o *NotifyReBalancingRequest) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *NotifyReBalancingRequest) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *NotifyReBalancingRequest) SetAddress(v string) {
	o.Address = v
}

// GetIsJoin returns the IsJoin field value
func (o *NotifyReBalancingRequest) GetIsJoin() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsJoin
}

// GetIsJoinOk returns a tuple with the IsJoin field value
// and a boolean to check if the value has been set.
func (o *NotifyReBalancingRequest) GetIsJoinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsJoin, true
}

// SetIsJoin sets field value
func (o *NotifyReBalancingRequest) SetIsJoin(v bool) {
	o.IsJoin = v
}

func (o NotifyReBalancingRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotifyReBalancingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["address"] = o.Address
	toSerialize["isJoin"] = o.IsJoin
	return toSerialize, nil
}

func (o *NotifyReBalancingRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
		"isJoin",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotifyReBalancingRequest := _NotifyReBalancingRequest{}

	err = json.Unmarshal(bytes, &varNotifyReBalancingRequest)

	if err != nil {
		return err
	}

	*o = NotifyReBalancingRequest(varNotifyReBalancingRequest)

	return err
}

type NullableNotifyReBalancingRequest struct {
	value *NotifyReBalancingRequest
	isSet bool
}

func (v NullableNotifyReBalancingRequest) Get() *NotifyReBalancingRequest {
	return v.value
}

func (v *NullableNotifyReBalancingRequest) Set(val *NotifyReBalancingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifyReBalancingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifyReBalancingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifyReBalancingRequest(val *NotifyReBalancingRequest) *NullableNotifyReBalancingRequest {
	return &NullableNotifyReBalancingRequest{value: val, isSet: true}
}

func (v NullableNotifyReBalancingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifyReBalancingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
