/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CommandRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommandRequest{}

// CommandRequest struct for CommandRequest
type CommandRequest struct {
	WaitingType        CommandWaitingType  `json:"waitingType"`
	TimerCommands      []TimerCommand      `json:"timerCommands,omitempty"`
	LocalQueueCommands []LocalQueueCommand `json:"localQueueCommands,omitempty"`
}

type _CommandRequest CommandRequest

// NewCommandRequest instantiates a new CommandRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommandRequest(waitingType CommandWaitingType) *CommandRequest {
	this := CommandRequest{}
	this.WaitingType = waitingType
	return &this
}

// NewCommandRequestWithDefaults instantiates a new CommandRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommandRequestWithDefaults() *CommandRequest {
	this := CommandRequest{}
	return &this
}

// GetWaitingType returns the WaitingType field value
func (o *CommandRequest) GetWaitingType() CommandWaitingType {
	if o == nil {
		var ret CommandWaitingType
		return ret
	}

	return o.WaitingType
}

// GetWaitingTypeOk returns a tuple with the WaitingType field value
// and a boolean to check if the value has been set.
func (o *CommandRequest) GetWaitingTypeOk() (*CommandWaitingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WaitingType, true
}

// SetWaitingType sets field value
func (o *CommandRequest) SetWaitingType(v CommandWaitingType) {
	o.WaitingType = v
}

// GetTimerCommands returns the TimerCommands field value if set, zero value otherwise.
func (o *CommandRequest) GetTimerCommands() []TimerCommand {
	if o == nil || IsNil(o.TimerCommands) {
		var ret []TimerCommand
		return ret
	}
	return o.TimerCommands
}

// GetTimerCommandsOk returns a tuple with the TimerCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandRequest) GetTimerCommandsOk() ([]TimerCommand, bool) {
	if o == nil || IsNil(o.TimerCommands) {
		return nil, false
	}
	return o.TimerCommands, true
}

// HasTimerCommands returns a boolean if a field has been set.
func (o *CommandRequest) HasTimerCommands() bool {
	if o != nil && !IsNil(o.TimerCommands) {
		return true
	}

	return false
}

// SetTimerCommands gets a reference to the given []TimerCommand and assigns it to the TimerCommands field.
func (o *CommandRequest) SetTimerCommands(v []TimerCommand) {
	o.TimerCommands = v
}

// GetLocalQueueCommands returns the LocalQueueCommands field value if set, zero value otherwise.
func (o *CommandRequest) GetLocalQueueCommands() []LocalQueueCommand {
	if o == nil || IsNil(o.LocalQueueCommands) {
		var ret []LocalQueueCommand
		return ret
	}
	return o.LocalQueueCommands
}

// GetLocalQueueCommandsOk returns a tuple with the LocalQueueCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommandRequest) GetLocalQueueCommandsOk() ([]LocalQueueCommand, bool) {
	if o == nil || IsNil(o.LocalQueueCommands) {
		return nil, false
	}
	return o.LocalQueueCommands, true
}

// HasLocalQueueCommands returns a boolean if a field has been set.
func (o *CommandRequest) HasLocalQueueCommands() bool {
	if o != nil && !IsNil(o.LocalQueueCommands) {
		return true
	}

	return false
}

// SetLocalQueueCommands gets a reference to the given []LocalQueueCommand and assigns it to the LocalQueueCommands field.
func (o *CommandRequest) SetLocalQueueCommands(v []LocalQueueCommand) {
	o.LocalQueueCommands = v
}

func (o CommandRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommandRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["waitingType"] = o.WaitingType
	if !IsNil(o.TimerCommands) {
		toSerialize["timerCommands"] = o.TimerCommands
	}
	if !IsNil(o.LocalQueueCommands) {
		toSerialize["localQueueCommands"] = o.LocalQueueCommands
	}
	return toSerialize, nil
}

func (o *CommandRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"waitingType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommandRequest := _CommandRequest{}

	err = json.Unmarshal(bytes, &varCommandRequest)

	if err != nil {
		return err
	}

	*o = CommandRequest(varCommandRequest)

	return err
}

type NullableCommandRequest struct {
	value *CommandRequest
	isSet bool
}

func (v NullableCommandRequest) Get() *CommandRequest {
	return v.value
}

func (v *NullableCommandRequest) Set(val *CommandRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCommandRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCommandRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommandRequest(val *CommandRequest) *NullableCommandRequest {
	return &NullableCommandRequest{value: val, isSet: true}
}

func (v NullableCommandRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommandRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
