/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
)

// checks if the WaitForProcessCompletionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WaitForProcessCompletionResponse{}

// WaitForProcessCompletionResponse struct for WaitForProcessCompletionResponse
type WaitForProcessCompletionResponse struct {
	Timeout      *bool          `json:"timeout,omitempty"`
	StopBySystem *bool          `json:"stopBySystem,omitempty"`
	Status       *ProcessStatus `json:"status,omitempty"`
}

// NewWaitForProcessCompletionResponse instantiates a new WaitForProcessCompletionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWaitForProcessCompletionResponse() *WaitForProcessCompletionResponse {
	this := WaitForProcessCompletionResponse{}
	return &this
}

// NewWaitForProcessCompletionResponseWithDefaults instantiates a new WaitForProcessCompletionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWaitForProcessCompletionResponseWithDefaults() *WaitForProcessCompletionResponse {
	this := WaitForProcessCompletionResponse{}
	return &this
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *WaitForProcessCompletionResponse) GetTimeout() bool {
	if o == nil || IsNil(o.Timeout) {
		var ret bool
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitForProcessCompletionResponse) GetTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *WaitForProcessCompletionResponse) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given bool and assigns it to the Timeout field.
func (o *WaitForProcessCompletionResponse) SetTimeout(v bool) {
	o.Timeout = &v
}

// GetStopBySystem returns the StopBySystem field value if set, zero value otherwise.
func (o *WaitForProcessCompletionResponse) GetStopBySystem() bool {
	if o == nil || IsNil(o.StopBySystem) {
		var ret bool
		return ret
	}
	return *o.StopBySystem
}

// GetStopBySystemOk returns a tuple with the StopBySystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitForProcessCompletionResponse) GetStopBySystemOk() (*bool, bool) {
	if o == nil || IsNil(o.StopBySystem) {
		return nil, false
	}
	return o.StopBySystem, true
}

// HasStopBySystem returns a boolean if a field has been set.
func (o *WaitForProcessCompletionResponse) HasStopBySystem() bool {
	if o != nil && !IsNil(o.StopBySystem) {
		return true
	}

	return false
}

// SetStopBySystem gets a reference to the given bool and assigns it to the StopBySystem field.
func (o *WaitForProcessCompletionResponse) SetStopBySystem(v bool) {
	o.StopBySystem = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WaitForProcessCompletionResponse) GetStatus() ProcessStatus {
	if o == nil || IsNil(o.Status) {
		var ret ProcessStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WaitForProcessCompletionResponse) GetStatusOk() (*ProcessStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WaitForProcessCompletionResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProcessStatus and assigns it to the Status field.
func (o *WaitForProcessCompletionResponse) SetStatus(v ProcessStatus) {
	o.Status = &v
}

func (o WaitForProcessCompletionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WaitForProcessCompletionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.StopBySystem) {
		toSerialize["stopBySystem"] = o.StopBySystem
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableWaitForProcessCompletionResponse struct {
	value *WaitForProcessCompletionResponse
	isSet bool
}

func (v NullableWaitForProcessCompletionResponse) Get() *WaitForProcessCompletionResponse {
	return v.value
}

func (v *NullableWaitForProcessCompletionResponse) Set(val *WaitForProcessCompletionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWaitForProcessCompletionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWaitForProcessCompletionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaitForProcessCompletionResponse(val *WaitForProcessCompletionResponse) *NullableWaitForProcessCompletionResponse {
	return &NullableWaitForProcessCompletionResponse{value: val, isSet: true}
}

func (v NullableWaitForProcessCompletionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaitForProcessCompletionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
