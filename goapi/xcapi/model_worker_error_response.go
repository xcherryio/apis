/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the WorkerErrorResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkerErrorResponse{}

// WorkerErrorResponse struct for WorkerErrorResponse
type WorkerErrorResponse struct {
	// an optional field to let application set some detailed information. Default to the error message + stacktrace of the error
	Detail *string `json:"detail,omitempty"`
	// an optional field for error handling. Default to the class/error Name
	ErrorType string `json:"errorType"`
}

type _WorkerErrorResponse WorkerErrorResponse

// NewWorkerErrorResponse instantiates a new WorkerErrorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerErrorResponse(errorType string) *WorkerErrorResponse {
	this := WorkerErrorResponse{}
	this.ErrorType = errorType
	return &this
}

// NewWorkerErrorResponseWithDefaults instantiates a new WorkerErrorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerErrorResponseWithDefaults() *WorkerErrorResponse {
	this := WorkerErrorResponse{}
	return &this
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *WorkerErrorResponse) GetDetail() string {
	if o == nil || IsNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerErrorResponse) GetDetailOk() (*string, bool) {
	if o == nil || IsNil(o.Detail) {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *WorkerErrorResponse) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *WorkerErrorResponse) SetDetail(v string) {
	o.Detail = &v
}

// GetErrorType returns the ErrorType field value
func (o *WorkerErrorResponse) GetErrorType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value
// and a boolean to check if the value has been set.
func (o *WorkerErrorResponse) GetErrorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorType, true
}

// SetErrorType sets field value
func (o *WorkerErrorResponse) SetErrorType(v string) {
	o.ErrorType = v
}

func (o WorkerErrorResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkerErrorResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	toSerialize["errorType"] = o.ErrorType
	return toSerialize, nil
}

func (o *WorkerErrorResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"errorType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkerErrorResponse := _WorkerErrorResponse{}

	err = json.Unmarshal(bytes, &varWorkerErrorResponse)

	if err != nil {
		return err
	}

	*o = WorkerErrorResponse(varWorkerErrorResponse)

	return err
}

type NullableWorkerErrorResponse struct {
	value *WorkerErrorResponse
	isSet bool
}

func (v NullableWorkerErrorResponse) Get() *WorkerErrorResponse {
	return v.value
}

func (v *NullableWorkerErrorResponse) Set(val *WorkerErrorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerErrorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerErrorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerErrorResponse(val *WorkerErrorResponse) *NullableWorkerErrorResponse {
	return &NullableWorkerErrorResponse{value: val, isSet: true}
}

func (v NullableWorkerErrorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerErrorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
