openapi: 3.0.3
info:
  description: This APIs between xCherry service and SDKs
  title: xCherry APIs
  version: 0.0.1
servers:
- url: /
paths:
  /api/v1/xcherry/service/process-execution/start:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionStartRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionStartResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: "400: Invalid request, 409: Process already started, 424: app\
            \ database write failure"
      summary: start a process execution
  /api/v1/xcherry/service/process-execution/stop:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionStopRequest'
      responses:
        "200":
          content: {}
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: "400: Invalid request, 404: Process execution not exists"
      summary: stop a process execution
  /api/v1/xcherry/service/process-execution/describe:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionDescribeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionDescribeResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: "400: Invalid request, 404: Process execution not exists"
      summary: describe a process execution
  /api/v1/xcherry/service/process-execution/publish-to-local-queue:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishToLocalQueueRequest'
      responses:
        "200":
          content: {}
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: "400: Invalid request, 404: Process execution not exists"
      summary: send message(s) to be consumed within a single process execution
  /api/v1/xcherry/service/process-execution/rpc:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionRpcRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionRpcResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: "400: Invalid request, 404: Process execution not exists, 424:\
            \ app database write failure or worker RPC execution failure, see ErrorSubType\
            \ for details"
      summary: execute a RPC method of a process execution
  /api/v1/xcherry/worker/async-state/wait-until:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateWaitUntilRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateWaitUntilResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
          description: worker execution failure
      summary: invoking AsyncState.waitUntil API
  /api/v1/xcherry/worker/async-state/execute:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateExecuteRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateExecuteResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
          description: worker execution failure
      summary: invoking AsyncState.execute API
  /api/v1/xcherry/worker/process/rpc:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRpcWorkerRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessRpcWorkerResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
          description: worker execution failure
      summary: execute a RPC method of a process execution in the worker
  /internal/api/v1/xcherry/notify-immediate-tasks:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyImmediateTasksRequest'
      responses:
        "200":
          content: {}
          description: successful operation
      summary: for api service to tell async service that there are new immediate
        tasks added to the queue
  /internal/api/v1/xcherry/notify-timer-tasks:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyTimerTasksRequest'
      responses:
        "200":
          content: {}
          description: successful operation
      summary: for api service to tell async service that there are new timer tasks
        added to the queue
components:
  schemas:
    ProcessExecutionDescribeRequest:
      example:
        processId: processId
        namespace: namespace
      properties:
        namespace:
          type: string
        processId:
          type: string
      required:
      - namespace
      - processId
      type: object
    ProcessExecutionDescribeResponse:
      example:
        workerUrl: workerUrl
        processExecutionId: processExecutionId
        processType: processType
        startTimestamp: 0
        status: null
      properties:
        processExecutionId:
          type: string
        processType:
          description: the process type for SDK to lookup the process definition class
          type: string
        workerUrl:
          description: the URL for xcherry async service to make callback to worker
          type: string
        startTimestamp:
          description: start time of the process execution
          type: integer
        status:
          $ref: '#/components/schemas/ProcessStatus'
      type: object
    ProcessStatus:
      enum:
      - RUNNING
      - COMPLETED
      - FAILED
      - TIMEOUT
      - TERMINATED
      type: string
    AsyncStateWaitUntilRequest:
      description: the input of the waitUntil API
      example:
        stateId: stateId
        context:
          recoverFromApi: null
          processStartedTimestamp: 0
          processExecutionId: processExecutionId
          processId: processId
          recoverFromStateExecutionId: recoverFromStateExecutionId
          firstAttemptTimestamp: 6
          attempt: 1
          stateExecutionId: stateExecutionId
        processType: processType
        stateInput:
          data: data
          encoding: encoding
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - context
      - processType
      - stateId
      type: object
    AsyncStateWaitUntilResponse:
      description: the output of the waitUntil API
      example:
        commandRequest:
          timerCommands:
          - delayInSeconds: 0
          - delayInSeconds: 0
          waitingType: null
          localQueueCommands:
          - queueName: queueName
            count: 6
          - queueName: queueName
            count: 6
        publishToLocalQueue:
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
      properties:
        commandRequest:
          $ref: '#/components/schemas/CommandRequest'
        publishToLocalQueue:
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
          type: array
      required:
      - commandRequest
      type: object
    CommandRequest:
      example:
        timerCommands:
        - delayInSeconds: 0
        - delayInSeconds: 0
        waitingType: null
        localQueueCommands:
        - queueName: queueName
          count: 6
        - queueName: queueName
          count: 6
      properties:
        waitingType:
          $ref: '#/components/schemas/CommandWaitingType'
        timerCommands:
          items:
            $ref: '#/components/schemas/TimerCommand'
          type: array
        localQueueCommands:
          items:
            $ref: '#/components/schemas/LocalQueueCommand'
          type: array
      required:
      - waitingType
      type: object
    TimerCommand:
      example:
        delayInSeconds: 0
      properties:
        delayInSeconds:
          format: int64
          type: integer
      required:
      - delayInSeconds
      type: object
    LocalQueueCommand:
      example:
        queueName: queueName
        count: 6
      properties:
        queueName:
          type: string
        count:
          default: 1
          description: the number of identical messages to await
          type: integer
      required:
      - queueName
      type: object
    CommandWaitingType:
      enum:
      - EmptyCommand
      - AnyOfCompletion
      - AllOfCompletion
      type: string
    AsyncStateExecuteRequest:
      description: the input of the execute API
      example:
        readAppDatabaseResponseWithDBError:
          tables:
          - rows:
            - columns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - columns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
          - rows:
            - columns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - columns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
          appDBErrorCode: appDBErrorCode
          appDBErrorTableName: appDBErrorTableName
          appDBErrorType: null
          appDBErrorMessage: appDBErrorMessage
        commandResults:
          localQueueResults:
          - queueName: queueName
            messages:
            - payload:
                data: data
                encoding: encoding
              dedupId: dedupId
            - payload:
                data: data
                encoding: encoding
              dedupId: dedupId
            status: null
          - queueName: queueName
            messages:
            - payload:
                data: data
                encoding: encoding
              dedupId: dedupId
            - payload:
                data: data
                encoding: encoding
              dedupId: dedupId
            status: null
          timerResults:
          - status: null
          - status: null
        stateId: stateId
        context:
          recoverFromApi: null
          processStartedTimestamp: 0
          processExecutionId: processExecutionId
          processId: processId
          recoverFromStateExecutionId: recoverFromStateExecutionId
          firstAttemptTimestamp: 6
          attempt: 1
          stateExecutionId: stateExecutionId
        processType: processType
        stateInput:
          data: data
          encoding: encoding
        loadedLocalAttributes:
          attributes:
          - value:
              data: data
              encoding: encoding
            key: key
          - value:
              data: data
              encoding: encoding
            key: key
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        commandResults:
          $ref: '#/components/schemas/CommandResults'
        readAppDatabaseResponseWithDBError:
          $ref: '#/components/schemas/AppDatabaseReadResponseWithDBError'
        loadedLocalAttributes:
          $ref: '#/components/schemas/LoadLocalAttributesResponse'
      required:
      - context
      - processType
      - stateId
      type: object
    CommandResults:
      example:
        localQueueResults:
        - queueName: queueName
          messages:
          - payload:
              data: data
              encoding: encoding
            dedupId: dedupId
          - payload:
              data: data
              encoding: encoding
            dedupId: dedupId
          status: null
        - queueName: queueName
          messages:
          - payload:
              data: data
              encoding: encoding
            dedupId: dedupId
          - payload:
              data: data
              encoding: encoding
            dedupId: dedupId
          status: null
        timerResults:
        - status: null
        - status: null
      properties:
        timerResults:
          items:
            $ref: '#/components/schemas/TimerResult'
          type: array
        localQueueResults:
          items:
            $ref: '#/components/schemas/LocalQueueResult'
          type: array
      type: object
    TimerResult:
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/CommandStatus'
      required:
      - status
      type: object
    LocalQueueResult:
      example:
        queueName: queueName
        messages:
        - payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        status: null
      properties:
        status:
          $ref: '#/components/schemas/CommandStatus'
        queueName:
          type: string
        messages:
          items:
            $ref: '#/components/schemas/LocalQueueMessageResult'
          type: array
      required:
      - queueName
      - status
      type: object
    CommandStatus:
      enum:
      - WAITING_COMMAND
      - COMPLETED_COMMAND
      - SKIPPED_COMMAND
      type: string
    LocalQueueMessage:
      example:
        queueName: queueName
        payload:
          data: data
          encoding: encoding
        dedupId: dedupId
      properties:
        queueName:
          type: string
        dedupId:
          description: "UUID to uniquely distinguish different messages. If not specified,\
            \ the server will generate a UUID instead."
          type: string
        payload:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - queueName
      type: object
    LocalQueueMessageResult:
      example:
        payload:
          data: data
          encoding: encoding
        dedupId: dedupId
      properties:
        dedupId:
          description: UUID to uniquely distinguish different messages.
          type: string
        payload:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - dedupId
      type: object
    AsyncStateExecuteResponse:
      description: the output of the execute API
      example:
        stateDecision:
          nextStates:
          - stateConfig:
              loadLocalAttributesRequest:
                keysToLoadNoLock:
                - keysToLoadNoLock
                - keysToLoadNoLock
                keysToLoadWithLock:
                - keysToLoadWithLock
                - keysToLoadWithLock
                lockType: null
              executeApiTimeoutSeconds: 6
              stateFailureRecoveryOptions:
                stateFailureProceedStateId: stateFailureProceedStateId
                stateFailureProceedStateConfig: null
                policy: null
              appDatabaseReadRequest:
                columns:
                - columns
                - columns
                lockType: null
                tableName: tableName
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          - stateConfig:
              loadLocalAttributesRequest:
                keysToLoadNoLock:
                - keysToLoadNoLock
                - keysToLoadNoLock
                keysToLoadWithLock:
                - keysToLoadWithLock
                - keysToLoadWithLock
                lockType: null
              executeApiTimeoutSeconds: 6
              stateFailureRecoveryOptions:
                stateFailureProceedStateId: stateFailureProceedStateId
                stateFailureProceedStateConfig: null
                policy: null
              appDatabaseReadRequest:
                columns:
                - columns
                - columns
                lockType: null
                tableName: tableName
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          threadCloseDecision:
            closeInput:
              data: data
              encoding: encoding
            closeType: null
        writeToLocalAttributes:
        - value:
            data: data
            encoding: encoding
          key: key
        - value:
            data: data
            encoding: encoding
          key: key
        writeToAppDatabase:
          tables:
          - rows:
            - writeColumns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - writeColumns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
          - rows:
            - writeColumns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - writeColumns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
        publishToLocalQueue:
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
      properties:
        stateDecision:
          $ref: '#/components/schemas/StateDecision'
        publishToLocalQueue:
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
          type: array
        writeToAppDatabase:
          $ref: '#/components/schemas/AppDatabaseWrite'
        writeToLocalAttributes:
          items:
            $ref: '#/components/schemas/KeyValue'
          type: array
      required:
      - stateDecision
      type: object
    StateDecision:
      description: "the decision at the end of state execution, either nextStates\
        \ or threadCloseDecision is needed"
      example:
        nextStates:
        - stateConfig:
            loadLocalAttributesRequest:
              keysToLoadNoLock:
              - keysToLoadNoLock
              - keysToLoadNoLock
              keysToLoadWithLock:
              - keysToLoadWithLock
              - keysToLoadWithLock
              lockType: null
            executeApiTimeoutSeconds: 6
            stateFailureRecoveryOptions:
              stateFailureProceedStateId: stateFailureProceedStateId
              stateFailureProceedStateConfig: null
              policy: null
            appDatabaseReadRequest:
              columns:
              - columns
              - columns
              lockType: null
              tableName: tableName
            skipWaitUntil: true
            waitUntilApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
            waitUntilApiTimeoutSeconds: 0
            executeApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
          stateId: stateId
          stateInput:
            data: data
            encoding: encoding
        - stateConfig:
            loadLocalAttributesRequest:
              keysToLoadNoLock:
              - keysToLoadNoLock
              - keysToLoadNoLock
              keysToLoadWithLock:
              - keysToLoadWithLock
              - keysToLoadWithLock
              lockType: null
            executeApiTimeoutSeconds: 6
            stateFailureRecoveryOptions:
              stateFailureProceedStateId: stateFailureProceedStateId
              stateFailureProceedStateConfig: null
              policy: null
            appDatabaseReadRequest:
              columns:
              - columns
              - columns
              lockType: null
              tableName: tableName
            skipWaitUntil: true
            waitUntilApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
            waitUntilApiTimeoutSeconds: 0
            executeApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
          stateId: stateId
          stateInput:
            data: data
            encoding: encoding
        threadCloseDecision:
          closeInput:
            data: data
            encoding: encoding
          closeType: null
      properties:
        nextStates:
          items:
            $ref: '#/components/schemas/StateMovement'
          type: array
        threadCloseDecision:
          $ref: '#/components/schemas/ThreadCloseDecision'
      type: object
    ThreadCloseDecision:
      example:
        closeInput:
          data: data
          encoding: encoding
        closeType: null
      properties:
        closeType:
          $ref: '#/components/schemas/ThreadCloseType'
        closeInput:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - closeType
      type: object
    ThreadCloseType:
      enum:
      - FORCE_COMPLETE_PROCESS
      - GRACEFUL_COMPLETE_PROCESS
      - DEAD_END
      - FORCE_FAIL_PROCESS
      type: string
    StateMovement:
      example:
        stateConfig:
          loadLocalAttributesRequest:
            keysToLoadNoLock:
            - keysToLoadNoLock
            - keysToLoadNoLock
            keysToLoadWithLock:
            - keysToLoadWithLock
            - keysToLoadWithLock
            lockType: null
          executeApiTimeoutSeconds: 6
          stateFailureRecoveryOptions:
            stateFailureProceedStateId: stateFailureProceedStateId
            stateFailureProceedStateConfig: null
            policy: null
          appDatabaseReadRequest:
            columns:
            - columns
            - columns
            lockType: null
            tableName: tableName
          skipWaitUntil: true
          waitUntilApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
          waitUntilApiTimeoutSeconds: 0
          executeApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
        stateId: stateId
        stateInput:
          data: data
          encoding: encoding
      properties:
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        stateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
      required:
      - stateId
      type: object
    Context:
      example:
        recoverFromApi: null
        processStartedTimestamp: 0
        processExecutionId: processExecutionId
        processId: processId
        recoverFromStateExecutionId: recoverFromStateExecutionId
        firstAttemptTimestamp: 6
        attempt: 1
        stateExecutionId: stateExecutionId
      properties:
        processId:
          type: string
        processExecutionId:
          type: string
        processStartedTimestamp:
          format: int64
          type: integer
        stateExecutionId:
          description: stateExecutionId is for async state API only
          type: string
        firstAttemptTimestamp:
          description: for async state API only(during backoff retry)
          format: int64
          type: integer
        attempt:
          description: for async state API only(during backoff retry)
          type: integer
        recoverFromStateExecutionId:
          description: "for async state API only, state id + sequence number"
          type: string
        recoverFromApi:
          $ref: '#/components/schemas/WorkerApiType'
      required:
      - processExecutionId
      - processId
      - processStartedTimestamp
      type: object
    WorkerApiType:
      enum:
      - WAIT_UNTIL_API
      - EXECUTE_API
      - RPC_API
      type: string
    WorkerErrorResponse:
      properties:
        detail:
          description: an optional field to let application set some detailed information.
            Default to the error message + stacktrace of the error
          type: string
        errorType:
          description: an optional field for error handling. Default to the class/error
            Name
          type: string
      required:
      - errorType
      type: object
    EncodedObject:
      example:
        data: data
        encoding: encoding
      properties:
        encoding:
          type: string
        data:
          type: string
      required:
      - data
      - encoding
      type: object
    ApiErrorResponse:
      properties:
        errorSubType:
          $ref: '#/components/schemas/ErrorSubType'
        appErrorType:
          description: "for WORKER_EXECUTION_ERROR, it's the value from WorkerErrorResponse.errorType;\
            \ for APP_DATABASE_READ/WRITE_ERROR, it's the error code from database\
            \ driver"
          type: string
        details:
          description: "for WORKER_EXECUTION_ERROR, it's the value from WorkerErrorResponse.details;\
            \ for APP_DATABASE_READ/WRITE_ERROR, it's the error message from database\
            \ driver; for other apiErrorType, it's the detailed message from server."
          type: string
      type: object
    ErrorSubType:
      enum:
      - UNCATEGORIZED_ERROR
      - WORKER_EXECUTION_ERROR
      - APP_DATABASE_READ_ERROR
      - APP_DATABASE_WRITE_ERROR
      - POLL_TIMEOUT_ERROR
      type: string
    ProcessExecutionStartRequest:
      description: the request for starting a process execution
      example:
        startStateConfig:
          loadLocalAttributesRequest:
            keysToLoadNoLock:
            - keysToLoadNoLock
            - keysToLoadNoLock
            keysToLoadWithLock:
            - keysToLoadWithLock
            - keysToLoadWithLock
            lockType: null
          executeApiTimeoutSeconds: 6
          stateFailureRecoveryOptions:
            stateFailureProceedStateId: stateFailureProceedStateId
            stateFailureProceedStateConfig: null
            policy: null
          appDatabaseReadRequest:
            columns:
            - columns
            - columns
            lockType: null
            tableName: tableName
          skipWaitUntil: true
          waitUntilApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
          waitUntilApiTimeoutSeconds: 0
          executeApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
        startStateInput:
          data: data
          encoding: encoding
        workerUrl: workerUrl
        startStateId: startStateId
        processId: processId
        processStartConfig:
          appDatabaseConfig:
            tables:
            - rows:
              - conflictMode: null
                initialWrite:
                - column: column
                  queryValue: queryValue
                - column: column
                  queryValue: queryValue
                primaryKey:
                - column: column
                  queryValue: queryValue
                - column: column
                  queryValue: queryValue
              - conflictMode: null
                initialWrite:
                - column: column
                  queryValue: queryValue
                - column: column
                  queryValue: queryValue
                primaryKey:
                - column: column
                  queryValue: queryValue
                - column: column
                  queryValue: queryValue
              tableName: tableName
            - rows:
              - conflictMode: null
                initialWrite:
                - column: column
                  queryValue: queryValue
                - column: column
                  queryValue: queryValue
                primaryKey:
                - column: column
                  queryValue: queryValue
                - column: column
                  queryValue: queryValue
              - conflictMode: null
                initialWrite:
                - column: column
                  queryValue: queryValue
                - column: column
                  queryValue: queryValue
                primaryKey:
                - column: column
                  queryValue: queryValue
                - column: column
                  queryValue: queryValue
              tableName: tableName
          localAttributeConfig:
            initialWrite:
            - value:
                data: data
                encoding: encoding
              key: key
            - value:
                data: data
                encoding: encoding
              key: key
          timeoutSeconds: 9
          idReusePolicy: null
        namespace: namespace
        processType: processType
      properties:
        namespace:
          type: string
        processId:
          description: "the user business identifier for the process, which can be\
            \ used for multiple ProcessExecution based on ProcessIdReusePolicy"
          type: string
        processType:
          description: the process type for SDK to lookup the process definition class
          type: string
        workerUrl:
          description: the URL for xcherry async service to make callback to worker
          type: string
        startStateId:
          description: StateId of the first AsyncState to start
          type: string
        startStateInput:
          $ref: '#/components/schemas/EncodedObject'
        startStateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
        processStartConfig:
          $ref: '#/components/schemas/ProcessStartConfig'
      required:
      - namespace
      - processId
      - processType
      - workerUrl
      type: object
    ProcessStartConfig:
      example:
        appDatabaseConfig:
          tables:
          - rows:
            - conflictMode: null
              initialWrite:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - conflictMode: null
              initialWrite:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
          - rows:
            - conflictMode: null
              initialWrite:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - conflictMode: null
              initialWrite:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
        localAttributeConfig:
          initialWrite:
          - value:
              data: data
              encoding: encoding
            key: key
          - value:
              data: data
              encoding: encoding
            key: key
        timeoutSeconds: 9
        idReusePolicy: null
      properties:
        timeoutSeconds:
          type: integer
        idReusePolicy:
          $ref: '#/components/schemas/ProcessIdReusePolicy'
        appDatabaseConfig:
          $ref: '#/components/schemas/AppDatabaseConfig'
        localAttributeConfig:
          $ref: '#/components/schemas/LocalAttributeConfig'
      type: object
    LocalAttributeConfig:
      example:
        initialWrite:
        - value:
            data: data
            encoding: encoding
          key: key
        - value:
            data: data
            encoding: encoding
          key: key
      properties:
        initialWrite:
          items:
            $ref: '#/components/schemas/KeyValue'
          type: array
      type: object
    KeyValue:
      example:
        value:
          data: data
          encoding: encoding
        key: key
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - key
      - value
      type: object
    LoadLocalAttributesRequest:
      example:
        keysToLoadNoLock:
        - keysToLoadNoLock
        - keysToLoadNoLock
        keysToLoadWithLock:
        - keysToLoadWithLock
        - keysToLoadWithLock
        lockType: null
      properties:
        keysToLoadNoLock:
          items:
            type: string
          type: array
        keysToLoadWithLock:
          items:
            type: string
          type: array
        lockType:
          $ref: '#/components/schemas/DatabaseLockingType'
      type: object
    LoadLocalAttributesResponse:
      example:
        attributes:
        - value:
            data: data
            encoding: encoding
          key: key
        - value:
            data: data
            encoding: encoding
          key: key
      properties:
        attributes:
          items:
            $ref: '#/components/schemas/KeyValue'
          type: array
      type: object
    DatabaseLockingType:
      enum:
      - NO_LOCKING
      - SHARE_LOCK
      - EXCLUSIVE_LOCK
      type: string
    ProcessIdReusePolicy:
      enum:
      - ALLOW_IF_PREVIOUS_EXIT_ABNORMALLY
      - ALLOW_IF_NO_RUNNING
      - DISALLOW_REUSE
      - TERMINATE_IF_RUNNING
      type: string
    AsyncStateConfig:
      example:
        loadLocalAttributesRequest:
          keysToLoadNoLock:
          - keysToLoadNoLock
          - keysToLoadNoLock
          keysToLoadWithLock:
          - keysToLoadWithLock
          - keysToLoadWithLock
          lockType: null
        executeApiTimeoutSeconds: 6
        stateFailureRecoveryOptions:
          stateFailureProceedStateId: stateFailureProceedStateId
          stateFailureProceedStateConfig: null
          policy: null
        appDatabaseReadRequest:
          columns:
          - columns
          - columns
          lockType: null
          tableName: tableName
        skipWaitUntil: true
        waitUntilApiRetryPolicy:
          maximumAttemptsDurationSeconds: 7
          maximumAttempts: 2
          initialIntervalSeconds: 1
          maximumIntervalSeconds: 5
          backoffCoefficient: 5.962134
        waitUntilApiTimeoutSeconds: 0
        executeApiRetryPolicy:
          maximumAttemptsDurationSeconds: 7
          maximumAttempts: 2
          initialIntervalSeconds: 1
          maximumIntervalSeconds: 5
          backoffCoefficient: 5.962134
      properties:
        skipWaitUntil:
          type: boolean
        waitUntilApiTimeoutSeconds:
          description: the timeout for the single attempt of AsyncState.waitUntil
            API
          type: integer
        executeApiTimeoutSeconds:
          description: the timeout for the single attempt of AsyncState.execute API
          type: integer
        waitUntilApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        executeApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        stateFailureRecoveryOptions:
          $ref: '#/components/schemas/StateFailureRecoveryOptions'
        appDatabaseReadRequest:
          $ref: '#/components/schemas/AppDatabaseTableReadRequest'
        loadLocalAttributesRequest:
          $ref: '#/components/schemas/LoadLocalAttributesRequest'
      type: object
    StateFailureRecoveryPolicy:
      enum:
      - FAIL_PROCESS_ON_STATE_FAILURE
      - PROCEED_TO_CONFIGURED_STATE
      type: string
    StateFailureRecoveryOptions:
      example:
        stateFailureProceedStateId: stateFailureProceedStateId
        stateFailureProceedStateConfig: null
        policy: null
      properties:
        policy:
          $ref: '#/components/schemas/StateFailureRecoveryPolicy'
        stateFailureProceedStateId:
          type: string
        stateFailureProceedStateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
      required:
      - policy
      type: object
    RetryPolicy:
      example:
        maximumAttemptsDurationSeconds: 7
        maximumAttempts: 2
        initialIntervalSeconds: 1
        maximumIntervalSeconds: 5
        backoffCoefficient: 5.962134
      properties:
        initialIntervalSeconds:
          description: "the initial interval for the first retry, default to 1 second"
          type: integer
        backoffCoefficient:
          description: "the backoff coefficient for the next retry, default to 2"
          format: float
          type: number
        maximumIntervalSeconds:
          description: "the maximum interval for the next retry, default to 100x of\
            \ initial interval"
          type: integer
        maximumAttempts:
          description: "the maximum number of attempts, default to 0, means unlimited"
          type: integer
        maximumAttemptsDurationSeconds:
          description: "the maximum duration of all attempts, default to 0, means\
            \ unlimited"
          type: integer
      type: object
    ProcessExecutionStartResponse:
      description: response of ProcessExecutionStartRequest
      example:
        processExecutionId: processExecutionId
      properties:
        processExecutionId:
          description: a UUID as the unique identifier of a process execution
          type: string
      required:
      - processExecutionId
      type: object
    NotifyImmediateTasksRequest:
      example:
        processExecutionId: processExecutionId
        processId: processId
        namespace: namespace
        shardId: 0
      properties:
        shardId:
          type: integer
        namespace:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
        processId:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
        processExecutionId:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
      required:
      - shardId
      type: object
    NotifyTimerTasksRequest:
      example:
        fireTimestamps:
        - 6
        - 6
        processExecutionId: processExecutionId
        processId: processId
        namespace: namespace
        shardId: 0
      properties:
        shardId:
          type: integer
        fireTimestamps:
          description: the fire timestamp of all timer tasks to pull
          items:
            format: int64
            type: integer
          type: array
        namespace:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
        processId:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
        processExecutionId:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
      required:
      - fireTimestamps
      - shardId
      type: object
    ProcessExecutionStopRequest:
      description: the request for stopping a process execution
      example:
        processId: processId
        namespace: namespace
        stopType: null
      properties:
        namespace:
          type: string
        processId:
          type: string
        stopType:
          $ref: '#/components/schemas/ProcessExecutionStopType'
      required:
      - namespace
      - processId
      type: object
    ProcessExecutionStopType:
      enum:
      - TERMINATE
      - FAIL
      type: string
    PublishToLocalQueueRequest:
      description: the request for sending messages to be consumed within a single
        process execution
      example:
        processId: processId
        namespace: namespace
        messages:
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
      properties:
        namespace:
          type: string
        processId:
          type: string
        messages:
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
          type: array
      required:
      - namespace
      - processId
      type: object
    ProcessExecutionRpcRequest:
      description: the request for executing a RPC method of a process execution
      example:
        input:
          data: data
          encoding: encoding
        processId: processId
        appDatabaseReadRequest:
          tableRequests:
          - columns:
            - columns
            - columns
            lockType: null
            tableName: tableName
          - columns:
            - columns
            - columns
            lockType: null
            tableName: tableName
        namespace: namespace
        timeoutSeconds: 0
        rpcName: rpcName
      properties:
        namespace:
          type: string
        processId:
          type: string
        rpcName:
          type: string
        input:
          $ref: '#/components/schemas/EncodedObject'
        timeoutSeconds:
          description: the timeout for the single attempt of the Process RPC API
          type: integer
        appDatabaseReadRequest:
          $ref: '#/components/schemas/AppDatabaseReadRequest'
      required:
      - namespace
      - processId
      - rpcName
      type: object
    ProcessExecutionRpcResponse:
      description: the response for executing a RPC method of a process execution
      example:
        output:
          data: data
          encoding: encoding
      properties:
        output:
          $ref: '#/components/schemas/EncodedObject'
      type: object
    ProcessRpcWorkerRequest:
      description: the request of the worker RPC API
      example:
        input:
          data: data
          encoding: encoding
        context:
          recoverFromApi: null
          processStartedTimestamp: 0
          processExecutionId: processExecutionId
          processId: processId
          recoverFromStateExecutionId: recoverFromStateExecutionId
          firstAttemptTimestamp: 6
          attempt: 1
          stateExecutionId: stateExecutionId
        appDatabaseReadResponse:
          tables:
          - rows:
            - columns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - columns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
          - rows:
            - columns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - columns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
        processType: processType
        rpcName: rpcName
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        rpcName:
          type: string
        input:
          $ref: '#/components/schemas/EncodedObject'
        appDatabaseReadResponse:
          $ref: '#/components/schemas/AppDatabaseReadResponse'
      required:
      - context
      - processType
      - rpcName
      type: object
    ProcessRpcWorkerResponse:
      description: the response of the worker RPC API
      example:
        output:
          data: data
          encoding: encoding
        stateDecision:
          nextStates:
          - stateConfig:
              loadLocalAttributesRequest:
                keysToLoadNoLock:
                - keysToLoadNoLock
                - keysToLoadNoLock
                keysToLoadWithLock:
                - keysToLoadWithLock
                - keysToLoadWithLock
                lockType: null
              executeApiTimeoutSeconds: 6
              stateFailureRecoveryOptions:
                stateFailureProceedStateId: stateFailureProceedStateId
                stateFailureProceedStateConfig: null
                policy: null
              appDatabaseReadRequest:
                columns:
                - columns
                - columns
                lockType: null
                tableName: tableName
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          - stateConfig:
              loadLocalAttributesRequest:
                keysToLoadNoLock:
                - keysToLoadNoLock
                - keysToLoadNoLock
                keysToLoadWithLock:
                - keysToLoadWithLock
                - keysToLoadWithLock
                lockType: null
              executeApiTimeoutSeconds: 6
              stateFailureRecoveryOptions:
                stateFailureProceedStateId: stateFailureProceedStateId
                stateFailureProceedStateConfig: null
                policy: null
              appDatabaseReadRequest:
                columns:
                - columns
                - columns
                lockType: null
                tableName: tableName
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          threadCloseDecision:
            closeInput:
              data: data
              encoding: encoding
            closeType: null
        writeToAppDatabase:
          tables:
          - rows:
            - writeColumns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - writeColumns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
          - rows:
            - writeColumns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            - writeColumns:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
              primaryKey:
              - column: column
                queryValue: queryValue
              - column: column
                queryValue: queryValue
            tableName: tableName
        publishToLocalQueue:
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
      properties:
        output:
          $ref: '#/components/schemas/EncodedObject'
        stateDecision:
          $ref: '#/components/schemas/StateDecision'
        publishToLocalQueue:
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
          type: array
        writeToAppDatabase:
          $ref: '#/components/schemas/AppDatabaseWrite'
      required:
      - stateDecision
      type: object
    AppDatabaseReadRequest:
      description: the request to read the selected rows of configured app database
        tables
      example:
        tableRequests:
        - columns:
          - columns
          - columns
          lockType: null
          tableName: tableName
        - columns:
          - columns
          - columns
          lockType: null
          tableName: tableName
      properties:
        tableRequests:
          items:
            $ref: '#/components/schemas/AppDatabaseTableReadRequest'
          type: array
      type: object
    AppDatabaseTableReadRequest:
      example:
        columns:
        - columns
        - columns
        lockType: null
        tableName: tableName
      properties:
        tableName:
          type: string
        lockType:
          $ref: '#/components/schemas/DatabaseLockingType'
        columns:
          items:
            type: string
          type: array
      type: object
    AppDatabaseReadResponse:
      description: the response for read the app database
      example:
        tables:
        - rows:
          - columns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          - columns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          tableName: tableName
        - rows:
          - columns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          - columns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          tableName: tableName
      properties:
        tables:
          items:
            $ref: '#/components/schemas/AppDatabaseTableReadResponse'
          type: array
      type: object
    AppDatabaseReadResponseWithDBError:
      description: "the response for read the app database, or the read/write error.\
        \ For the write error, it's from last attempt."
      example:
        tables:
        - rows:
          - columns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          - columns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          tableName: tableName
        - rows:
          - columns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          - columns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          tableName: tableName
        appDBErrorCode: appDBErrorCode
        appDBErrorTableName: appDBErrorTableName
        appDBErrorType: null
        appDBErrorMessage: appDBErrorMessage
      properties:
        tables:
          items:
            $ref: '#/components/schemas/AppDatabaseTableReadResponse'
          type: array
        appDBErrorType:
          $ref: '#/components/schemas/ErrorSubType'
        appDBErrorCode:
          description: the error code from database driver
          type: string
        appDBErrorMessage:
          description: the error message from database driver
          type: string
        appDBErrorTableName:
          description: 'the first table that encounters the error to help SDK to throw
            the error in a friendly way '
          type: string
      type: object
    AppDatabaseTableReadResponse:
      example:
        rows:
        - columns:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
        - columns:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
        tableName: tableName
      properties:
        tableName:
          type: string
        rows:
          items:
            $ref: '#/components/schemas/AppDatabaseRowReadResponse'
          type: array
      type: object
    AppDatabaseRowReadResponse:
      example:
        columns:
        - column: column
          queryValue: queryValue
        - column: column
          queryValue: queryValue
      properties:
        columns:
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
          type: array
      type: object
    AppDatabaseConfig:
      description: "the configuration of what tables and rows to read/load for state/RPCs,\
        \ including an optional initial write"
      example:
        tables:
        - rows:
          - conflictMode: null
            initialWrite:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
            primaryKey:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          - conflictMode: null
            initialWrite:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
            primaryKey:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          tableName: tableName
        - rows:
          - conflictMode: null
            initialWrite:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
            primaryKey:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          - conflictMode: null
            initialWrite:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
            primaryKey:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          tableName: tableName
      properties:
        tables:
          items:
            $ref: '#/components/schemas/AppDatabaseTableConfig'
          type: array
      type: object
    AppDatabaseTableConfig:
      example:
        rows:
        - conflictMode: null
          initialWrite:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
          primaryKey:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
        - conflictMode: null
          initialWrite:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
          primaryKey:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
        tableName: tableName
      properties:
        tableName:
          type: string
        rows:
          items:
            $ref: '#/components/schemas/AppDatabaseTableRowSelector'
          type: array
      required:
      - rows
      - tableName
      type: object
    AppDatabaseTableRowSelector:
      example:
        conflictMode: null
        initialWrite:
        - column: column
          queryValue: queryValue
        - column: column
          queryValue: queryValue
        primaryKey:
        - column: column
          queryValue: queryValue
        - column: column
          queryValue: queryValue
      properties:
        primaryKey:
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
          type: array
        initialWrite:
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
          type: array
        conflictMode:
          $ref: '#/components/schemas/WriteConflictMode'
      required:
      - primaryKey
      type: object
    AppDatabaseWrite:
      description: the write operation for state/RPCs to write to the app database
        values
      example:
        tables:
        - rows:
          - writeColumns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
            primaryKey:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          - writeColumns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
            primaryKey:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          tableName: tableName
        - rows:
          - writeColumns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
            primaryKey:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          - writeColumns:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
            primaryKey:
            - column: column
              queryValue: queryValue
            - column: column
              queryValue: queryValue
          tableName: tableName
      properties:
        tables:
          items:
            $ref: '#/components/schemas/AppDatabaseTableWrite'
          type: array
      type: object
    AppDatabaseTableWrite:
      example:
        rows:
        - writeColumns:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
          primaryKey:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
        - writeColumns:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
          primaryKey:
          - column: column
            queryValue: queryValue
          - column: column
            queryValue: queryValue
        tableName: tableName
      properties:
        tableName:
          type: string
        rows:
          items:
            $ref: '#/components/schemas/AppDatabaseRowWrite'
          type: array
      required:
      - tableName
      type: object
    AppDatabaseRowWrite:
      example:
        writeColumns:
        - column: column
          queryValue: queryValue
        - column: column
          queryValue: queryValue
        primaryKey:
        - column: column
          queryValue: queryValue
        - column: column
          queryValue: queryValue
      properties:
        primaryKey:
          description: the PK to locate the rows for write
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
          type: array
        writeColumns:
          items:
            $ref: '#/components/schemas/AppDatabaseColumnValue'
          type: array
      required:
      - primaryKey
      - writeColumns
      type: object
    WriteConflictMode:
      enum:
      - RETURN_ERROR_ON_CONFLICT
      - IGNORE_CONFLICT
      - OVERRIDE_ON_CONFLICT
      type: string
    AppDatabaseColumnValue:
      description: the value of a table column (from SDK to server or from server
        to SDK)
      example:
        column: column
        queryValue: queryValue
      properties:
        column:
          description: "the column name that can be used in the database query, see\
            \ below for example"
          type: string
        queryValue:
          description: the plain string value that can be used in the database query(e.g.
            for SQL SELECT ... WHERE $Column=$dbQueryValue or UPDATE/INSERT)
          type: string
      required:
      - column
      - queryValue
      type: object
