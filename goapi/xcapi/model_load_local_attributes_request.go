/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
)

// checks if the LoadLocalAttributesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadLocalAttributesRequest{}

// LoadLocalAttributesRequest struct for LoadLocalAttributesRequest
type LoadLocalAttributesRequest struct {
	KeysToLoadNoLock   []string                `json:"keysToLoadNoLock,omitempty"`
	KeysToLockWithLock []string                `json:"keysToLockWithLock,omitempty"`
	LockingPolicy      *TableReadLockingPolicy `json:"lockingPolicy,omitempty"`
}

// NewLoadLocalAttributesRequest instantiates a new LoadLocalAttributesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadLocalAttributesRequest() *LoadLocalAttributesRequest {
	this := LoadLocalAttributesRequest{}
	return &this
}

// NewLoadLocalAttributesRequestWithDefaults instantiates a new LoadLocalAttributesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadLocalAttributesRequestWithDefaults() *LoadLocalAttributesRequest {
	this := LoadLocalAttributesRequest{}
	return &this
}

// GetKeysToLoadNoLock returns the KeysToLoadNoLock field value if set, zero value otherwise.
func (o *LoadLocalAttributesRequest) GetKeysToLoadNoLock() []string {
	if o == nil || IsNil(o.KeysToLoadNoLock) {
		var ret []string
		return ret
	}
	return o.KeysToLoadNoLock
}

// GetKeysToLoadNoLockOk returns a tuple with the KeysToLoadNoLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadLocalAttributesRequest) GetKeysToLoadNoLockOk() ([]string, bool) {
	if o == nil || IsNil(o.KeysToLoadNoLock) {
		return nil, false
	}
	return o.KeysToLoadNoLock, true
}

// HasKeysToLoadNoLock returns a boolean if a field has been set.
func (o *LoadLocalAttributesRequest) HasKeysToLoadNoLock() bool {
	if o != nil && !IsNil(o.KeysToLoadNoLock) {
		return true
	}

	return false
}

// SetKeysToLoadNoLock gets a reference to the given []string and assigns it to the KeysToLoadNoLock field.
func (o *LoadLocalAttributesRequest) SetKeysToLoadNoLock(v []string) {
	o.KeysToLoadNoLock = v
}

// GetKeysToLockWithLock returns the KeysToLockWithLock field value if set, zero value otherwise.
func (o *LoadLocalAttributesRequest) GetKeysToLockWithLock() []string {
	if o == nil || IsNil(o.KeysToLockWithLock) {
		var ret []string
		return ret
	}
	return o.KeysToLockWithLock
}

// GetKeysToLockWithLockOk returns a tuple with the KeysToLockWithLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadLocalAttributesRequest) GetKeysToLockWithLockOk() ([]string, bool) {
	if o == nil || IsNil(o.KeysToLockWithLock) {
		return nil, false
	}
	return o.KeysToLockWithLock, true
}

// HasKeysToLockWithLock returns a boolean if a field has been set.
func (o *LoadLocalAttributesRequest) HasKeysToLockWithLock() bool {
	if o != nil && !IsNil(o.KeysToLockWithLock) {
		return true
	}

	return false
}

// SetKeysToLockWithLock gets a reference to the given []string and assigns it to the KeysToLockWithLock field.
func (o *LoadLocalAttributesRequest) SetKeysToLockWithLock(v []string) {
	o.KeysToLockWithLock = v
}

// GetLockingPolicy returns the LockingPolicy field value if set, zero value otherwise.
func (o *LoadLocalAttributesRequest) GetLockingPolicy() TableReadLockingPolicy {
	if o == nil || IsNil(o.LockingPolicy) {
		var ret TableReadLockingPolicy
		return ret
	}
	return *o.LockingPolicy
}

// GetLockingPolicyOk returns a tuple with the LockingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadLocalAttributesRequest) GetLockingPolicyOk() (*TableReadLockingPolicy, bool) {
	if o == nil || IsNil(o.LockingPolicy) {
		return nil, false
	}
	return o.LockingPolicy, true
}

// HasLockingPolicy returns a boolean if a field has been set.
func (o *LoadLocalAttributesRequest) HasLockingPolicy() bool {
	if o != nil && !IsNil(o.LockingPolicy) {
		return true
	}

	return false
}

// SetLockingPolicy gets a reference to the given TableReadLockingPolicy and assigns it to the LockingPolicy field.
func (o *LoadLocalAttributesRequest) SetLockingPolicy(v TableReadLockingPolicy) {
	o.LockingPolicy = &v
}

func (o LoadLocalAttributesRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadLocalAttributesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeysToLoadNoLock) {
		toSerialize["keysToLoadNoLock"] = o.KeysToLoadNoLock
	}
	if !IsNil(o.KeysToLockWithLock) {
		toSerialize["keysToLockWithLock"] = o.KeysToLockWithLock
	}
	if !IsNil(o.LockingPolicy) {
		toSerialize["lockingPolicy"] = o.LockingPolicy
	}
	return toSerialize, nil
}

type NullableLoadLocalAttributesRequest struct {
	value *LoadLocalAttributesRequest
	isSet bool
}

func (v NullableLoadLocalAttributesRequest) Get() *LoadLocalAttributesRequest {
	return v.value
}

func (v *NullableLoadLocalAttributesRequest) Set(val *LoadLocalAttributesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadLocalAttributesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadLocalAttributesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadLocalAttributesRequest(val *LoadLocalAttributesRequest) *NullableLoadLocalAttributesRequest {
	return &NullableLoadLocalAttributesRequest{value: val, isSet: true}
}

func (v NullableLoadLocalAttributesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadLocalAttributesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
