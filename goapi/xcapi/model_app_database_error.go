/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AppDatabaseError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDatabaseError{}

// AppDatabaseError the error for read/write the app database. For the write error, it's from last attempt.
type AppDatabaseError struct {
	AppDBErrorType ErrorSubType `json:"appDBErrorType"`
	// the error code from database driver
	AppDBErrorCode string `json:"appDBErrorCode"`
	// the error message from database driver
	AppDBErrorMessage *string `json:"appDBErrorMessage,omitempty"`
	// the first table that encounters the error to help SDK to throw the error in a friendly way
	AppDBErrorTableName *string `json:"appDBErrorTableName,omitempty"`
}

type _AppDatabaseError AppDatabaseError

// NewAppDatabaseError instantiates a new AppDatabaseError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDatabaseError(appDBErrorType ErrorSubType, appDBErrorCode string) *AppDatabaseError {
	this := AppDatabaseError{}
	this.AppDBErrorType = appDBErrorType
	this.AppDBErrorCode = appDBErrorCode
	return &this
}

// NewAppDatabaseErrorWithDefaults instantiates a new AppDatabaseError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDatabaseErrorWithDefaults() *AppDatabaseError {
	this := AppDatabaseError{}
	return &this
}

// GetAppDBErrorType returns the AppDBErrorType field value
func (o *AppDatabaseError) GetAppDBErrorType() ErrorSubType {
	if o == nil {
		var ret ErrorSubType
		return ret
	}

	return o.AppDBErrorType
}

// GetAppDBErrorTypeOk returns a tuple with the AppDBErrorType field value
// and a boolean to check if the value has been set.
func (o *AppDatabaseError) GetAppDBErrorTypeOk() (*ErrorSubType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppDBErrorType, true
}

// SetAppDBErrorType sets field value
func (o *AppDatabaseError) SetAppDBErrorType(v ErrorSubType) {
	o.AppDBErrorType = v
}

// GetAppDBErrorCode returns the AppDBErrorCode field value
func (o *AppDatabaseError) GetAppDBErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppDBErrorCode
}

// GetAppDBErrorCodeOk returns a tuple with the AppDBErrorCode field value
// and a boolean to check if the value has been set.
func (o *AppDatabaseError) GetAppDBErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppDBErrorCode, true
}

// SetAppDBErrorCode sets field value
func (o *AppDatabaseError) SetAppDBErrorCode(v string) {
	o.AppDBErrorCode = v
}

// GetAppDBErrorMessage returns the AppDBErrorMessage field value if set, zero value otherwise.
func (o *AppDatabaseError) GetAppDBErrorMessage() string {
	if o == nil || IsNil(o.AppDBErrorMessage) {
		var ret string
		return ret
	}
	return *o.AppDBErrorMessage
}

// GetAppDBErrorMessageOk returns a tuple with the AppDBErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDatabaseError) GetAppDBErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.AppDBErrorMessage) {
		return nil, false
	}
	return o.AppDBErrorMessage, true
}

// HasAppDBErrorMessage returns a boolean if a field has been set.
func (o *AppDatabaseError) HasAppDBErrorMessage() bool {
	if o != nil && !IsNil(o.AppDBErrorMessage) {
		return true
	}

	return false
}

// SetAppDBErrorMessage gets a reference to the given string and assigns it to the AppDBErrorMessage field.
func (o *AppDatabaseError) SetAppDBErrorMessage(v string) {
	o.AppDBErrorMessage = &v
}

// GetAppDBErrorTableName returns the AppDBErrorTableName field value if set, zero value otherwise.
func (o *AppDatabaseError) GetAppDBErrorTableName() string {
	if o == nil || IsNil(o.AppDBErrorTableName) {
		var ret string
		return ret
	}
	return *o.AppDBErrorTableName
}

// GetAppDBErrorTableNameOk returns a tuple with the AppDBErrorTableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDatabaseError) GetAppDBErrorTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppDBErrorTableName) {
		return nil, false
	}
	return o.AppDBErrorTableName, true
}

// HasAppDBErrorTableName returns a boolean if a field has been set.
func (o *AppDatabaseError) HasAppDBErrorTableName() bool {
	if o != nil && !IsNil(o.AppDBErrorTableName) {
		return true
	}

	return false
}

// SetAppDBErrorTableName gets a reference to the given string and assigns it to the AppDBErrorTableName field.
func (o *AppDatabaseError) SetAppDBErrorTableName(v string) {
	o.AppDBErrorTableName = &v
}

func (o AppDatabaseError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDatabaseError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["appDBErrorType"] = o.AppDBErrorType
	toSerialize["appDBErrorCode"] = o.AppDBErrorCode
	if !IsNil(o.AppDBErrorMessage) {
		toSerialize["appDBErrorMessage"] = o.AppDBErrorMessage
	}
	if !IsNil(o.AppDBErrorTableName) {
		toSerialize["appDBErrorTableName"] = o.AppDBErrorTableName
	}
	return toSerialize, nil
}

func (o *AppDatabaseError) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"appDBErrorType",
		"appDBErrorCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppDatabaseError := _AppDatabaseError{}

	err = json.Unmarshal(bytes, &varAppDatabaseError)

	if err != nil {
		return err
	}

	*o = AppDatabaseError(varAppDatabaseError)

	return err
}

type NullableAppDatabaseError struct {
	value *AppDatabaseError
	isSet bool
}

func (v NullableAppDatabaseError) Get() *AppDatabaseError {
	return v.value
}

func (v *NullableAppDatabaseError) Set(val *AppDatabaseError) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDatabaseError) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDatabaseError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDatabaseError(val *AppDatabaseError) *NullableAppDatabaseError {
	return &NullableAppDatabaseError{value: val, isSet: true}
}

func (v NullableAppDatabaseError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDatabaseError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
