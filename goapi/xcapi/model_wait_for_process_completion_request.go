/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the WaitForProcessCompletionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WaitForProcessCompletionRequest{}

// WaitForProcessCompletionRequest struct for WaitForProcessCompletionRequest
type WaitForProcessCompletionRequest struct {
	ShardId            int32  `json:"shardId"`
	ProcessExecutionId string `json:"processExecutionId"`
}

type _WaitForProcessCompletionRequest WaitForProcessCompletionRequest

// NewWaitForProcessCompletionRequest instantiates a new WaitForProcessCompletionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWaitForProcessCompletionRequest(shardId int32, processExecutionId string) *WaitForProcessCompletionRequest {
	this := WaitForProcessCompletionRequest{}
	this.ShardId = shardId
	this.ProcessExecutionId = processExecutionId
	return &this
}

// NewWaitForProcessCompletionRequestWithDefaults instantiates a new WaitForProcessCompletionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWaitForProcessCompletionRequestWithDefaults() *WaitForProcessCompletionRequest {
	this := WaitForProcessCompletionRequest{}
	return &this
}

// GetShardId returns the ShardId field value
func (o *WaitForProcessCompletionRequest) GetShardId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ShardId
}

// GetShardIdOk returns a tuple with the ShardId field value
// and a boolean to check if the value has been set.
func (o *WaitForProcessCompletionRequest) GetShardIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShardId, true
}

// SetShardId sets field value
func (o *WaitForProcessCompletionRequest) SetShardId(v int32) {
	o.ShardId = v
}

// GetProcessExecutionId returns the ProcessExecutionId field value
func (o *WaitForProcessCompletionRequest) GetProcessExecutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessExecutionId
}

// GetProcessExecutionIdOk returns a tuple with the ProcessExecutionId field value
// and a boolean to check if the value has been set.
func (o *WaitForProcessCompletionRequest) GetProcessExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessExecutionId, true
}

// SetProcessExecutionId sets field value
func (o *WaitForProcessCompletionRequest) SetProcessExecutionId(v string) {
	o.ProcessExecutionId = v
}

func (o WaitForProcessCompletionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WaitForProcessCompletionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["shardId"] = o.ShardId
	toSerialize["processExecutionId"] = o.ProcessExecutionId
	return toSerialize, nil
}

func (o *WaitForProcessCompletionRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"shardId",
		"processExecutionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWaitForProcessCompletionRequest := _WaitForProcessCompletionRequest{}

	err = json.Unmarshal(bytes, &varWaitForProcessCompletionRequest)

	if err != nil {
		return err
	}

	*o = WaitForProcessCompletionRequest(varWaitForProcessCompletionRequest)

	return err
}

type NullableWaitForProcessCompletionRequest struct {
	value *WaitForProcessCompletionRequest
	isSet bool
}

func (v NullableWaitForProcessCompletionRequest) Get() *WaitForProcessCompletionRequest {
	return v.value
}

func (v *NullableWaitForProcessCompletionRequest) Set(val *WaitForProcessCompletionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWaitForProcessCompletionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWaitForProcessCompletionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWaitForProcessCompletionRequest(val *WaitForProcessCompletionRequest) *NullableWaitForProcessCompletionRequest {
	return &NullableWaitForProcessCompletionRequest{value: val, isSet: true}
}

func (v NullableWaitForProcessCompletionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWaitForProcessCompletionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
