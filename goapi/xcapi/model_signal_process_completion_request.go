/*
xCherry APIs

This APIs between xCherry service and SDKs

API version: 0.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xcapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SignalProcessCompletionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignalProcessCompletionRequest{}

// SignalProcessCompletionRequest struct for SignalProcessCompletionRequest
type SignalProcessCompletionRequest struct {
	ShardId            int32  `json:"shardId"`
	ProcessExecutionId string `json:"processExecutionId"`
	Status             string `json:"status"`
}

type _SignalProcessCompletionRequest SignalProcessCompletionRequest

// NewSignalProcessCompletionRequest instantiates a new SignalProcessCompletionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalProcessCompletionRequest(shardId int32, processExecutionId string, status string) *SignalProcessCompletionRequest {
	this := SignalProcessCompletionRequest{}
	this.ShardId = shardId
	this.ProcessExecutionId = processExecutionId
	this.Status = status
	return &this
}

// NewSignalProcessCompletionRequestWithDefaults instantiates a new SignalProcessCompletionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalProcessCompletionRequestWithDefaults() *SignalProcessCompletionRequest {
	this := SignalProcessCompletionRequest{}
	return &this
}

// GetShardId returns the ShardId field value
func (o *SignalProcessCompletionRequest) GetShardId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ShardId
}

// GetShardIdOk returns a tuple with the ShardId field value
// and a boolean to check if the value has been set.
func (o *SignalProcessCompletionRequest) GetShardIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShardId, true
}

// SetShardId sets field value
func (o *SignalProcessCompletionRequest) SetShardId(v int32) {
	o.ShardId = v
}

// GetProcessExecutionId returns the ProcessExecutionId field value
func (o *SignalProcessCompletionRequest) GetProcessExecutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessExecutionId
}

// GetProcessExecutionIdOk returns a tuple with the ProcessExecutionId field value
// and a boolean to check if the value has been set.
func (o *SignalProcessCompletionRequest) GetProcessExecutionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessExecutionId, true
}

// SetProcessExecutionId sets field value
func (o *SignalProcessCompletionRequest) SetProcessExecutionId(v string) {
	o.ProcessExecutionId = v
}

// GetStatus returns the Status field value
func (o *SignalProcessCompletionRequest) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SignalProcessCompletionRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SignalProcessCompletionRequest) SetStatus(v string) {
	o.Status = v
}

func (o SignalProcessCompletionRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignalProcessCompletionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["shardId"] = o.ShardId
	toSerialize["processExecutionId"] = o.ProcessExecutionId
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *SignalProcessCompletionRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"shardId",
		"processExecutionId",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSignalProcessCompletionRequest := _SignalProcessCompletionRequest{}

	err = json.Unmarshal(bytes, &varSignalProcessCompletionRequest)

	if err != nil {
		return err
	}

	*o = SignalProcessCompletionRequest(varSignalProcessCompletionRequest)

	return err
}

type NullableSignalProcessCompletionRequest struct {
	value *SignalProcessCompletionRequest
	isSet bool
}

func (v NullableSignalProcessCompletionRequest) Get() *SignalProcessCompletionRequest {
	return v.value
}

func (v *NullableSignalProcessCompletionRequest) Set(val *SignalProcessCompletionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalProcessCompletionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalProcessCompletionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalProcessCompletionRequest(val *SignalProcessCompletionRequest) *NullableSignalProcessCompletionRequest {
	return &NullableSignalProcessCompletionRequest{value: val, isSet: true}
}

func (v NullableSignalProcessCompletionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalProcessCompletionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
