/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
	"fmt"
)

// ProcessIdReusePolicy the model 'ProcessIdReusePolicy'
type ProcessIdReusePolicy string

// List of ProcessIdReusePolicy
const (
	ALLOW_IF_PREVIOUS_EXIT_ABNORMALLY ProcessIdReusePolicy = "ALLOW_IF_PREVIOUS_EXIT_ABNORMALLY"
	ALLOW_IF_NO_RUNNING               ProcessIdReusePolicy = "ALLOW_IF_NO_RUNNING"
	DISALLOW_REUSE                    ProcessIdReusePolicy = "DISALLOW_REUSE"
	TERMINATE_IF_RUNNING              ProcessIdReusePolicy = "TERMINATE_IF_RUNNING"
)

// All allowed values of ProcessIdReusePolicy enum
var AllowedProcessIdReusePolicyEnumValues = []ProcessIdReusePolicy{
	"ALLOW_IF_PREVIOUS_EXIT_ABNORMALLY",
	"ALLOW_IF_NO_RUNNING",
	"DISALLOW_REUSE",
	"TERMINATE_IF_RUNNING",
}

func (v *ProcessIdReusePolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProcessIdReusePolicy(value)
	for _, existing := range AllowedProcessIdReusePolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProcessIdReusePolicy", value)
}

// NewProcessIdReusePolicyFromValue returns a pointer to a valid ProcessIdReusePolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProcessIdReusePolicyFromValue(v string) (*ProcessIdReusePolicy, error) {
	ev := ProcessIdReusePolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProcessIdReusePolicy: valid values are %v", v, AllowedProcessIdReusePolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProcessIdReusePolicy) IsValid() bool {
	for _, existing := range AllowedProcessIdReusePolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProcessIdReusePolicy value
func (v ProcessIdReusePolicy) Ptr() *ProcessIdReusePolicy {
	return &v
}

type NullableProcessIdReusePolicy struct {
	value *ProcessIdReusePolicy
	isSet bool
}

func (v NullableProcessIdReusePolicy) Get() *ProcessIdReusePolicy {
	return v.value
}

func (v *NullableProcessIdReusePolicy) Set(val *ProcessIdReusePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessIdReusePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessIdReusePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessIdReusePolicy(val *ProcessIdReusePolicy) *NullableProcessIdReusePolicy {
	return &NullableProcessIdReusePolicy{value: val, isSet: true}
}

func (v NullableProcessIdReusePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessIdReusePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
