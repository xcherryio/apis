/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
	"fmt"
)

// ThreadCloseType the model 'ThreadCloseType'
type ThreadCloseType string

// List of ThreadCloseType
const (
	FORCE_COMPLETE_PROCESS    ThreadCloseType = "FORCE_COMPLETE_PROCESS"
	GRACEFUL_COMPLETE_PROCESS ThreadCloseType = "GRACEFUL_COMPLETE_PROCESS"
	DEAD_END                  ThreadCloseType = "DEAD_END"
	FORCE_FAIL_PROCESS        ThreadCloseType = "FORCE_FAIL_PROCESS"
)

// All allowed values of ThreadCloseType enum
var AllowedThreadCloseTypeEnumValues = []ThreadCloseType{
	"FORCE_COMPLETE_PROCESS",
	"GRACEFUL_COMPLETE_PROCESS",
	"DEAD_END",
	"FORCE_FAIL_PROCESS",
}

func (v *ThreadCloseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ThreadCloseType(value)
	for _, existing := range AllowedThreadCloseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ThreadCloseType", value)
}

// NewThreadCloseTypeFromValue returns a pointer to a valid ThreadCloseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewThreadCloseTypeFromValue(v string) (*ThreadCloseType, error) {
	ev := ThreadCloseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ThreadCloseType: valid values are %v", v, AllowedThreadCloseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ThreadCloseType) IsValid() bool {
	for _, existing := range AllowedThreadCloseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ThreadCloseType value
func (v ThreadCloseType) Ptr() *ThreadCloseType {
	return &v
}

type NullableThreadCloseType struct {
	value *ThreadCloseType
	isSet bool
}

func (v NullableThreadCloseType) Get() *ThreadCloseType {
	return v.value
}

func (v *NullableThreadCloseType) Set(val *ThreadCloseType) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadCloseType) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadCloseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadCloseType(val *ThreadCloseType) *NullableThreadCloseType {
	return &NullableThreadCloseType{value: val, isSet: true}
}

func (v NullableThreadCloseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadCloseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
