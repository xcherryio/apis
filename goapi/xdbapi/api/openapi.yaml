openapi: 3.0.3
info:
  description: This APIs between xdb service and SDKs
  title: XDB APIs
  version: 0.0.1
servers:
- url: /
paths:
  /api/v1/xdb/service/process-execution/start:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionStartRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionStartResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Invalid request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Process already started
        "424":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: global attributes write failure
      summary: start a process execution
  /api/v1/xdb/service/process-execution/stop:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionStopRequest'
      responses:
        "200":
          content: {}
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Process execution not exists
      summary: stop a process execution
  /api/v1/xdb/service/process-execution/describe:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionDescribeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionDescribeResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Process execution not exists
      summary: describe a process execution
  /api/v1/xdb/service/process-execution/publish-to-local-queue:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishToLocalQueueRequest'
      responses:
        "200":
          content: {}
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Process execution not exists
      summary: send message(s) to be consumed within a single process execution
  /api/v1/xdb/service/process-execution/rpc:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionRpcRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionRpcResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Process execution not exists
        "424":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: global attributes write failure / worker RPC execution failure
      summary: execute a RPC method of a process execution
  /api/v1/xdb/worker/async-state/wait-until:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateWaitUntilRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateWaitUntilResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
          description: worker execution failure
      summary: invoking AsyncState.waitUntil API
  /api/v1/xdb/worker/async-state/execute:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateExecuteRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateExecuteResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
          description: worker execution failure
      summary: invoking AsyncState.execute API
  /api/v1/xdb/worker/process/rpc:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessRpcWorkerRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessRpcWorkerResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
          description: worker execution failure
      summary: execute a RPC method of a process execution in the worker
  /internal/api/v1/xdb/notify-immediate-tasks:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyImmediateTasksRequest'
      responses:
        "200":
          content: {}
          description: successful operation
      summary: for api service to tell async service that there are new immediate
        tasks added to the queue
  /internal/api/v1/xdb/notify-timer-tasks:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyTimerTasksRequest'
      responses:
        "200":
          content: {}
          description: successful operation
      summary: for api service to tell async service that there are new timer tasks
        added to the queue
components:
  schemas:
    ProcessExecutionDescribeRequest:
      example:
        processId: processId
        namespace: namespace
      properties:
        namespace:
          type: string
        processId:
          type: string
      required:
      - namespace
      - processId
      type: object
    ProcessExecutionDescribeResponse:
      example:
        workerUrl: workerUrl
        processExecutionId: processExecutionId
        processType: processType
        startTimestamp: 0
        status: null
      properties:
        processExecutionId:
          type: string
        processType:
          description: the process type for SDK to lookup the process definition class
          type: string
        workerUrl:
          description: the URL for XDB async service to make callback to worker
          type: string
        startTimestamp:
          description: start time of the process execution
          type: integer
        status:
          $ref: '#/components/schemas/ProcessStatus'
      type: object
    ProcessStatus:
      enum:
      - RUNNING
      - COMPLETED
      - FAILED
      - TIMEOUT
      - TERMINATED
      type: string
    AsyncStateWaitUntilRequest:
      description: the input of the waitUntil API
      example:
        stateId: stateId
        context:
          recoverFromApi: null
          processStartedTimestamp: 0
          processExecutionId: processExecutionId
          processId: processId
          recoverFromStateExecutionId: recoverFromStateExecutionId
          firstAttemptTimestamp: 6
          attempt: 1
          stateExecutionId: stateExecutionId
        processType: processType
        stateInput:
          data: data
          encoding: encoding
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - context
      - processType
      - stateId
      type: object
    AsyncStateWaitUntilResponse:
      description: the output of the waitUntil API
      example:
        commandRequest:
          timerCommands:
          - delayInSeconds: 0
          - delayInSeconds: 0
          waitingType: null
          localQueueCommands:
          - queueName: queueName
            count: 6
          - queueName: queueName
            count: 6
        publishToLocalQueue:
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
      properties:
        commandRequest:
          $ref: '#/components/schemas/CommandRequest'
        publishToLocalQueue:
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
          type: array
      required:
      - commandRequest
      type: object
    CommandRequest:
      example:
        timerCommands:
        - delayInSeconds: 0
        - delayInSeconds: 0
        waitingType: null
        localQueueCommands:
        - queueName: queueName
          count: 6
        - queueName: queueName
          count: 6
      properties:
        waitingType:
          $ref: '#/components/schemas/CommandWaitingType'
        timerCommands:
          items:
            $ref: '#/components/schemas/TimerCommand'
          type: array
        localQueueCommands:
          items:
            $ref: '#/components/schemas/LocalQueueCommand'
          type: array
      required:
      - waitingType
      type: object
    TimerCommand:
      example:
        delayInSeconds: 0
      properties:
        delayInSeconds:
          format: int64
          type: integer
      required:
      - delayInSeconds
      type: object
    LocalQueueCommand:
      example:
        queueName: queueName
        count: 6
      properties:
        queueName:
          type: string
        count:
          default: 1
          description: the number of identical messages to await
          type: integer
      required:
      - queueName
      type: object
    CommandWaitingType:
      enum:
      - EmptyCommand
      - AnyOfCompletion
      - AllOfCompletion
      type: string
    AsyncStateExecuteRequest:
      description: the input of the execute API
      example:
        commandResults:
          localQueueResults:
          - queueName: queueName
            messages:
            - payload:
                data: data
                encoding: encoding
              dedupId: dedupId
            - payload:
                data: data
                encoding: encoding
              dedupId: dedupId
            status: null
          - queueName: queueName
            messages:
            - payload:
                data: data
                encoding: encoding
              dedupId: dedupId
            - payload:
                data: data
                encoding: encoding
              dedupId: dedupId
            status: null
          timerResults:
          - status: null
          - status: null
        loadedGlobalAttributes:
          tableResponses:
          - columns:
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            tableName: tableName
          - columns:
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            tableName: tableName
        stateId: stateId
        context:
          recoverFromApi: null
          processStartedTimestamp: 0
          processExecutionId: processExecutionId
          processId: processId
          recoverFromStateExecutionId: recoverFromStateExecutionId
          firstAttemptTimestamp: 6
          attempt: 1
          stateExecutionId: stateExecutionId
        processType: processType
        stateInput:
          data: data
          encoding: encoding
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        commandResults:
          $ref: '#/components/schemas/CommandResults'
        loadedGlobalAttributes:
          $ref: '#/components/schemas/LoadGlobalAttributeResponse'
      required:
      - context
      - processType
      - stateId
      type: object
    CommandResults:
      example:
        localQueueResults:
        - queueName: queueName
          messages:
          - payload:
              data: data
              encoding: encoding
            dedupId: dedupId
          - payload:
              data: data
              encoding: encoding
            dedupId: dedupId
          status: null
        - queueName: queueName
          messages:
          - payload:
              data: data
              encoding: encoding
            dedupId: dedupId
          - payload:
              data: data
              encoding: encoding
            dedupId: dedupId
          status: null
        timerResults:
        - status: null
        - status: null
      properties:
        timerResults:
          items:
            $ref: '#/components/schemas/TimerResult'
          type: array
        localQueueResults:
          items:
            $ref: '#/components/schemas/LocalQueueResult'
          type: array
      type: object
    TimerResult:
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/CommandStatus'
      required:
      - status
      type: object
    LocalQueueResult:
      example:
        queueName: queueName
        messages:
        - payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        status: null
      properties:
        status:
          $ref: '#/components/schemas/CommandStatus'
        queueName:
          type: string
        messages:
          items:
            $ref: '#/components/schemas/LocalQueueMessageResult'
          type: array
      required:
      - queueName
      - status
      type: object
    CommandStatus:
      enum:
      - WAITING_COMMAND
      - COMPLETED_COMMAND
      - SKIPPED_COMMAND
      type: string
    LocalQueueMessage:
      example:
        queueName: queueName
        payload:
          data: data
          encoding: encoding
        dedupId: dedupId
      properties:
        queueName:
          type: string
        dedupId:
          description: "UUID to uniquely distinguish different messages. If not specified,\
            \ the server will generate a UUID instead."
          type: string
        payload:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - queueName
      type: object
    LocalQueueMessageResult:
      example:
        payload:
          data: data
          encoding: encoding
        dedupId: dedupId
      properties:
        dedupId:
          description: UUID to uniquely distinguish different messages.
          type: string
        payload:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - dedupId
      type: object
    AsyncStateExecuteResponse:
      description: the output of the execute API
      example:
        stateDecision:
          nextStates:
          - stateConfig:
              executeApiTimeoutSeconds: 6
              stateFailureRecoveryOptions:
                stateFailureProceedStateId: stateFailureProceedStateId
                stateFailureProceedStateConfig: null
                policy: null
              loadGlobalAttributesRequest:
                tableRequests:
                - lockingPolicy: null
                  columns:
                  - dbColumn: dbColumn
                  - dbColumn: dbColumn
                  tableName: tableName
                - lockingPolicy: null
                  columns:
                  - dbColumn: dbColumn
                  - dbColumn: dbColumn
                  tableName: tableName
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          - stateConfig:
              executeApiTimeoutSeconds: 6
              stateFailureRecoveryOptions:
                stateFailureProceedStateId: stateFailureProceedStateId
                stateFailureProceedStateConfig: null
                policy: null
              loadGlobalAttributesRequest:
                tableRequests:
                - lockingPolicy: null
                  columns:
                  - dbColumn: dbColumn
                  - dbColumn: dbColumn
                  tableName: tableName
                - lockingPolicy: null
                  columns:
                  - dbColumn: dbColumn
                  - dbColumn: dbColumn
                  tableName: tableName
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          threadCloseDecision:
            closeInput:
              data: data
              encoding: encoding
            closeType: null
        publishToLocalQueue:
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        writeToGlobalAttributes:
        - updateColumns:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          tableName: tableName
        - updateColumns:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          tableName: tableName
      properties:
        stateDecision:
          $ref: '#/components/schemas/StateDecision'
        publishToLocalQueue:
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
          type: array
        writeToGlobalAttributes:
          items:
            $ref: '#/components/schemas/GlobalAttributeTableRowUpdate'
          type: array
      required:
      - stateDecision
      type: object
    StateDecision:
      description: "the decision at the end of state execution, either nextStates\
        \ or threadCloseDecision is needed"
      example:
        nextStates:
        - stateConfig:
            executeApiTimeoutSeconds: 6
            stateFailureRecoveryOptions:
              stateFailureProceedStateId: stateFailureProceedStateId
              stateFailureProceedStateConfig: null
              policy: null
            loadGlobalAttributesRequest:
              tableRequests:
              - lockingPolicy: null
                columns:
                - dbColumn: dbColumn
                - dbColumn: dbColumn
                tableName: tableName
              - lockingPolicy: null
                columns:
                - dbColumn: dbColumn
                - dbColumn: dbColumn
                tableName: tableName
            skipWaitUntil: true
            waitUntilApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
            waitUntilApiTimeoutSeconds: 0
            executeApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
          stateId: stateId
          stateInput:
            data: data
            encoding: encoding
        - stateConfig:
            executeApiTimeoutSeconds: 6
            stateFailureRecoveryOptions:
              stateFailureProceedStateId: stateFailureProceedStateId
              stateFailureProceedStateConfig: null
              policy: null
            loadGlobalAttributesRequest:
              tableRequests:
              - lockingPolicy: null
                columns:
                - dbColumn: dbColumn
                - dbColumn: dbColumn
                tableName: tableName
              - lockingPolicy: null
                columns:
                - dbColumn: dbColumn
                - dbColumn: dbColumn
                tableName: tableName
            skipWaitUntil: true
            waitUntilApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
            waitUntilApiTimeoutSeconds: 0
            executeApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
          stateId: stateId
          stateInput:
            data: data
            encoding: encoding
        threadCloseDecision:
          closeInput:
            data: data
            encoding: encoding
          closeType: null
      properties:
        nextStates:
          items:
            $ref: '#/components/schemas/StateMovement'
          type: array
        threadCloseDecision:
          $ref: '#/components/schemas/ThreadCloseDecision'
      type: object
    ThreadCloseDecision:
      example:
        closeInput:
          data: data
          encoding: encoding
        closeType: null
      properties:
        closeType:
          $ref: '#/components/schemas/ThreadCloseType'
        closeInput:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - closeType
      type: object
    ThreadCloseType:
      enum:
      - FORCE_COMPLETE_PROCESS
      - GRACEFUL_COMPLETE_PROCESS
      - DEAD_END
      - FORCE_FAIL_PROCESS
      type: string
    StateMovement:
      example:
        stateConfig:
          executeApiTimeoutSeconds: 6
          stateFailureRecoveryOptions:
            stateFailureProceedStateId: stateFailureProceedStateId
            stateFailureProceedStateConfig: null
            policy: null
          loadGlobalAttributesRequest:
            tableRequests:
            - lockingPolicy: null
              columns:
              - dbColumn: dbColumn
              - dbColumn: dbColumn
              tableName: tableName
            - lockingPolicy: null
              columns:
              - dbColumn: dbColumn
              - dbColumn: dbColumn
              tableName: tableName
          skipWaitUntil: true
          waitUntilApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
          waitUntilApiTimeoutSeconds: 0
          executeApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
        stateId: stateId
        stateInput:
          data: data
          encoding: encoding
      properties:
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        stateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
      required:
      - stateId
      type: object
    Context:
      example:
        recoverFromApi: null
        processStartedTimestamp: 0
        processExecutionId: processExecutionId
        processId: processId
        recoverFromStateExecutionId: recoverFromStateExecutionId
        firstAttemptTimestamp: 6
        attempt: 1
        stateExecutionId: stateExecutionId
      properties:
        processId:
          type: string
        processExecutionId:
          type: string
        processStartedTimestamp:
          format: int64
          type: integer
        stateExecutionId:
          description: stateExecutionId is for async state API only
          type: string
        firstAttemptTimestamp:
          description: for async state API only(during backoff retry)
          format: int64
          type: integer
        attempt:
          description: for async state API only(during backoff retry)
          type: integer
        recoverFromStateExecutionId:
          description: "for async state API only, state id + sequence number"
          type: string
        recoverFromApi:
          $ref: '#/components/schemas/StateApiType'
      required:
      - processExecutionId
      - processId
      - processStartedTimestamp
      type: object
    StateApiType:
      enum:
      - WAIT_UNTIL_API
      - EXECUTE_API
      type: string
    WorkerErrorResponse:
      properties:
        detail:
          type: string
        errorType:
          type: string
      required:
      - errorType
      type: object
    EncodedObject:
      example:
        data: data
        encoding: encoding
      properties:
        encoding:
          type: string
        data:
          type: string
      required:
      - data
      - encoding
      type: object
    ApiErrorResponse:
      properties:
        detail:
          type: string
        originalWorkerErrorDetail:
          type: string
        originalWorkerErrorType:
          type: string
        originalWorkerErrorStatus:
          type: integer
      type: object
    ProcessExecutionStartRequest:
      description: the request for starting a process execution
      example:
        startStateConfig:
          executeApiTimeoutSeconds: 6
          stateFailureRecoveryOptions:
            stateFailureProceedStateId: stateFailureProceedStateId
            stateFailureProceedStateConfig: null
            policy: null
          loadGlobalAttributesRequest:
            tableRequests:
            - lockingPolicy: null
              columns:
              - dbColumn: dbColumn
              - dbColumn: dbColumn
              tableName: tableName
            - lockingPolicy: null
              columns:
              - dbColumn: dbColumn
              - dbColumn: dbColumn
              tableName: tableName
          skipWaitUntil: true
          waitUntilApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
          waitUntilApiTimeoutSeconds: 0
          executeApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
        startStateInput:
          data: data
          encoding: encoding
        workerUrl: workerUrl
        startStateId: startStateId
        processId: processId
        processStartConfig:
          timeoutSeconds: 9
          idReusePolicy: null
          globalAttributeConfig:
            tableConfigs:
            - initialWriteMode: null
              initialWrite:
              - dbQueryValue: dbQueryValue
                dbColumn: dbColumn
              - dbQueryValue: dbQueryValue
                dbColumn: dbColumn
              tableName: tableName
              primaryKey:
              - dbQueryValue: dbQueryValue
                dbColumn: dbColumn
              - dbQueryValue: dbQueryValue
                dbColumn: dbColumn
            - initialWriteMode: null
              initialWrite:
              - dbQueryValue: dbQueryValue
                dbColumn: dbColumn
              - dbQueryValue: dbQueryValue
                dbColumn: dbColumn
              tableName: tableName
              primaryKey:
              - dbQueryValue: dbQueryValue
                dbColumn: dbColumn
              - dbQueryValue: dbQueryValue
                dbColumn: dbColumn
        namespace: namespace
        processType: processType
      properties:
        namespace:
          type: string
        processId:
          description: "the user business identifier for the process, which can be\
            \ used for multiple ProcessExecution based on ProcessIdReusePolicy"
          type: string
        processType:
          description: the process type for SDK to lookup the process definition class
          type: string
        workerUrl:
          description: the URL for XDB async service to make callback to worker
          type: string
        startStateId:
          description: StateId of the first AsyncState to start
          type: string
        startStateInput:
          $ref: '#/components/schemas/EncodedObject'
        startStateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
        processStartConfig:
          $ref: '#/components/schemas/ProcessStartConfig'
      required:
      - namespace
      - processId
      - processType
      - workerUrl
      type: object
    ProcessStartConfig:
      example:
        timeoutSeconds: 9
        idReusePolicy: null
        globalAttributeConfig:
          tableConfigs:
          - initialWriteMode: null
            initialWrite:
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            tableName: tableName
            primaryKey:
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
          - initialWriteMode: null
            initialWrite:
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            tableName: tableName
            primaryKey:
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
      properties:
        timeoutSeconds:
          type: integer
        idReusePolicy:
          $ref: '#/components/schemas/ProcessIdReusePolicy'
        globalAttributeConfig:
          $ref: '#/components/schemas/GlobalAttributeConfig'
      type: object
    GlobalAttributeConfig:
      example:
        tableConfigs:
        - initialWriteMode: null
          initialWrite:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          tableName: tableName
          primaryKey:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
        - initialWriteMode: null
          initialWrite:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          tableName: tableName
          primaryKey:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
      properties:
        tableConfigs:
          items:
            $ref: '#/components/schemas/GlobalAttributeTableConfig'
          type: array
      type: object
    GlobalAttributeTableConfig:
      example:
        initialWriteMode: null
        initialWrite:
        - dbQueryValue: dbQueryValue
          dbColumn: dbColumn
        - dbQueryValue: dbQueryValue
          dbColumn: dbColumn
        tableName: tableName
        primaryKey:
        - dbQueryValue: dbQueryValue
          dbColumn: dbColumn
        - dbQueryValue: dbQueryValue
          dbColumn: dbColumn
      properties:
        tableName:
          type: string
        primaryKey:
          items:
            $ref: '#/components/schemas/TableColumnValue'
          type: array
        initialWrite:
          items:
            $ref: '#/components/schemas/TableColumnValue'
          type: array
        initialWriteMode:
          $ref: '#/components/schemas/AttributeWriteConflictMode'
      required:
      - primaryKey
      - tableName
      type: object
    GlobalAttributeTableRowUpdate:
      example:
        updateColumns:
        - dbQueryValue: dbQueryValue
          dbColumn: dbColumn
        - dbQueryValue: dbQueryValue
          dbColumn: dbColumn
        tableName: tableName
      properties:
        tableName:
          type: string
        updateColumns:
          items:
            $ref: '#/components/schemas/TableColumnValue'
          type: array
      required:
      - tableName
      type: object
    AttributeWriteConflictMode:
      enum:
      - RETURN_ERROR_ON_CONFLICT
      - IGNORE_CONFLICT
      - OVERRIDE_ON_CONFLICT
      type: string
    TableColumnValue:
      description: the value of a global attribute table (from SDK to server or from
        server to SDK)
      example:
        dbQueryValue: dbQueryValue
        dbColumn: dbColumn
      properties:
        dbColumn:
          description: "the column name that can be used in the database query, see\
            \ below for example"
          type: string
        dbQueryValue:
          description: the plain string value that can be used in the database query(e.g.
            for SQL SELECT ... WHERE $Column=$dbQueryValue or UPDATE/INSERT)
          type: string
      required:
      - dbColumn
      - dbQueryValue
      type: object
    TableColumnDef:
      description: the definition(key) for getting value of a global attribute table
      example:
        dbColumn: dbColumn
      properties:
        dbColumn:
          description: "the column name that can be used in the database query, see\
            \ below for example"
          type: string
      required:
      - dbColumn
      type: object
    LoadGlobalAttributesRequest:
      description: the request to load global attributes
      example:
        tableRequests:
        - lockingPolicy: null
          columns:
          - dbColumn: dbColumn
          - dbColumn: dbColumn
          tableName: tableName
        - lockingPolicy: null
          columns:
          - dbColumn: dbColumn
          - dbColumn: dbColumn
          tableName: tableName
      properties:
        tableRequests:
          items:
            $ref: '#/components/schemas/TableReadRequest'
          type: array
      type: object
    TableReadRequest:
      example:
        lockingPolicy: null
        columns:
        - dbColumn: dbColumn
        - dbColumn: dbColumn
        tableName: tableName
      properties:
        tableName:
          type: string
        lockingPolicy:
          $ref: '#/components/schemas/TableReadLockingPolicy'
        columns:
          items:
            $ref: '#/components/schemas/TableColumnDef'
          type: array
      type: object
    LoadGlobalAttributeResponse:
      description: the response for loading global attributes
      example:
        tableResponses:
        - columns:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          tableName: tableName
        - columns:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          tableName: tableName
      properties:
        tableResponses:
          items:
            $ref: '#/components/schemas/TableReadResponse'
          type: array
      type: object
    TableReadResponse:
      example:
        columns:
        - dbQueryValue: dbQueryValue
          dbColumn: dbColumn
        - dbQueryValue: dbQueryValue
          dbColumn: dbColumn
        tableName: tableName
      properties:
        tableName:
          type: string
        columns:
          items:
            $ref: '#/components/schemas/TableColumnValue'
          type: array
      type: object
    TableReadLockingPolicy:
      enum:
      - NO_LOCKING
      - SHARE_LOCK
      - EXCLUSIVE_LOCK
      type: string
    ProcessIdReusePolicy:
      enum:
      - ALLOW_IF_PREVIOUS_EXIT_ABNORMALLY
      - ALLOW_IF_NO_RUNNING
      - DISALLOW_REUSE
      - TERMINATE_IF_RUNNING
      type: string
    AsyncStateConfig:
      example:
        executeApiTimeoutSeconds: 6
        stateFailureRecoveryOptions:
          stateFailureProceedStateId: stateFailureProceedStateId
          stateFailureProceedStateConfig: null
          policy: null
        loadGlobalAttributesRequest:
          tableRequests:
          - lockingPolicy: null
            columns:
            - dbColumn: dbColumn
            - dbColumn: dbColumn
            tableName: tableName
          - lockingPolicy: null
            columns:
            - dbColumn: dbColumn
            - dbColumn: dbColumn
            tableName: tableName
        skipWaitUntil: true
        waitUntilApiRetryPolicy:
          maximumAttemptsDurationSeconds: 7
          maximumAttempts: 2
          initialIntervalSeconds: 1
          maximumIntervalSeconds: 5
          backoffCoefficient: 5.962134
        waitUntilApiTimeoutSeconds: 0
        executeApiRetryPolicy:
          maximumAttemptsDurationSeconds: 7
          maximumAttempts: 2
          initialIntervalSeconds: 1
          maximumIntervalSeconds: 5
          backoffCoefficient: 5.962134
      properties:
        skipWaitUntil:
          type: boolean
        waitUntilApiTimeoutSeconds:
          description: the timeout for the single attempt of AsyncState.waitUntil
            API
          type: integer
        executeApiTimeoutSeconds:
          description: the timeout for the single attempt of AsyncState.execute API
          type: integer
        waitUntilApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        executeApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        stateFailureRecoveryOptions:
          $ref: '#/components/schemas/StateFailureRecoveryOptions'
        loadGlobalAttributesRequest:
          $ref: '#/components/schemas/LoadGlobalAttributesRequest'
      type: object
    StateFailureRecoveryPolicy:
      enum:
      - FAIL_PROCESS_ON_STATE_FAILURE
      - PROCEED_TO_CONFIGURED_STATE
      type: string
    StateFailureRecoveryOptions:
      example:
        stateFailureProceedStateId: stateFailureProceedStateId
        stateFailureProceedStateConfig: null
        policy: null
      properties:
        policy:
          $ref: '#/components/schemas/StateFailureRecoveryPolicy'
        stateFailureProceedStateId:
          type: string
        stateFailureProceedStateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
      required:
      - policy
      type: object
    RetryPolicy:
      example:
        maximumAttemptsDurationSeconds: 7
        maximumAttempts: 2
        initialIntervalSeconds: 1
        maximumIntervalSeconds: 5
        backoffCoefficient: 5.962134
      properties:
        initialIntervalSeconds:
          description: "the initial interval for the first retry, default to 1 second"
          type: integer
        backoffCoefficient:
          description: "the backoff coefficient for the next retry, default to 2"
          format: float
          type: number
        maximumIntervalSeconds:
          description: "the maximum interval for the next retry, default to 100x of\
            \ initial interval"
          type: integer
        maximumAttempts:
          description: "the maximum number of attempts, default to 0, means unlimited"
          type: integer
        maximumAttemptsDurationSeconds:
          description: "the maximum duration of all attempts, default to 0, means\
            \ unlimited"
          type: integer
      type: object
    ProcessExecutionStartResponse:
      description: response of ProcessExecutionStartRequest
      example:
        processExecutionId: processExecutionId
      properties:
        processExecutionId:
          description: a UUID as the unique identifier of a process execution
          type: string
      required:
      - processExecutionId
      type: object
    NotifyImmediateTasksRequest:
      example:
        processExecutionId: processExecutionId
        processId: processId
        namespace: namespace
        shardId: 0
      properties:
        shardId:
          type: integer
        namespace:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
        processId:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
        processExecutionId:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
      required:
      - shardId
      type: object
    NotifyTimerTasksRequest:
      example:
        fireTimestamps:
        - 6
        - 6
        processExecutionId: processExecutionId
        processId: processId
        namespace: namespace
        shardId: 0
      properties:
        shardId:
          type: integer
        fireTimestamps:
          description: the fire timestamp of all timer tasks to pull
          items:
            format: int64
            type: integer
          type: array
        namespace:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
        processId:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
        processExecutionId:
          description: "optional field for distributed database without global secondary\
            \ index, to pull for specific task rather than a page"
          type: string
      required:
      - fireTimestamps
      - shardId
      type: object
    ProcessExecutionStopRequest:
      description: the request for stopping a process execution
      example:
        processId: processId
        namespace: namespace
        stopType: null
      properties:
        namespace:
          type: string
        processId:
          type: string
        stopType:
          $ref: '#/components/schemas/ProcessExecutionStopType'
      required:
      - namespace
      - processId
      type: object
    ProcessExecutionStopType:
      enum:
      - TERMINATE
      - FAIL
      type: string
    PublishToLocalQueueRequest:
      description: the request for sending messages to be consumed within a single
        process execution
      example:
        processId: processId
        namespace: namespace
        messages:
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
      properties:
        namespace:
          type: string
        processId:
          type: string
        messages:
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
          type: array
      required:
      - namespace
      - processId
      type: object
    ProcessExecutionRpcRequest:
      description: the request for executing a RPC method of a process execution
      example:
        input:
          data: data
          encoding: encoding
        processId: processId
        loadGlobalAttributesRequest:
          tableRequests:
          - lockingPolicy: null
            columns:
            - dbColumn: dbColumn
            - dbColumn: dbColumn
            tableName: tableName
          - lockingPolicy: null
            columns:
            - dbColumn: dbColumn
            - dbColumn: dbColumn
            tableName: tableName
        namespace: namespace
        timeoutSeconds: 0
        rpcName: rpcName
      properties:
        namespace:
          type: string
        processId:
          type: string
        rpcName:
          type: string
        input:
          $ref: '#/components/schemas/EncodedObject'
        timeoutSeconds:
          description: the timeout for the single attempt of the Process RPC API
          type: integer
        loadGlobalAttributesRequest:
          $ref: '#/components/schemas/LoadGlobalAttributesRequest'
      required:
      - namespace
      - processId
      - rpcName
      type: object
    ProcessExecutionRpcResponse:
      description: the response for executing a RPC method of a process execution
      example:
        output:
          data: data
          encoding: encoding
      properties:
        output:
          $ref: '#/components/schemas/EncodedObject'
      type: object
    ProcessRpcWorkerRequest:
      description: the request of the worker RPC API
      example:
        input:
          data: data
          encoding: encoding
        loadedGlobalAttributes:
          tableResponses:
          - columns:
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            tableName: tableName
          - columns:
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            - dbQueryValue: dbQueryValue
              dbColumn: dbColumn
            tableName: tableName
        context:
          recoverFromApi: null
          processStartedTimestamp: 0
          processExecutionId: processExecutionId
          processId: processId
          recoverFromStateExecutionId: recoverFromStateExecutionId
          firstAttemptTimestamp: 6
          attempt: 1
          stateExecutionId: stateExecutionId
        processType: processType
        rpcName: rpcName
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        rpcName:
          type: string
        input:
          $ref: '#/components/schemas/EncodedObject'
        loadedGlobalAttributes:
          $ref: '#/components/schemas/LoadGlobalAttributeResponse'
      required:
      - context
      - processType
      - rpcName
      type: object
    ProcessRpcWorkerResponse:
      description: the response of the worker RPC API
      example:
        output:
          data: data
          encoding: encoding
        stateDecision:
          nextStates:
          - stateConfig:
              executeApiTimeoutSeconds: 6
              stateFailureRecoveryOptions:
                stateFailureProceedStateId: stateFailureProceedStateId
                stateFailureProceedStateConfig: null
                policy: null
              loadGlobalAttributesRequest:
                tableRequests:
                - lockingPolicy: null
                  columns:
                  - dbColumn: dbColumn
                  - dbColumn: dbColumn
                  tableName: tableName
                - lockingPolicy: null
                  columns:
                  - dbColumn: dbColumn
                  - dbColumn: dbColumn
                  tableName: tableName
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          - stateConfig:
              executeApiTimeoutSeconds: 6
              stateFailureRecoveryOptions:
                stateFailureProceedStateId: stateFailureProceedStateId
                stateFailureProceedStateConfig: null
                policy: null
              loadGlobalAttributesRequest:
                tableRequests:
                - lockingPolicy: null
                  columns:
                  - dbColumn: dbColumn
                  - dbColumn: dbColumn
                  tableName: tableName
                - lockingPolicy: null
                  columns:
                  - dbColumn: dbColumn
                  - dbColumn: dbColumn
                  tableName: tableName
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          threadCloseDecision:
            closeInput:
              data: data
              encoding: encoding
            closeType: null
        publishToLocalQueue:
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        - queueName: queueName
          payload:
            data: data
            encoding: encoding
          dedupId: dedupId
        writeToGlobalAttributes:
        - updateColumns:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          tableName: tableName
        - updateColumns:
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          - dbQueryValue: dbQueryValue
            dbColumn: dbColumn
          tableName: tableName
      properties:
        output:
          $ref: '#/components/schemas/EncodedObject'
        stateDecision:
          $ref: '#/components/schemas/StateDecision'
        publishToLocalQueue:
          items:
            $ref: '#/components/schemas/LocalQueueMessage'
          type: array
        writeToGlobalAttributes:
          items:
            $ref: '#/components/schemas/GlobalAttributeTableRowUpdate'
          type: array
      required:
      - stateDecision
      type: object
