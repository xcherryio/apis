openapi: 3.0.3
info:
  description: This APIs between xdb service and SDKs
  title: XDB APIs
  version: 0.0.1
servers:
- url: /
paths:
  /api/v1/xdb/service/process-execution/start:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionStartRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionStartResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Invalid request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Process already started
      summary: start a process execution
  /api/v1/xdb/service/process-execution/describe:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessExecutionDescribeRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessExecutionDescribeResponse'
          description: successful operation
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Invalid request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
          description: Process execution not exists
      summary: describe a process execution
  /api/v1/xdb/worker/async-state/wait-until:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateWaitUntilRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateWaitUntilResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
          description: worker execution failure
      summary: invoking AsyncState.waitUntil API
  /api/v1/xdb/worker/async-state/execute:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AsyncStateExecuteRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncStateExecuteResponse'
          description: successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerErrorResponse'
          description: worker execution failure
      summary: invoking AsyncState.execute API
components:
  schemas:
    ProcessExecutionDescribeRequest:
      example:
        processId: processId
        namespace: namespace
      properties:
        namespace:
          type: string
        processId:
          type: string
      required:
      - namespace
      - processId
      type: object
    ProcessExecutionDescribeResponse:
      example:
        workerUrl: workerUrl
        processExecutionId: processExecutionId
        processType: processType
        startTimestamp: 0
        status: null
      properties:
        processExecutionId:
          type: string
        processType:
          description: the process type for SDK to lookup the process definition class
          type: string
        workerUrl:
          description: the URL for XDB async service to make callback to worker
          type: string
        startTimestamp:
          description: start time of the process execution
          type: integer
        status:
          $ref: '#/components/schemas/ProcessStatus'
      type: object
    ProcessStatus:
      enum:
      - RUNNING
      - COMPLETED
      - FAILED
      - TIMEOUT
      - TERMINATED
      type: string
    AsyncStateWaitUntilRequest:
      description: the input of the waitUntil API
      example:
        stateId: stateId
        context:
          processStartedTimestamp: 0
          processExecutionId: processExecutionId
          processId: processId
          firstAttemptTimestamp: 6
          attempt: 1
          stateExecutionId: stateExecutionId
        processType: processType
        stateInput:
          data: data
          encoding: encoding
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - context
      - processType
      - stateId
      type: object
    AsyncStateWaitUntilResponse:
      description: the output of the waitUntil API
      example:
        commandRequest:
          timerCommands:
          - firingUnixTimestampSeconds: 0
            commandId: commandId
          - firingUnixTimestampSeconds: 0
            commandId: commandId
          waitingType: null
      properties:
        commandRequest:
          $ref: '#/components/schemas/CommandRequest'
      required:
      - commandRequest
      type: object
    CommandRequest:
      example:
        timerCommands:
        - firingUnixTimestampSeconds: 0
          commandId: commandId
        - firingUnixTimestampSeconds: 0
          commandId: commandId
        waitingType: null
      properties:
        waitingType:
          $ref: '#/components/schemas/CommandWaitingType'
        timerCommands:
          items:
            $ref: '#/components/schemas/TimerCommand'
          type: array
      required:
      - commandType
      type: object
    TimerCommand:
      example:
        firingUnixTimestampSeconds: 0
        commandId: commandId
      properties:
        commandId:
          type: string
        firingUnixTimestampSeconds:
          format: int64
          type: integer
      required:
      - firingUnixTimestampSeconds
      type: object
    CommandWaitingType:
      enum:
      - EmptyCommand
      - AnyOfCompletion
      - AllOfCompletion
      type: string
    AsyncStateExecuteRequest:
      description: the input of the execute API
      example:
        stateId: stateId
        context:
          processStartedTimestamp: 0
          processExecutionId: processExecutionId
          processId: processId
          firstAttemptTimestamp: 6
          attempt: 1
          stateExecutionId: stateExecutionId
        processType: processType
        stateInput:
          data: data
          encoding: encoding
      properties:
        context:
          $ref: '#/components/schemas/Context'
        processType:
          type: string
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - context
      - processType
      - stateId
      type: object
    AsyncStateExecuteResponse:
      description: the output of the execute API
      example:
        stateDecision:
          nextStates:
          - stateConfig:
              executeApiTimeoutSeconds: 6
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          - stateConfig:
              executeApiTimeoutSeconds: 6
              skipWaitUntil: true
              waitUntilApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
              waitUntilApiTimeoutSeconds: 0
              executeApiRetryPolicy:
                maximumAttemptsDurationSeconds: 7
                maximumAttempts: 2
                initialIntervalSeconds: 1
                maximumIntervalSeconds: 5
                backoffCoefficient: 5.962134
            stateId: stateId
            stateInput:
              data: data
              encoding: encoding
          threadCloseDecision:
            closeInput:
              data: data
              encoding: encoding
            closeType: null
      properties:
        stateDecision:
          $ref: '#/components/schemas/StateDecision'
      required:
      - stateDecision
      type: object
    StateDecision:
      description: "the decision at the end of state execution, either nextStates\
        \ or threadCloseDecision is needed"
      example:
        nextStates:
        - stateConfig:
            executeApiTimeoutSeconds: 6
            skipWaitUntil: true
            waitUntilApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
            waitUntilApiTimeoutSeconds: 0
            executeApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
          stateId: stateId
          stateInput:
            data: data
            encoding: encoding
        - stateConfig:
            executeApiTimeoutSeconds: 6
            skipWaitUntil: true
            waitUntilApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
            waitUntilApiTimeoutSeconds: 0
            executeApiRetryPolicy:
              maximumAttemptsDurationSeconds: 7
              maximumAttempts: 2
              initialIntervalSeconds: 1
              maximumIntervalSeconds: 5
              backoffCoefficient: 5.962134
          stateId: stateId
          stateInput:
            data: data
            encoding: encoding
        threadCloseDecision:
          closeInput:
            data: data
            encoding: encoding
          closeType: null
      properties:
        nextStates:
          items:
            $ref: '#/components/schemas/StateMovement'
          type: array
        threadCloseDecision:
          $ref: '#/components/schemas/ThreadCloseDecision'
      type: object
    ThreadCloseDecision:
      example:
        closeInput:
          data: data
          encoding: encoding
        closeType: null
      properties:
        closeType:
          $ref: '#/components/schemas/ThreadCloseType'
        closeInput:
          $ref: '#/components/schemas/EncodedObject'
      required:
      - closeType
      type: object
    ThreadCloseType:
      enum:
      - FORCE_COMPLETE_PROCESS
      - GRACEFUL_COMPLETE_PROCESS
      - DEAD_END
      - FORCE_FAIL_PROCESS
      type: string
    StateMovement:
      example:
        stateConfig:
          executeApiTimeoutSeconds: 6
          skipWaitUntil: true
          waitUntilApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
          waitUntilApiTimeoutSeconds: 0
          executeApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
        stateId: stateId
        stateInput:
          data: data
          encoding: encoding
      properties:
        stateId:
          type: string
        stateInput:
          $ref: '#/components/schemas/EncodedObject'
        stateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
      required:
      - stateId
      type: object
    Context:
      example:
        processStartedTimestamp: 0
        processExecutionId: processExecutionId
        processId: processId
        firstAttemptTimestamp: 6
        attempt: 1
        stateExecutionId: stateExecutionId
      properties:
        processId:
          type: string
        processExecutionId:
          type: string
        processStartedTimestamp:
          format: int64
          type: integer
        stateExecutionId:
          description: stateExecutionId is for async state API only
          type: string
        firstAttemptTimestamp:
          description: for async state API only(during backoff retry)
          format: int64
          type: integer
        attempt:
          description: for async state API only(during backoff retry)
          type: integer
      required:
      - processExecutionId
      - processId
      - processStartedTimestamp
      type: object
    WorkerErrorResponse:
      properties:
        detail:
          type: string
        errorType:
          type: string
      required:
      - errorType
      type: object
    EncodedObject:
      example:
        data: data
        encoding: encoding
      properties:
        encoding:
          type: string
        data:
          type: string
      required:
      - data
      - encoding
      type: object
    ApiErrorResponse:
      properties:
        detail:
          type: string
        originalWorkerErrorDetail:
          type: string
        originalWorkerErrorType:
          type: string
        originalWorkerErrorStatus:
          type: integer
      type: object
    ProcessExecutionStartRequest:
      description: the request for starting an process execution
      example:
        startStateConfig:
          executeApiTimeoutSeconds: 6
          skipWaitUntil: true
          waitUntilApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
          waitUntilApiTimeoutSeconds: 0
          executeApiRetryPolicy:
            maximumAttemptsDurationSeconds: 7
            maximumAttempts: 2
            initialIntervalSeconds: 1
            maximumIntervalSeconds: 5
            backoffCoefficient: 5.962134
        startStateInput:
          data: data
          encoding: encoding
        workerUrl: workerUrl
        startStateId: startStateId
        processId: processId
        processStartConfig:
          timeoutSeconds: 9
          idReusePolicy: null
        namespace: namespace
        processType: processType
      properties:
        namespace:
          type: string
        processId:
          description: "the user business identifier for the process, which can be\
            \ used for multiple ProcessExecution based on ProcessIdReusePolicy"
          type: string
        processType:
          description: the process type for SDK to lookup the process definition class
          type: string
        workerUrl:
          description: the URL for XDB async service to make callback to worker
          type: string
        startStateId:
          description: StateId of the first AsyncState to start
          type: string
        startStateInput:
          $ref: '#/components/schemas/EncodedObject'
        startStateConfig:
          $ref: '#/components/schemas/AsyncStateConfig'
        processStartConfig:
          $ref: '#/components/schemas/ProcessStartConfig'
      required:
      - namespace
      - processId
      - processType
      - workerUrl
      type: object
    ProcessStartConfig:
      example:
        timeoutSeconds: 9
        idReusePolicy: null
      properties:
        timeoutSeconds:
          type: integer
        idReusePolicy:
          $ref: '#/components/schemas/ProcessIdReusePolicy'
      type: object
    ProcessIdReusePolicy:
      enum:
      - ALLOW_IF_PREVIOUS_EXIT_ABNORMALLY
      - ALLOW_IF_NO_RUNNING
      - DISALLOW_REUSE
      - TERMINATE_IF_RUNNING
      type: string
    AsyncStateConfig:
      example:
        executeApiTimeoutSeconds: 6
        skipWaitUntil: true
        waitUntilApiRetryPolicy:
          maximumAttemptsDurationSeconds: 7
          maximumAttempts: 2
          initialIntervalSeconds: 1
          maximumIntervalSeconds: 5
          backoffCoefficient: 5.962134
        waitUntilApiTimeoutSeconds: 0
        executeApiRetryPolicy:
          maximumAttemptsDurationSeconds: 7
          maximumAttempts: 2
          initialIntervalSeconds: 1
          maximumIntervalSeconds: 5
          backoffCoefficient: 5.962134
      properties:
        skipWaitUntil:
          type: boolean
        waitUntilApiTimeoutSeconds:
          description: the timeout for the single attempt of AsyncState.waitUntil
            API
          type: integer
        executeApiTimeoutSeconds:
          description: the timeout for the single attempt of AsyncState.execute API
          type: integer
        waitUntilApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
        executeApiRetryPolicy:
          $ref: '#/components/schemas/RetryPolicy'
      type: object
    RetryPolicy:
      example:
        maximumAttemptsDurationSeconds: 7
        maximumAttempts: 2
        initialIntervalSeconds: 1
        maximumIntervalSeconds: 5
        backoffCoefficient: 5.962134
      properties:
        initialIntervalSeconds:
          description: "the initial interval for the first retry, default to 1 second"
          type: integer
        backoffCoefficient:
          description: "the backoff coefficient for the next retry, default to 2"
          format: float
          type: number
        maximumIntervalSeconds:
          description: "the maximum interval for the next retry, default to 100x of\
            \ initial interval"
          type: integer
        maximumAttempts:
          description: "the maximum number of attempts, default to 0, means unlimited"
          type: integer
        maximumAttemptsDurationSeconds:
          description: "the maximum duration of all attempts, default to 0, means\
            \ unlimited"
          type: integer
      type: object
    ProcessExecutionStartResponse:
      description: response of ProcessExecutionStartRequest
      example:
        processExecutionId: processExecutionId
      properties:
        processExecutionId:
          description: a UUID as the unique identifier of a process execution
          type: string
      required:
      - processExecutionId
      type: object
