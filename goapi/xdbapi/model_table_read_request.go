/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
)

// checks if the TableReadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableReadRequest{}

// TableReadRequest struct for TableReadRequest
type TableReadRequest struct {
	TableName     *string                 `json:"tableName,omitempty"`
	LockingPolicy *TableReadLockingPolicy `json:"lockingPolicy,omitempty"`
	Columns       []TableColumnDef        `json:"columns,omitempty"`
}

// NewTableReadRequest instantiates a new TableReadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableReadRequest() *TableReadRequest {
	this := TableReadRequest{}
	return &this
}

// NewTableReadRequestWithDefaults instantiates a new TableReadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableReadRequestWithDefaults() *TableReadRequest {
	this := TableReadRequest{}
	return &this
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *TableReadRequest) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableReadRequest) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *TableReadRequest) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *TableReadRequest) SetTableName(v string) {
	o.TableName = &v
}

// GetLockingPolicy returns the LockingPolicy field value if set, zero value otherwise.
func (o *TableReadRequest) GetLockingPolicy() TableReadLockingPolicy {
	if o == nil || IsNil(o.LockingPolicy) {
		var ret TableReadLockingPolicy
		return ret
	}
	return *o.LockingPolicy
}

// GetLockingPolicyOk returns a tuple with the LockingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableReadRequest) GetLockingPolicyOk() (*TableReadLockingPolicy, bool) {
	if o == nil || IsNil(o.LockingPolicy) {
		return nil, false
	}
	return o.LockingPolicy, true
}

// HasLockingPolicy returns a boolean if a field has been set.
func (o *TableReadRequest) HasLockingPolicy() bool {
	if o != nil && !IsNil(o.LockingPolicy) {
		return true
	}

	return false
}

// SetLockingPolicy gets a reference to the given TableReadLockingPolicy and assigns it to the LockingPolicy field.
func (o *TableReadRequest) SetLockingPolicy(v TableReadLockingPolicy) {
	o.LockingPolicy = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *TableReadRequest) GetColumns() []TableColumnDef {
	if o == nil || IsNil(o.Columns) {
		var ret []TableColumnDef
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableReadRequest) GetColumnsOk() ([]TableColumnDef, bool) {
	if o == nil || IsNil(o.Columns) {
		return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *TableReadRequest) HasColumns() bool {
	if o != nil && !IsNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []TableColumnDef and assigns it to the Columns field.
func (o *TableReadRequest) SetColumns(v []TableColumnDef) {
	o.Columns = v
}

func (o TableReadRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableReadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TableName) {
		toSerialize["tableName"] = o.TableName
	}
	if !IsNil(o.LockingPolicy) {
		toSerialize["lockingPolicy"] = o.LockingPolicy
	}
	if !IsNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	return toSerialize, nil
}

type NullableTableReadRequest struct {
	value *TableReadRequest
	isSet bool
}

func (v NullableTableReadRequest) Get() *TableReadRequest {
	return v.value
}

func (v *NullableTableReadRequest) Set(val *TableReadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTableReadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTableReadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableReadRequest(val *TableReadRequest) *NullableTableReadRequest {
	return &NullableTableReadRequest{value: val, isSet: true}
}

func (v NullableTableReadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableReadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
