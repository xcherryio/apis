/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
)

// checks if the AsyncStateConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsyncStateConfig{}

// AsyncStateConfig struct for AsyncStateConfig
type AsyncStateConfig struct {
	SkipWaitUntil *bool `json:"skipWaitUntil,omitempty"`
}

// NewAsyncStateConfig instantiates a new AsyncStateConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncStateConfig() *AsyncStateConfig {
	this := AsyncStateConfig{}
	return &this
}

// NewAsyncStateConfigWithDefaults instantiates a new AsyncStateConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncStateConfigWithDefaults() *AsyncStateConfig {
	this := AsyncStateConfig{}
	return &this
}

// GetSkipWaitUntil returns the SkipWaitUntil field value if set, zero value otherwise.
func (o *AsyncStateConfig) GetSkipWaitUntil() bool {
	if o == nil || IsNil(o.SkipWaitUntil) {
		var ret bool
		return ret
	}
	return *o.SkipWaitUntil
}

// GetSkipWaitUntilOk returns a tuple with the SkipWaitUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncStateConfig) GetSkipWaitUntilOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipWaitUntil) {
		return nil, false
	}
	return o.SkipWaitUntil, true
}

// HasSkipWaitUntil returns a boolean if a field has been set.
func (o *AsyncStateConfig) HasSkipWaitUntil() bool {
	if o != nil && !IsNil(o.SkipWaitUntil) {
		return true
	}

	return false
}

// SetSkipWaitUntil gets a reference to the given bool and assigns it to the SkipWaitUntil field.
func (o *AsyncStateConfig) SetSkipWaitUntil(v bool) {
	o.SkipWaitUntil = &v
}

func (o AsyncStateConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsyncStateConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SkipWaitUntil) {
		toSerialize["skipWaitUntil"] = o.SkipWaitUntil
	}
	return toSerialize, nil
}

type NullableAsyncStateConfig struct {
	value *AsyncStateConfig
	isSet bool
}

func (v NullableAsyncStateConfig) Get() *AsyncStateConfig {
	return v.value
}

func (v *NullableAsyncStateConfig) Set(val *AsyncStateConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncStateConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncStateConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncStateConfig(val *AsyncStateConfig) *NullableAsyncStateConfig {
	return &NullableAsyncStateConfig{value: val, isSet: true}
}

func (v NullableAsyncStateConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncStateConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
