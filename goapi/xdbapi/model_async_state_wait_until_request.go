/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
)

// checks if the AsyncStateWaitUntilRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AsyncStateWaitUntilRequest{}

// AsyncStateWaitUntilRequest the input of the waitUntil API
type AsyncStateWaitUntilRequest struct {
	Context      *Context       `json:"context,omitempty"`
	ProcessType  *string        `json:"processType,omitempty"`
	AsyncStateId *string        `json:"asyncStateId,omitempty"`
	StateInput   *EncodedObject `json:"stateInput,omitempty"`
}

// NewAsyncStateWaitUntilRequest instantiates a new AsyncStateWaitUntilRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncStateWaitUntilRequest() *AsyncStateWaitUntilRequest {
	this := AsyncStateWaitUntilRequest{}
	return &this
}

// NewAsyncStateWaitUntilRequestWithDefaults instantiates a new AsyncStateWaitUntilRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncStateWaitUntilRequestWithDefaults() *AsyncStateWaitUntilRequest {
	this := AsyncStateWaitUntilRequest{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *AsyncStateWaitUntilRequest) GetContext() Context {
	if o == nil || IsNil(o.Context) {
		var ret Context
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncStateWaitUntilRequest) GetContextOk() (*Context, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *AsyncStateWaitUntilRequest) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given Context and assigns it to the Context field.
func (o *AsyncStateWaitUntilRequest) SetContext(v Context) {
	o.Context = &v
}

// GetProcessType returns the ProcessType field value if set, zero value otherwise.
func (o *AsyncStateWaitUntilRequest) GetProcessType() string {
	if o == nil || IsNil(o.ProcessType) {
		var ret string
		return ret
	}
	return *o.ProcessType
}

// GetProcessTypeOk returns a tuple with the ProcessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncStateWaitUntilRequest) GetProcessTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessType) {
		return nil, false
	}
	return o.ProcessType, true
}

// HasProcessType returns a boolean if a field has been set.
func (o *AsyncStateWaitUntilRequest) HasProcessType() bool {
	if o != nil && !IsNil(o.ProcessType) {
		return true
	}

	return false
}

// SetProcessType gets a reference to the given string and assigns it to the ProcessType field.
func (o *AsyncStateWaitUntilRequest) SetProcessType(v string) {
	o.ProcessType = &v
}

// GetAsyncStateId returns the AsyncStateId field value if set, zero value otherwise.
func (o *AsyncStateWaitUntilRequest) GetAsyncStateId() string {
	if o == nil || IsNil(o.AsyncStateId) {
		var ret string
		return ret
	}
	return *o.AsyncStateId
}

// GetAsyncStateIdOk returns a tuple with the AsyncStateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncStateWaitUntilRequest) GetAsyncStateIdOk() (*string, bool) {
	if o == nil || IsNil(o.AsyncStateId) {
		return nil, false
	}
	return o.AsyncStateId, true
}

// HasAsyncStateId returns a boolean if a field has been set.
func (o *AsyncStateWaitUntilRequest) HasAsyncStateId() bool {
	if o != nil && !IsNil(o.AsyncStateId) {
		return true
	}

	return false
}

// SetAsyncStateId gets a reference to the given string and assigns it to the AsyncStateId field.
func (o *AsyncStateWaitUntilRequest) SetAsyncStateId(v string) {
	o.AsyncStateId = &v
}

// GetStateInput returns the StateInput field value if set, zero value otherwise.
func (o *AsyncStateWaitUntilRequest) GetStateInput() EncodedObject {
	if o == nil || IsNil(o.StateInput) {
		var ret EncodedObject
		return ret
	}
	return *o.StateInput
}

// GetStateInputOk returns a tuple with the StateInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncStateWaitUntilRequest) GetStateInputOk() (*EncodedObject, bool) {
	if o == nil || IsNil(o.StateInput) {
		return nil, false
	}
	return o.StateInput, true
}

// HasStateInput returns a boolean if a field has been set.
func (o *AsyncStateWaitUntilRequest) HasStateInput() bool {
	if o != nil && !IsNil(o.StateInput) {
		return true
	}

	return false
}

// SetStateInput gets a reference to the given EncodedObject and assigns it to the StateInput field.
func (o *AsyncStateWaitUntilRequest) SetStateInput(v EncodedObject) {
	o.StateInput = &v
}

func (o AsyncStateWaitUntilRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AsyncStateWaitUntilRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.ProcessType) {
		toSerialize["processType"] = o.ProcessType
	}
	if !IsNil(o.AsyncStateId) {
		toSerialize["asyncStateId"] = o.AsyncStateId
	}
	if !IsNil(o.StateInput) {
		toSerialize["stateInput"] = o.StateInput
	}
	return toSerialize, nil
}

type NullableAsyncStateWaitUntilRequest struct {
	value *AsyncStateWaitUntilRequest
	isSet bool
}

func (v NullableAsyncStateWaitUntilRequest) Get() *AsyncStateWaitUntilRequest {
	return v.value
}

func (v *NullableAsyncStateWaitUntilRequest) Set(val *AsyncStateWaitUntilRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncStateWaitUntilRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncStateWaitUntilRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncStateWaitUntilRequest(val *AsyncStateWaitUntilRequest) *NullableAsyncStateWaitUntilRequest {
	return &NullableAsyncStateWaitUntilRequest{value: val, isSet: true}
}

func (v NullableAsyncStateWaitUntilRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncStateWaitUntilRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
