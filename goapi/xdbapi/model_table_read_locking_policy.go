/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
)

// checks if the TableReadLockingPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TableReadLockingPolicy{}

// TableReadLockingPolicy struct for TableReadLockingPolicy
type TableReadLockingPolicy struct {
	ReadLockingType AttributeReadLockingType `json:"readLockingType"`
	TableName       string                   `json:"tableName"`
}

// NewTableReadLockingPolicy instantiates a new TableReadLockingPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableReadLockingPolicy(readLockingType AttributeReadLockingType, tableName string) *TableReadLockingPolicy {
	this := TableReadLockingPolicy{}
	this.ReadLockingType = readLockingType
	this.TableName = tableName
	return &this
}

// NewTableReadLockingPolicyWithDefaults instantiates a new TableReadLockingPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableReadLockingPolicyWithDefaults() *TableReadLockingPolicy {
	this := TableReadLockingPolicy{}
	return &this
}

// GetReadLockingType returns the ReadLockingType field value
func (o *TableReadLockingPolicy) GetReadLockingType() AttributeReadLockingType {
	if o == nil {
		var ret AttributeReadLockingType
		return ret
	}

	return o.ReadLockingType
}

// GetReadLockingTypeOk returns a tuple with the ReadLockingType field value
// and a boolean to check if the value has been set.
func (o *TableReadLockingPolicy) GetReadLockingTypeOk() (*AttributeReadLockingType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadLockingType, true
}

// SetReadLockingType sets field value
func (o *TableReadLockingPolicy) SetReadLockingType(v AttributeReadLockingType) {
	o.ReadLockingType = v
}

// GetTableName returns the TableName field value
func (o *TableReadLockingPolicy) GetTableName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value
// and a boolean to check if the value has been set.
func (o *TableReadLockingPolicy) GetTableNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TableName, true
}

// SetTableName sets field value
func (o *TableReadLockingPolicy) SetTableName(v string) {
	o.TableName = v
}

func (o TableReadLockingPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TableReadLockingPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["readLockingType"] = o.ReadLockingType
	toSerialize["tableName"] = o.TableName
	return toSerialize, nil
}

type NullableTableReadLockingPolicy struct {
	value *TableReadLockingPolicy
	isSet bool
}

func (v NullableTableReadLockingPolicy) Get() *TableReadLockingPolicy {
	return v.value
}

func (v *NullableTableReadLockingPolicy) Set(val *TableReadLockingPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableTableReadLockingPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableTableReadLockingPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableReadLockingPolicy(val *TableReadLockingPolicy) *NullableTableReadLockingPolicy {
	return &NullableTableReadLockingPolicy{value: val, isSet: true}
}

func (v NullableTableReadLockingPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableReadLockingPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
