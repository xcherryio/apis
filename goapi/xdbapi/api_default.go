/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type DefaultApi interface {

	/*
		ApiV1XdbServiceProcessExecutionStartPost start a process execution

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiApiV1XdbServiceProcessExecutionStartPostRequest
	*/
	ApiV1XdbServiceProcessExecutionStartPost(ctx context.Context) ApiApiV1XdbServiceProcessExecutionStartPostRequest

	// ApiV1XdbServiceProcessExecutionStartPostExecute executes the request
	//  @return ProcessExecutionStartResponse
	ApiV1XdbServiceProcessExecutionStartPostExecute(r ApiApiV1XdbServiceProcessExecutionStartPostRequest) (*ProcessExecutionStartResponse, *http.Response, error)

	/*
		ApiV1XdbWorkerAsyncStateExecutePost invoking AsyncState.execute API

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiApiV1XdbWorkerAsyncStateExecutePostRequest
	*/
	ApiV1XdbWorkerAsyncStateExecutePost(ctx context.Context) ApiApiV1XdbWorkerAsyncStateExecutePostRequest

	// ApiV1XdbWorkerAsyncStateExecutePostExecute executes the request
	//  @return AsyncStateExecuteResponse
	ApiV1XdbWorkerAsyncStateExecutePostExecute(r ApiApiV1XdbWorkerAsyncStateExecutePostRequest) (*AsyncStateExecuteResponse, *http.Response, error)

	/*
		ApiV1XdbWorkerAsyncStateWaitUntilPost invoking AsyncState.waitUntil API

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest
	*/
	ApiV1XdbWorkerAsyncStateWaitUntilPost(ctx context.Context) ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest

	// ApiV1XdbWorkerAsyncStateWaitUntilPostExecute executes the request
	//  @return AsyncStateWaitUntilResponse
	ApiV1XdbWorkerAsyncStateWaitUntilPostExecute(r ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest) (*AsyncStateWaitUntilResponse, *http.Response, error)
}

// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiApiV1XdbServiceProcessExecutionStartPostRequest struct {
	ctx                          context.Context
	ApiService                   DefaultApi
	processExecutionStartRequest *ProcessExecutionStartRequest
}

func (r ApiApiV1XdbServiceProcessExecutionStartPostRequest) ProcessExecutionStartRequest(processExecutionStartRequest ProcessExecutionStartRequest) ApiApiV1XdbServiceProcessExecutionStartPostRequest {
	r.processExecutionStartRequest = &processExecutionStartRequest
	return r
}

func (r ApiApiV1XdbServiceProcessExecutionStartPostRequest) Execute() (*ProcessExecutionStartResponse, *http.Response, error) {
	return r.ApiService.ApiV1XdbServiceProcessExecutionStartPostExecute(r)
}

/*
ApiV1XdbServiceProcessExecutionStartPost start a process execution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1XdbServiceProcessExecutionStartPostRequest
*/
func (a *DefaultApiService) ApiV1XdbServiceProcessExecutionStartPost(ctx context.Context) ApiApiV1XdbServiceProcessExecutionStartPostRequest {
	return ApiApiV1XdbServiceProcessExecutionStartPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ProcessExecutionStartResponse
func (a *DefaultApiService) ApiV1XdbServiceProcessExecutionStartPostExecute(r ApiApiV1XdbServiceProcessExecutionStartPostRequest) (*ProcessExecutionStartResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ProcessExecutionStartResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiV1XdbServiceProcessExecutionStartPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/xdb/service/process-execution/start"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.processExecutionStartRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1XdbWorkerAsyncStateExecutePostRequest struct {
	ctx                      context.Context
	ApiService               DefaultApi
	asyncStateExecuteRequest *AsyncStateExecuteRequest
}

func (r ApiApiV1XdbWorkerAsyncStateExecutePostRequest) AsyncStateExecuteRequest(asyncStateExecuteRequest AsyncStateExecuteRequest) ApiApiV1XdbWorkerAsyncStateExecutePostRequest {
	r.asyncStateExecuteRequest = &asyncStateExecuteRequest
	return r
}

func (r ApiApiV1XdbWorkerAsyncStateExecutePostRequest) Execute() (*AsyncStateExecuteResponse, *http.Response, error) {
	return r.ApiService.ApiV1XdbWorkerAsyncStateExecutePostExecute(r)
}

/*
ApiV1XdbWorkerAsyncStateExecutePost invoking AsyncState.execute API

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1XdbWorkerAsyncStateExecutePostRequest
*/
func (a *DefaultApiService) ApiV1XdbWorkerAsyncStateExecutePost(ctx context.Context) ApiApiV1XdbWorkerAsyncStateExecutePostRequest {
	return ApiApiV1XdbWorkerAsyncStateExecutePostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AsyncStateExecuteResponse
func (a *DefaultApiService) ApiV1XdbWorkerAsyncStateExecutePostExecute(r ApiApiV1XdbWorkerAsyncStateExecutePostRequest) (*AsyncStateExecuteResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncStateExecuteResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiV1XdbWorkerAsyncStateExecutePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/xdb/worker/async-state/execute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.asyncStateExecuteRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WorkerErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest struct {
	ctx                        context.Context
	ApiService                 DefaultApi
	asyncStateWaitUntilRequest *AsyncStateWaitUntilRequest
}

func (r ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest) AsyncStateWaitUntilRequest(asyncStateWaitUntilRequest AsyncStateWaitUntilRequest) ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest {
	r.asyncStateWaitUntilRequest = &asyncStateWaitUntilRequest
	return r
}

func (r ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest) Execute() (*AsyncStateWaitUntilResponse, *http.Response, error) {
	return r.ApiService.ApiV1XdbWorkerAsyncStateWaitUntilPostExecute(r)
}

/*
ApiV1XdbWorkerAsyncStateWaitUntilPost invoking AsyncState.waitUntil API

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest
*/
func (a *DefaultApiService) ApiV1XdbWorkerAsyncStateWaitUntilPost(ctx context.Context) ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest {
	return ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AsyncStateWaitUntilResponse
func (a *DefaultApiService) ApiV1XdbWorkerAsyncStateWaitUntilPostExecute(r ApiApiV1XdbWorkerAsyncStateWaitUntilPostRequest) (*AsyncStateWaitUntilResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AsyncStateWaitUntilResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.ApiV1XdbWorkerAsyncStateWaitUntilPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/xdb/worker/async-state/wait-until"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.asyncStateWaitUntilRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v WorkerErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
