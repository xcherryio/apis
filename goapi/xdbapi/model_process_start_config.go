/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
)

// checks if the ProcessStartConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessStartConfig{}

// ProcessStartConfig struct for ProcessStartConfig
type ProcessStartConfig struct {
	TimeoutSeconds *int32                `json:"timeoutSeconds,omitempty"`
	IdReusePolicy  *ProcessIdReusePolicy `json:"idReusePolicy,omitempty"`
}

// NewProcessStartConfig instantiates a new ProcessStartConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessStartConfig() *ProcessStartConfig {
	this := ProcessStartConfig{}
	return &this
}

// NewProcessStartConfigWithDefaults instantiates a new ProcessStartConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessStartConfigWithDefaults() *ProcessStartConfig {
	this := ProcessStartConfig{}
	return &this
}

// GetTimeoutSeconds returns the TimeoutSeconds field value if set, zero value otherwise.
func (o *ProcessStartConfig) GetTimeoutSeconds() int32 {
	if o == nil || IsNil(o.TimeoutSeconds) {
		var ret int32
		return ret
	}
	return *o.TimeoutSeconds
}

// GetTimeoutSecondsOk returns a tuple with the TimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStartConfig) GetTimeoutSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutSeconds) {
		return nil, false
	}
	return o.TimeoutSeconds, true
}

// HasTimeoutSeconds returns a boolean if a field has been set.
func (o *ProcessStartConfig) HasTimeoutSeconds() bool {
	if o != nil && !IsNil(o.TimeoutSeconds) {
		return true
	}

	return false
}

// SetTimeoutSeconds gets a reference to the given int32 and assigns it to the TimeoutSeconds field.
func (o *ProcessStartConfig) SetTimeoutSeconds(v int32) {
	o.TimeoutSeconds = &v
}

// GetIdReusePolicy returns the IdReusePolicy field value if set, zero value otherwise.
func (o *ProcessStartConfig) GetIdReusePolicy() ProcessIdReusePolicy {
	if o == nil || IsNil(o.IdReusePolicy) {
		var ret ProcessIdReusePolicy
		return ret
	}
	return *o.IdReusePolicy
}

// GetIdReusePolicyOk returns a tuple with the IdReusePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStartConfig) GetIdReusePolicyOk() (*ProcessIdReusePolicy, bool) {
	if o == nil || IsNil(o.IdReusePolicy) {
		return nil, false
	}
	return o.IdReusePolicy, true
}

// HasIdReusePolicy returns a boolean if a field has been set.
func (o *ProcessStartConfig) HasIdReusePolicy() bool {
	if o != nil && !IsNil(o.IdReusePolicy) {
		return true
	}

	return false
}

// SetIdReusePolicy gets a reference to the given ProcessIdReusePolicy and assigns it to the IdReusePolicy field.
func (o *ProcessStartConfig) SetIdReusePolicy(v ProcessIdReusePolicy) {
	o.IdReusePolicy = &v
}

func (o ProcessStartConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessStartConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeoutSeconds) {
		toSerialize["timeoutSeconds"] = o.TimeoutSeconds
	}
	if !IsNil(o.IdReusePolicy) {
		toSerialize["idReusePolicy"] = o.IdReusePolicy
	}
	return toSerialize, nil
}

type NullableProcessStartConfig struct {
	value *ProcessStartConfig
	isSet bool
}

func (v NullableProcessStartConfig) Get() *ProcessStartConfig {
	return v.value
}

func (v *NullableProcessStartConfig) Set(val *ProcessStartConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessStartConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessStartConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessStartConfig(val *ProcessStartConfig) *NullableProcessStartConfig {
	return &NullableProcessStartConfig{value: val, isSet: true}
}

func (v NullableProcessStartConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessStartConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
