/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
)

// checks if the LocalQueueMessageResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalQueueMessageResult{}

// LocalQueueMessageResult struct for LocalQueueMessageResult
type LocalQueueMessageResult struct {
	// UUID to uniquely distinguish different messages.
	DedupId string         `json:"dedupId"`
	Payload *EncodedObject `json:"payload,omitempty"`
}

// NewLocalQueueMessageResult instantiates a new LocalQueueMessageResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalQueueMessageResult(dedupId string) *LocalQueueMessageResult {
	this := LocalQueueMessageResult{}
	this.DedupId = dedupId
	return &this
}

// NewLocalQueueMessageResultWithDefaults instantiates a new LocalQueueMessageResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalQueueMessageResultWithDefaults() *LocalQueueMessageResult {
	this := LocalQueueMessageResult{}
	return &this
}

// GetDedupId returns the DedupId field value
func (o *LocalQueueMessageResult) GetDedupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DedupId
}

// GetDedupIdOk returns a tuple with the DedupId field value
// and a boolean to check if the value has been set.
func (o *LocalQueueMessageResult) GetDedupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DedupId, true
}

// SetDedupId sets field value
func (o *LocalQueueMessageResult) SetDedupId(v string) {
	o.DedupId = v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *LocalQueueMessageResult) GetPayload() EncodedObject {
	if o == nil || IsNil(o.Payload) {
		var ret EncodedObject
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalQueueMessageResult) GetPayloadOk() (*EncodedObject, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *LocalQueueMessageResult) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given EncodedObject and assigns it to the Payload field.
func (o *LocalQueueMessageResult) SetPayload(v EncodedObject) {
	o.Payload = &v
}

func (o LocalQueueMessageResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalQueueMessageResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dedupId"] = o.DedupId
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableLocalQueueMessageResult struct {
	value *LocalQueueMessageResult
	isSet bool
}

func (v NullableLocalQueueMessageResult) Get() *LocalQueueMessageResult {
	return v.value
}

func (v *NullableLocalQueueMessageResult) Set(val *LocalQueueMessageResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalQueueMessageResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalQueueMessageResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalQueueMessageResult(val *LocalQueueMessageResult) *NullableLocalQueueMessageResult {
	return &NullableLocalQueueMessageResult{value: val, isSet: true}
}

func (v NullableLocalQueueMessageResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalQueueMessageResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
