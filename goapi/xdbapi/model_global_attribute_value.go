/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
)

// checks if the GlobalAttributeValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalAttributeValue{}

// GlobalAttributeValue the value of a global attribute (from SDK to server or from server to SDK)
type GlobalAttributeValue struct {
	// the column name that can be used in the database query, see below for example
	DbColumn string `json:"dbColumn"`
	// the plain string value that can be used in the database query(e.g. for SQL SELECT ... WHERE $Column=$dbQueryValue or UPDATE/INSERT)
	DbQueryValue string `json:"dbQueryValue"`
	// if not empty, the global attribute is mapped to a different table name than the default table. Must be used with alternativeTableForeignKeyColumn
	AlternativeTable *string `json:"alternativeTable,omitempty"`
	// Must present when alternativeTable is not empty. It means the foreign key column to join with the primary key of the default table
	AlternativeTableForeignKeyColumn *string `json:"alternativeTableForeignKeyColumn,omitempty"`
}

// NewGlobalAttributeValue instantiates a new GlobalAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalAttributeValue(dbColumn string, dbQueryValue string) *GlobalAttributeValue {
	this := GlobalAttributeValue{}
	this.DbColumn = dbColumn
	this.DbQueryValue = dbQueryValue
	return &this
}

// NewGlobalAttributeValueWithDefaults instantiates a new GlobalAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalAttributeValueWithDefaults() *GlobalAttributeValue {
	this := GlobalAttributeValue{}
	return &this
}

// GetDbColumn returns the DbColumn field value
func (o *GlobalAttributeValue) GetDbColumn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DbColumn
}

// GetDbColumnOk returns a tuple with the DbColumn field value
// and a boolean to check if the value has been set.
func (o *GlobalAttributeValue) GetDbColumnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DbColumn, true
}

// SetDbColumn sets field value
func (o *GlobalAttributeValue) SetDbColumn(v string) {
	o.DbColumn = v
}

// GetDbQueryValue returns the DbQueryValue field value
func (o *GlobalAttributeValue) GetDbQueryValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DbQueryValue
}

// GetDbQueryValueOk returns a tuple with the DbQueryValue field value
// and a boolean to check if the value has been set.
func (o *GlobalAttributeValue) GetDbQueryValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DbQueryValue, true
}

// SetDbQueryValue sets field value
func (o *GlobalAttributeValue) SetDbQueryValue(v string) {
	o.DbQueryValue = v
}

// GetAlternativeTable returns the AlternativeTable field value if set, zero value otherwise.
func (o *GlobalAttributeValue) GetAlternativeTable() string {
	if o == nil || IsNil(o.AlternativeTable) {
		var ret string
		return ret
	}
	return *o.AlternativeTable
}

// GetAlternativeTableOk returns a tuple with the AlternativeTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAttributeValue) GetAlternativeTableOk() (*string, bool) {
	if o == nil || IsNil(o.AlternativeTable) {
		return nil, false
	}
	return o.AlternativeTable, true
}

// HasAlternativeTable returns a boolean if a field has been set.
func (o *GlobalAttributeValue) HasAlternativeTable() bool {
	if o != nil && !IsNil(o.AlternativeTable) {
		return true
	}

	return false
}

// SetAlternativeTable gets a reference to the given string and assigns it to the AlternativeTable field.
func (o *GlobalAttributeValue) SetAlternativeTable(v string) {
	o.AlternativeTable = &v
}

// GetAlternativeTableForeignKeyColumn returns the AlternativeTableForeignKeyColumn field value if set, zero value otherwise.
func (o *GlobalAttributeValue) GetAlternativeTableForeignKeyColumn() string {
	if o == nil || IsNil(o.AlternativeTableForeignKeyColumn) {
		var ret string
		return ret
	}
	return *o.AlternativeTableForeignKeyColumn
}

// GetAlternativeTableForeignKeyColumnOk returns a tuple with the AlternativeTableForeignKeyColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalAttributeValue) GetAlternativeTableForeignKeyColumnOk() (*string, bool) {
	if o == nil || IsNil(o.AlternativeTableForeignKeyColumn) {
		return nil, false
	}
	return o.AlternativeTableForeignKeyColumn, true
}

// HasAlternativeTableForeignKeyColumn returns a boolean if a field has been set.
func (o *GlobalAttributeValue) HasAlternativeTableForeignKeyColumn() bool {
	if o != nil && !IsNil(o.AlternativeTableForeignKeyColumn) {
		return true
	}

	return false
}

// SetAlternativeTableForeignKeyColumn gets a reference to the given string and assigns it to the AlternativeTableForeignKeyColumn field.
func (o *GlobalAttributeValue) SetAlternativeTableForeignKeyColumn(v string) {
	o.AlternativeTableForeignKeyColumn = &v
}

func (o GlobalAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalAttributeValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dbColumn"] = o.DbColumn
	toSerialize["dbQueryValue"] = o.DbQueryValue
	if !IsNil(o.AlternativeTable) {
		toSerialize["alternativeTable"] = o.AlternativeTable
	}
	if !IsNil(o.AlternativeTableForeignKeyColumn) {
		toSerialize["alternativeTableForeignKeyColumn"] = o.AlternativeTableForeignKeyColumn
	}
	return toSerialize, nil
}

type NullableGlobalAttributeValue struct {
	value *GlobalAttributeValue
	isSet bool
}

func (v NullableGlobalAttributeValue) Get() *GlobalAttributeValue {
	return v.value
}

func (v *NullableGlobalAttributeValue) Set(val *GlobalAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalAttributeValue(val *GlobalAttributeValue) *NullableGlobalAttributeValue {
	return &NullableGlobalAttributeValue{value: val, isSet: true}
}

func (v NullableGlobalAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
