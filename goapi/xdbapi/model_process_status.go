/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
	"fmt"
)

// ProcessStatus the model 'ProcessStatus'
type ProcessStatus string

// List of ProcessStatus
const (
	RUNNING    ProcessStatus = "RUNNING"
	COMPLETED  ProcessStatus = "COMPLETED"
	FAILED     ProcessStatus = "FAILED"
	TIMEOUT    ProcessStatus = "TIMEOUT"
	TERMINATED ProcessStatus = "TERMINATED"
)

// All allowed values of ProcessStatus enum
var AllowedProcessStatusEnumValues = []ProcessStatus{
	"RUNNING",
	"COMPLETED",
	"FAILED",
	"TIMEOUT",
	"TERMINATED",
}

func (v *ProcessStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProcessStatus(value)
	for _, existing := range AllowedProcessStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProcessStatus", value)
}

// NewProcessStatusFromValue returns a pointer to a valid ProcessStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProcessStatusFromValue(v string) (*ProcessStatus, error) {
	ev := ProcessStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProcessStatus: valid values are %v", v, AllowedProcessStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProcessStatus) IsValid() bool {
	for _, existing := range AllowedProcessStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProcessStatus value
func (v ProcessStatus) Ptr() *ProcessStatus {
	return &v
}

type NullableProcessStatus struct {
	value *ProcessStatus
	isSet bool
}

func (v NullableProcessStatus) Get() *ProcessStatus {
	return v.value
}

func (v *NullableProcessStatus) Set(val *ProcessStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessStatus(val *ProcessStatus) *NullableProcessStatus {
	return &NullableProcessStatus{value: val, isSet: true}
}

func (v NullableProcessStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
