/*
XDB APIs

This APIs between xdb service and SDKs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package xdbapi

import (
	"encoding/json"
)

// checks if the ThreadCloseDecision type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThreadCloseDecision{}

// ThreadCloseDecision struct for ThreadCloseDecision
type ThreadCloseDecision struct {
	CloseType  *ThreadCloseType `json:"closeType,omitempty"`
	CloseInput *EncodedObject   `json:"closeInput,omitempty"`
}

// NewThreadCloseDecision instantiates a new ThreadCloseDecision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreadCloseDecision() *ThreadCloseDecision {
	this := ThreadCloseDecision{}
	return &this
}

// NewThreadCloseDecisionWithDefaults instantiates a new ThreadCloseDecision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreadCloseDecisionWithDefaults() *ThreadCloseDecision {
	this := ThreadCloseDecision{}
	return &this
}

// GetCloseType returns the CloseType field value if set, zero value otherwise.
func (o *ThreadCloseDecision) GetCloseType() ThreadCloseType {
	if o == nil || IsNil(o.CloseType) {
		var ret ThreadCloseType
		return ret
	}
	return *o.CloseType
}

// GetCloseTypeOk returns a tuple with the CloseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadCloseDecision) GetCloseTypeOk() (*ThreadCloseType, bool) {
	if o == nil || IsNil(o.CloseType) {
		return nil, false
	}
	return o.CloseType, true
}

// HasCloseType returns a boolean if a field has been set.
func (o *ThreadCloseDecision) HasCloseType() bool {
	if o != nil && !IsNil(o.CloseType) {
		return true
	}

	return false
}

// SetCloseType gets a reference to the given ThreadCloseType and assigns it to the CloseType field.
func (o *ThreadCloseDecision) SetCloseType(v ThreadCloseType) {
	o.CloseType = &v
}

// GetCloseInput returns the CloseInput field value if set, zero value otherwise.
func (o *ThreadCloseDecision) GetCloseInput() EncodedObject {
	if o == nil || IsNil(o.CloseInput) {
		var ret EncodedObject
		return ret
	}
	return *o.CloseInput
}

// GetCloseInputOk returns a tuple with the CloseInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreadCloseDecision) GetCloseInputOk() (*EncodedObject, bool) {
	if o == nil || IsNil(o.CloseInput) {
		return nil, false
	}
	return o.CloseInput, true
}

// HasCloseInput returns a boolean if a field has been set.
func (o *ThreadCloseDecision) HasCloseInput() bool {
	if o != nil && !IsNil(o.CloseInput) {
		return true
	}

	return false
}

// SetCloseInput gets a reference to the given EncodedObject and assigns it to the CloseInput field.
func (o *ThreadCloseDecision) SetCloseInput(v EncodedObject) {
	o.CloseInput = &v
}

func (o ThreadCloseDecision) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThreadCloseDecision) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloseType) {
		toSerialize["closeType"] = o.CloseType
	}
	if !IsNil(o.CloseInput) {
		toSerialize["closeInput"] = o.CloseInput
	}
	return toSerialize, nil
}

type NullableThreadCloseDecision struct {
	value *ThreadCloseDecision
	isSet bool
}

func (v NullableThreadCloseDecision) Get() *ThreadCloseDecision {
	return v.value
}

func (v *NullableThreadCloseDecision) Set(val *ThreadCloseDecision) {
	v.value = val
	v.isSet = true
}

func (v NullableThreadCloseDecision) IsSet() bool {
	return v.isSet
}

func (v *NullableThreadCloseDecision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreadCloseDecision(val *ThreadCloseDecision) *NullableThreadCloseDecision {
	return &NullableThreadCloseDecision{value: val, isSet: true}
}

func (v NullableThreadCloseDecision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreadCloseDecision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
