# coding: utf-8

"""
    xCherry APIs

    This APIs between xCherry service and SDKs

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from xcherryapi.models.async_state_execute_request import AsyncStateExecuteRequest

class TestAsyncStateExecuteRequest(unittest.TestCase):
    """AsyncStateExecuteRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AsyncStateExecuteRequest:
        """Test AsyncStateExecuteRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AsyncStateExecuteRequest`
        """
        model = AsyncStateExecuteRequest()
        if include_optional:
            return AsyncStateExecuteRequest(
                context = xcherryapi.models.context.Context(
                    process_id = '', 
                    process_execution_id = '', 
                    process_started_timestamp = 56, 
                    state_execution_id = '', 
                    first_attempt_timestamp = 56, 
                    attempt = 56, 
                    recover_from_state_execution_id = '', 
                    recover_from_api = 'WAIT_UNTIL_API', ),
                process_type = '',
                state_id = '',
                state_input = xcherryapi.models.encoded_object.EncodedObject(
                    encoding = '', 
                    data = '', ),
                command_results = xcherryapi.models.command_results.CommandResults(
                    timer_results = [
                        xcherryapi.models.timer_result.TimerResult(
                            status = 'WAITING_COMMAND', )
                        ], 
                    local_queue_results = [
                        xcherryapi.models.local_queue_result.LocalQueueResult(
                            status = 'WAITING_COMMAND', 
                            queue_name = '', 
                            messages = [
                                xcherryapi.models.local_queue_message_result.LocalQueueMessageResult(
                                    dedup_id = '', 
                                    payload = xcherryapi.models.encoded_object.EncodedObject(
                                        encoding = '', 
                                        data = '', ), )
                                ], )
                        ], ),
                app_database_read_response = xcherryapi.models.app_database_read_response.AppDatabaseReadResponse(
                    tables = [
                        xcherryapi.models.app_database_table_read_response.AppDatabaseTableReadResponse(
                            table_name = '', 
                            rows = [
                                xcherryapi.models.app_database_row_read_response.AppDatabaseRowReadResponse(
                                    columns = [
                                        xcherryapi.models.app_database_column_value.AppDatabaseColumnValue(
                                            column = '', 
                                            query_value = '', )
                                        ], )
                                ], )
                        ], ),
                app_database_error = xcherryapi.models.app_database_error.AppDatabaseError(
                    app_db_error_type = 'UNCATEGORIZED_ERROR', 
                    app_db_error_code = '', 
                    app_db_error_message = '', 
                    app_db_error_table_name = '', ),
                loaded_local_attributes = xcherryapi.models.load_local_attributes_response.LoadLocalAttributesResponse(
                    attributes = [
                        xcherryapi.models.key_value.KeyValue(
                            key = '', 
                            value = xcherryapi.models.encoded_object.EncodedObject(
                                encoding = '', 
                                data = '', ), )
                        ], )
            )
        else:
            return AsyncStateExecuteRequest(
                context = xcherryapi.models.context.Context(
                    process_id = '', 
                    process_execution_id = '', 
                    process_started_timestamp = 56, 
                    state_execution_id = '', 
                    first_attempt_timestamp = 56, 
                    attempt = 56, 
                    recover_from_state_execution_id = '', 
                    recover_from_api = 'WAIT_UNTIL_API', ),
                process_type = '',
                state_id = '',
        )
        """

    def testAsyncStateExecuteRequest(self):
        """Test AsyncStateExecuteRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
