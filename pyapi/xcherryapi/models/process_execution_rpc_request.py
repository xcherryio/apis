# coding: utf-8

"""
    xCherry APIs

    This APIs between xCherry service and SDKs

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from xcherryapi.models.app_database_read_request import AppDatabaseReadRequest
from xcherryapi.models.encoded_object import EncodedObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProcessExecutionRpcRequest(BaseModel):
    """
    the request for executing a RPC method of a process execution
    """ # noqa: E501
    namespace: StrictStr
    process_id: StrictStr = Field(alias="processId")
    rpc_name: StrictStr = Field(alias="rpcName")
    input: Optional[EncodedObject] = None
    timeout_seconds: Optional[StrictInt] = Field(default=None, description="the timeout for the single attempt of the Process RPC API", alias="timeoutSeconds")
    app_database_read_request: Optional[AppDatabaseReadRequest] = Field(default=None, alias="appDatabaseReadRequest")
    __properties: ClassVar[List[str]] = ["namespace", "processId", "rpcName", "input", "timeoutSeconds", "appDatabaseReadRequest"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProcessExecutionRpcRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_database_read_request
        if self.app_database_read_request:
            _dict['appDatabaseReadRequest'] = self.app_database_read_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProcessExecutionRpcRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "namespace": obj.get("namespace"),
            "processId": obj.get("processId"),
            "rpcName": obj.get("rpcName"),
            "input": EncodedObject.from_dict(obj.get("input")) if obj.get("input") is not None else None,
            "timeoutSeconds": obj.get("timeoutSeconds"),
            "appDatabaseReadRequest": AppDatabaseReadRequest.from_dict(obj.get("appDatabaseReadRequest")) if obj.get("appDatabaseReadRequest") is not None else None
        })
        return _obj


