# coding: utf-8

"""
    xCherry APIs

    This APIs between xCherry service and SDKs

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from xcherryapi.models.async_state_config import AsyncStateConfig
from xcherryapi.models.encoded_object import EncodedObject
from xcherryapi.models.process_start_config import ProcessStartConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProcessExecutionStartRequest(BaseModel):
    """
    the request for starting a process execution
    """ # noqa: E501
    namespace: StrictStr
    process_id: StrictStr = Field(description="the user business identifier for the process, which can be used for multiple ProcessExecution based on ProcessIdReusePolicy", alias="processId")
    process_type: StrictStr = Field(description="the process type for SDK to lookup the process definition class", alias="processType")
    worker_url: StrictStr = Field(description="the URL for xcherry async service to make callback to worker", alias="workerUrl")
    start_state_id: Optional[StrictStr] = Field(default=None, description="StateId of the first AsyncState to start", alias="startStateId")
    start_state_input: Optional[EncodedObject] = Field(default=None, alias="startStateInput")
    start_state_config: Optional[AsyncStateConfig] = Field(default=None, alias="startStateConfig")
    process_start_config: Optional[ProcessStartConfig] = Field(default=None, alias="processStartConfig")
    __properties: ClassVar[List[str]] = ["namespace", "processId", "processType", "workerUrl", "startStateId", "startStateInput", "startStateConfig", "processStartConfig"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProcessExecutionStartRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of start_state_input
        if self.start_state_input:
            _dict['startStateInput'] = self.start_state_input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_state_config
        if self.start_state_config:
            _dict['startStateConfig'] = self.start_state_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of process_start_config
        if self.process_start_config:
            _dict['processStartConfig'] = self.process_start_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProcessExecutionStartRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "namespace": obj.get("namespace"),
            "processId": obj.get("processId"),
            "processType": obj.get("processType"),
            "workerUrl": obj.get("workerUrl"),
            "startStateId": obj.get("startStateId"),
            "startStateInput": EncodedObject.from_dict(obj.get("startStateInput")) if obj.get("startStateInput") is not None else None,
            "startStateConfig": AsyncStateConfig.from_dict(obj.get("startStateConfig")) if obj.get("startStateConfig") is not None else None,
            "processStartConfig": ProcessStartConfig.from_dict(obj.get("processStartConfig")) if obj.get("processStartConfig") is not None else None
        })
        return _obj


