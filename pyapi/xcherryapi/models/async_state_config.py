# coding: utf-8

"""
    xCherry APIs

    This APIs between xCherry service and SDKs

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt
from pydantic import Field
from xcherryapi.models.app_database_read_request import AppDatabaseReadRequest
from xcherryapi.models.load_local_attributes_request import LoadLocalAttributesRequest
from xcherryapi.models.retry_policy import RetryPolicy
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AsyncStateConfig(BaseModel):
    """
    AsyncStateConfig
    """ # noqa: E501
    skip_wait_until: Optional[StrictBool] = Field(default=None, alias="skipWaitUntil")
    wait_until_api_timeout_seconds: Optional[StrictInt] = Field(default=None, description="the timeout for the single attempt of AsyncState.waitUntil API", alias="waitUntilApiTimeoutSeconds")
    execute_api_timeout_seconds: Optional[StrictInt] = Field(default=None, description="the timeout for the single attempt of AsyncState.execute API", alias="executeApiTimeoutSeconds")
    wait_until_api_retry_policy: Optional[RetryPolicy] = Field(default=None, alias="waitUntilApiRetryPolicy")
    execute_api_retry_policy: Optional[RetryPolicy] = Field(default=None, alias="executeApiRetryPolicy")
    state_failure_recovery_options: Optional[StateFailureRecoveryOptions] = Field(default=None, alias="stateFailureRecoveryOptions")
    app_database_read_request: Optional[AppDatabaseReadRequest] = Field(default=None, alias="appDatabaseReadRequest")
    load_local_attributes_request: Optional[LoadLocalAttributesRequest] = Field(default=None, alias="loadLocalAttributesRequest")
    __properties: ClassVar[List[str]] = ["skipWaitUntil", "waitUntilApiTimeoutSeconds", "executeApiTimeoutSeconds", "waitUntilApiRetryPolicy", "executeApiRetryPolicy", "stateFailureRecoveryOptions", "appDatabaseReadRequest", "loadLocalAttributesRequest"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AsyncStateConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of wait_until_api_retry_policy
        if self.wait_until_api_retry_policy:
            _dict['waitUntilApiRetryPolicy'] = self.wait_until_api_retry_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execute_api_retry_policy
        if self.execute_api_retry_policy:
            _dict['executeApiRetryPolicy'] = self.execute_api_retry_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_failure_recovery_options
        if self.state_failure_recovery_options:
            _dict['stateFailureRecoveryOptions'] = self.state_failure_recovery_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_database_read_request
        if self.app_database_read_request:
            _dict['appDatabaseReadRequest'] = self.app_database_read_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load_local_attributes_request
        if self.load_local_attributes_request:
            _dict['loadLocalAttributesRequest'] = self.load_local_attributes_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AsyncStateConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "skipWaitUntil": obj.get("skipWaitUntil"),
            "waitUntilApiTimeoutSeconds": obj.get("waitUntilApiTimeoutSeconds"),
            "executeApiTimeoutSeconds": obj.get("executeApiTimeoutSeconds"),
            "waitUntilApiRetryPolicy": RetryPolicy.from_dict(obj.get("waitUntilApiRetryPolicy")) if obj.get("waitUntilApiRetryPolicy") is not None else None,
            "executeApiRetryPolicy": RetryPolicy.from_dict(obj.get("executeApiRetryPolicy")) if obj.get("executeApiRetryPolicy") is not None else None,
            "stateFailureRecoveryOptions": StateFailureRecoveryOptions.from_dict(obj.get("stateFailureRecoveryOptions")) if obj.get("stateFailureRecoveryOptions") is not None else None,
            "appDatabaseReadRequest": AppDatabaseReadRequest.from_dict(obj.get("appDatabaseReadRequest")) if obj.get("appDatabaseReadRequest") is not None else None,
            "loadLocalAttributesRequest": LoadLocalAttributesRequest.from_dict(obj.get("loadLocalAttributesRequest")) if obj.get("loadLocalAttributesRequest") is not None else None
        })
        return _obj

from xcherryapi.models.state_failure_recovery_options import StateFailureRecoveryOptions
# TODO: Rewrite to not use raise_errors
AsyncStateConfig.model_rebuild(raise_errors=False)

