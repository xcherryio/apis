# coding: utf-8

"""
    xCherry APIs

    This APIs between xCherry service and SDKs

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from xcherryapi.models.process_status import ProcessStatus
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProcessExecutionListInfo(BaseModel):
    """
    ProcessExecutionListInfo
    """ # noqa: E501
    namespace: Optional[StrictStr] = None
    process_id: Optional[StrictStr] = Field(default=None, alias="processId")
    process_execution_id: Optional[StrictStr] = Field(default=None, alias="processExecutionId")
    process_type: Optional[StrictStr] = Field(default=None, alias="processType")
    start_timestamp: Optional[StrictInt] = Field(default=None, alias="startTimestamp")
    close_timestamp: Optional[StrictInt] = Field(default=None, alias="closeTimestamp")
    status: Optional[ProcessStatus] = None
    __properties: ClassVar[List[str]] = ["namespace", "processId", "processExecutionId", "processType", "startTimestamp", "closeTimestamp", "status"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProcessExecutionListInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProcessExecutionListInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "namespace": obj.get("namespace"),
            "processId": obj.get("processId"),
            "processExecutionId": obj.get("processExecutionId"),
            "processType": obj.get("processType"),
            "startTimestamp": obj.get("startTimestamp"),
            "closeTimestamp": obj.get("closeTimestamp"),
            "status": obj.get("status")
        })
        return _obj


