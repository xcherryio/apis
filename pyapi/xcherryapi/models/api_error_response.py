# coding: utf-8

"""
    xCherry APIs

    This APIs between xCherry service and SDKs

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from xcherryapi.models.error_sub_type import ErrorSubType
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ApiErrorResponse(BaseModel):
    """
    ApiErrorResponse
    """ # noqa: E501
    error_sub_type: Optional[ErrorSubType] = Field(default=None, alias="errorSubType")
    app_error_type: Optional[StrictStr] = Field(default=None, description="for WORKER_EXECUTION_ERROR, it's the value from WorkerErrorResponse.errorType; for APP_DATABASE_READ/WRITE_ERROR, it's the error code from database driver", alias="appErrorType")
    details: Optional[StrictStr] = Field(default=None, description="for WORKER_EXECUTION_ERROR, it's the value from WorkerErrorResponse.details; for APP_DATABASE_READ/WRITE_ERROR, it's the error message from database driver; for other apiErrorType, it's the detailed message from server.")
    __properties: ClassVar[List[str]] = ["errorSubType", "appErrorType", "details"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ApiErrorResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ApiErrorResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorSubType": obj.get("errorSubType"),
            "appErrorType": obj.get("appErrorType"),
            "details": obj.get("details")
        })
        return _obj


