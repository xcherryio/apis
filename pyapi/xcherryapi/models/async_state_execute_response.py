# coding: utf-8

"""
    xCherry APIs

    This APIs between xCherry service and SDKs

    The version of the OpenAPI document: 0.0.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from xcherryapi.models.app_database_write import AppDatabaseWrite
from xcherryapi.models.key_value import KeyValue
from xcherryapi.models.local_queue_message import LocalQueueMessage
from xcherryapi.models.state_decision import StateDecision
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AsyncStateExecuteResponse(BaseModel):
    """
    the output of the execute API
    """ # noqa: E501
    state_decision: StateDecision = Field(alias="stateDecision")
    publish_to_local_queue: Optional[List[LocalQueueMessage]] = Field(default=None, alias="publishToLocalQueue")
    write_to_app_database: Optional[AppDatabaseWrite] = Field(default=None, alias="writeToAppDatabase")
    write_to_local_attributes: Optional[List[KeyValue]] = Field(default=None, alias="writeToLocalAttributes")
    __properties: ClassVar[List[str]] = ["stateDecision", "publishToLocalQueue", "writeToAppDatabase", "writeToLocalAttributes"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AsyncStateExecuteResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of state_decision
        if self.state_decision:
            _dict['stateDecision'] = self.state_decision.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in publish_to_local_queue (list)
        _items = []
        if self.publish_to_local_queue:
            for _item in self.publish_to_local_queue:
                if _item:
                    _items.append(_item.to_dict())
            _dict['publishToLocalQueue'] = _items
        # override the default output from pydantic by calling `to_dict()` of write_to_app_database
        if self.write_to_app_database:
            _dict['writeToAppDatabase'] = self.write_to_app_database.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in write_to_local_attributes (list)
        _items = []
        if self.write_to_local_attributes:
            for _item in self.write_to_local_attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['writeToLocalAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AsyncStateExecuteResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "stateDecision": StateDecision.from_dict(obj.get("stateDecision")) if obj.get("stateDecision") is not None else None,
            "publishToLocalQueue": [LocalQueueMessage.from_dict(_item) for _item in obj.get("publishToLocalQueue")] if obj.get("publishToLocalQueue") is not None else None,
            "writeToAppDatabase": AppDatabaseWrite.from_dict(obj.get("writeToAppDatabase")) if obj.get("writeToAppDatabase") is not None else None,
            "writeToLocalAttributes": [KeyValue.from_dict(_item) for _item in obj.get("writeToLocalAttributes")] if obj.get("writeToLocalAttributes") is not None else None
        })
        return _obj


